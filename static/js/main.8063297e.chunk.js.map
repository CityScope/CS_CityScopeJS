{"version":3,"sources":["settings/settings.js","redux/reducers/cityIOdataSlice.js","utils/utils.js","Components/LoadingModules/index.js","Components/CityIO/index.js","redux/reducers/menuSlice.js","views/CityScopeJS/MenuContainer/TypesMenu/index.js","views/CityScopeJS/MenuContainer/LayersMenu/index.js","views/CityScopeJS/MenuContainer/ViewSettingsMenu/index.js","views/CityScopeJS/MenuContainer/ScenariosMenu/index.js","Components/ResizableDrawer.js","views/CityScopeJS/MenuContainer/EditMenu/index.js","views/CityScopeJS/MenuContainer/TableInfo/index.js","Components/TUIhandler.js","views/CityScopeJS/MenuContainer/index.js","views/CityScopeJS/DeckglMap/components/PaintBrush/PaintBrush.js","views/CityScopeJS/DeckglMap/components/CellMeta.js","views/CityScopeJS/DeckglMap/components/PaintBrush/index.js","views/CityScopeJS/DeckglMap/deckglLayers/AccessLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/AggregatedTripsLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/ABMLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GridLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/TextualLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GeojsonLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/MeshLayer.js","views/CityScopeJS/DeckglMap/index.js","views/CityScopeJS/VisContainer/RadarChart/index.js","views/CityScopeJS/VisContainer/BarChart/index.js","views/CityScopeJS/VisContainer/AreaCalc/index.js","views/CityScopeJS/VisContainer/index.js","views/CityScopeJS/index.js","theme/typography.js","theme/index.js","views/CityIOviewer/TableListLoading.js","views/CityIOviewer/CityIOlist.js","views/CityIOviewer/SelectedTable/index.js","views/CityIOviewer/SearchTablesList.js","views/CityIOviewer/CityIOdeckGLmap/legoio.png","views/CityIOviewer/CityIOdeckGLmap/index.js","views/CityIOviewer/index.js","views/ProjectionMapping/Keystone/ProjectionDeckMap/index.js","views/ProjectionMapping/Keystone/Components/anchor.tsx","views/ProjectionMapping/Keystone/Components/Keystoner.tsx","views/ProjectionMapping/Keystone/Components/deleteLocalStorage.js","views/ProjectionMapping/Keystone/index.js","views/ProjectionMapping/index.js","views/GridEditor/EditorMap/EditorBrush.js","redux/reducers/editorMenuSlice.js","views/GridEditor/EditorMap/index.js","views/GridEditor/EditorMenu/GridPropsMenu/CenterMapButton/index.js","views/GridEditor/EditorMenu/GridPropsMenu/index.js","views/GridEditor/EditorMenu/GridMakerMenu/gridCreator.js","views/GridEditor/EditorMenu/GridMakerMenu/index.js","views/GridEditor/EditorMenu/TypesEditorMenu/index.js","views/GridEditor/EditorMenu/CommitGridMenu/index.js","views/GridEditor/EditorMenu/index.js","views/GridEditor/index.js","App.js","Components/_wip_animation/_animationSlice.js","redux/reducers/index.js","index.js"],"names":["generalSettings","location","window","csjsLocation","queryString","parse","search","console","log","getCSJSLocation","cityIOSettings","docsURL","cityIO","baseURL","serverLocation","getServerLocation","ListOfTables","interval","cityIOmodules","name","expectUpdate","mapSettings","map","mapStyle","sat","blue","layers","ABM","endTime","startTime","animationSpeed","initialViewState","maxZoom","zoom","pitch","bearing","expectedLayers","GRID_LAYER_CHECKBOX","displayName","cityIOmoduleName","initState","initSliderValue","ABM_LAYER_CHECKBOX","AGGREGATED_TRIPS_LAYER_CHECKBOX","ACCESS_LAYER_CHECKBOX","TEXTUAL_LAYER_CHECKBOX","GEOJSON_LAYER_CHECKBOX","MESH_LAYER_CHECKBOX","viewControlCheckboxes","ROTATE_CHECKBOX","EFFECTS_CHECKBOX","ANIMATION_CHECKBOX","viewControlButtons","RESET_VIEW_BUTTON","ORTHO_VIEW_BUTTON","NORTH_VIEW_BUTTON","GridEditorSettings","dark","GEOGRIDDATA","color","height","id","interactive","GEOGRID","features","properties","header","tableName","cellSize","latitude","longitude","tz","ncols","nrows","rotation","projection","types","Office","LBCS","proportion","use","NAICS","sqm_pperson","Park","Residential","type","cityIOdataSlice","createSlice","initialState","cityIOisDone","cityIOtableName","reducers","updateCityIOdata","state","action","cityIOdata","payload","toggleCityIOisDone","updateCityIOtableName","actions","getAPICall","URL","axios","get","response","data","error","hexToRgb","hex","result","exec","parseInt","testHex","hexString","test","postToCityIO","endPoint","postURL","options","method","url","headers","Accept","then","res","status","catch","cityIObaseURL","fetchJSON","fetch","json","getTableID","getModule","LoadingModules","props","loadingModules","module","index","Box","sx","position","bottom","width","zIndex","LinearProgress","Typography","variant","style","marginRight","removeElement","array","elem","indexOf","splice","CityIO","settings","dispatch","useDispatch","useSelector","cityIOdataState","useState","mainHash","setMainHash","hashes","setHashes","listLoadingModules","setListLoadingModules","cityioURL","getCityIOmetaHash","newMainHash","setTimeout","newHashes","promises","modulesToUpdate","x","forEach","push","Promise","all","modulesFromCityIO","modulesData","reduce","obj","moduleName","m","useEffect","timer","clearTimeout","getModules","menuSlice","editMenuState","typesMenuState","layersMenuState","viewSettingsMenuState","animationMenuState","toggleAnimationState","animationSpeedSliderValue","updateLayersMenuState","updateTypesMenuState","updateEditMenuState","updateViewSettingsMenuState","updateAnimationMenuState","TypesListMenu","typesList","selectedType","setSelectedType","typeHeight","setTypeHeight","heightSliderMarks","value","label","SELECTED_TYPE","description","listMenuItemsArray","Object","keys","thisType","col","ListItem","Button","fullWidth","size","border","onClick","typeProps","thisTypeName","Math","random","Card","CardContent","Slider","valueLabelDisplay","defaultValue","onChange","e","val","onChangeCommitted","min","max","marks","JSON","stringify","List","createTypesIcons","LayersMenu","cityIOkeys","menuItem","isOn","slider","setLayersMenuState","sliderVal","setSliderVal","toggleListArr","Grid","container","includes","item","xs","FormControlLabel","control","Checkbox","checked","target","_","updateSliderVal","makeLayerControlsMenu","ViewSettingsMenu","setViewSettingsMenuState","useLayoutEffect","buttonsArr","thisButton","VIEW_CONTROL_BUTTONS","handleButtonClicks","ButtonGroup","createViewControlButtons","menuItemList","hasSlider","createCheckboxes","ScenariosMenu","scenariosButtonsList","setScenariosButtonsList","dialogOpenState","setDialogOpenState","scenarioToRestore","setScenariosToRestore","handleClose","handleRestoreThisState","hash","finally","createScenariosButtons","scenarios","scenario","i","Tooltip","arrow","placement","title","handleOpenDialog","substring","IconButton","tempArr","scnToDelete","filter","handleDeleteThisState","fontSize","scenariosButtons","flexGrow","Badge","badgeContent","length","newScenario","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","maxDrawerWidth","document","documentElement","clientWidth","innerWidth","ResizableDrawer","children","direction","defaultDrawerWidth","floor","drawerWidth","setDrawerWidth","handleMouseUp","removeEventListener","handleMouseMove","useCallback","newWidth","body","offsetLeft","offsetWidth","clientX","onMouseDown","addEventListener","padding","dividerWidth","left","undefined","right","cursor","backgroundColor","Drawer","anchor","ModalProps","keepMounted","PaperProps","display","flexDirection","EditMenu","EDIT_BUTTON","editMenu","setEditMenu","endIcon","event","currentTarget","TableInfo","gutterBottom","TUIhandler","tuiMenuControl","tui","menuState","MenuContainer","menuItemsArray","MenuItems","PaintBrush","mousePos","hoveredCells","isInteractiveCell","object","divSize","colorTrans","mouseX","mouseY","clientY","msg","mouseDown","borderColor","borderRadius","pointerEvents","top","fontFamily","CellMeta","hoveredObj","PaintBrushContainer","editOn","pickingRadius","BrushSelector","AccessLayer","opacity","accessData","access","HeatmapLayer","colorRange","intensity","threshold","getPosition","d","geometry","coordinates","getWeight","updateTriggers","AggregatedTripsLayer","ABMmode","ABM2","PathLayer","shadowEnabled","trips","getPath","path","getColor","attr","mode","getWidth","transitions","ABMLayer","zoomLevel","time","TripsLayer","getTimestamps","timestamps","widthScale","trailLength","currentTime","handleGridCellEditing","setSelectedCellsState","deckGLRef","multiSelectedObj","dim","y","current","pickObjects","multipleObjPicked","selected","thisCellProps","processGridData","newGEOGRID","GridLayer","keyDownState","selectedCellsState","updaters","setDraggingWhileEditing","setHoveredObj","deckGLref","GeoJsonLayer","pickable","extruded","wireframe","lineWidthScale","lineWidthMinPixels","getElevation","getFillColor","onDrag","onDragStart","onHover","onDragEnd","TextualLayer","text","textLayerData","infoIteam","info","TextLayer","getText","getSize","getAngle","getTextAnchor","getAlignmentBaseline","GeojsonLayer","geojson","stroked","filled","fill","getLineColor","stroke","MeshLayer","SimpleMeshLayer","loaders","OBJLoader","mesh","pntArr","first","last","getOrientation","ceil","getScale","DeckGLMap","draggingWhileEditing","viewState","setViewState","setKeyDownState","setMousePos","setMouseDown","setGEOGRIDDATA","useRef","editModeToggle","layersMenu","viewControlButton","toggleEffects","animationTime","setAnimationTime","animation","animate","t","requestAnimationFrame","cancelAnimationFrame","effects","setEffects","ambientLight","AmbientLight","dirLight","SunLight","timestamp","Date","UTC","_shadow","lightingEffect","LightingEffect","shadowColor","setViewStateToTableHeader","lastCell","firstCell","midGrid","orthographic","getElementById","evt","preventDefault","dataProps","layersKey","AGGREGATED_TRIPS","GRID","ACCESS","TEXTUAL","GEOJSON","MESH","layerOrder","onKeyDown","nativeEvent","key","onKeyUp","onMouseMove","onMouseUp","ref","onViewStateChange","layerNameString","renderDeckLayers","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","asyncRender","reuseMaps","mapboxApiAccessToken","process","preventStyleDiffing","scales","r","angleLines","grid","circular","pointLabels","ticks","optionsNoData","noData","labels","datasets","borderWidth","RadarChart","ChartJS","register","RadialLinearScale","PointElement","LineElement","Filler","Legend","radarData","setRadarData","indicators","viz_type","ref_value","createRadarData","CategoryScale","LinearScale","BarElement","Title","responsive","BarChart","barChartData","setBarChartData","createBarChartData","AreaCalc","chartData","setChartData","ArcElement","geoGridData","gridCellData","typeName","createChartData","VisContainer","margin","spacing","xl","CityScopeJS","typography","fontWeightLight","fontWeightRegular","fontWeightMedium","h1","fontWeight","letterSpacing","h2","h3","h4","h5","h6","overline","theme","createTheme","palette","primary","main","light","secondary","shape","overrides","MuiOutlinedInput","notchedOutline","TableListLoading","progress","setProgress","BorderLinearProgress","styled","setInterval","oldProgress","diff","clearInterval","CityIOlist","getTablesList","tablesList","setTableList","isLoading","setIsLoading","fetchCityIOtables","cityIOlistURL","tablesArr","requestArr","oldArray","tableURL","tableHeader","toString","SelectedTable","selectedTable","clicked","cityscopeJSendpoint","projectionEndpoint","setOpen","component","Link","href","toLowerCase","SearchTablesList","setSelectedTable","defaultProps","getOptionLabel","option","Autocomplete","disablePortal","renderInput","params","TextField","newValue","CityIOdeckGLmap","markerInfo","setMarkerInfo","setClicked","setZoom","INIT_VIEW","zHeight","viewport","setViewport","setInitialViewState","isHovering","markersArr","table","coord","from","to","TileLayer","minZoom","tileSize","renderSubLayers","tile","bbox","west","south","east","north","BitmapLayer","image","_imageCoordinateSystem","COORDINATE_SYSTEM","CARTESIAN","bounds","LineLayer","getSourcePosition","getTargetPosition","getPixelOffset","IconLayer","iconAtlas","icon","transitionDuration","transitionInterpolator","FlyToInterpolator","iconMapping","marker","mask","getIcon","sizeScale","views","GlobeView","Boolean","getCursor","isDragging","onViewportChange","ContextProvider","_MapContext","Provider","CityIOviewer","lg","ProjectionDeckMap","editMode","localStorage","getItem","vs","setTime","layersArray","fadeTrail","setItem","halfAnchor","styles","AnchorComponent","vector","translation","onMouseEnter","className","transform","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","a","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","Keystoner","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","setState","onAnchorMouseUp","isEditMode","newVector","this","getBoundingClientRect","ls","prevProps","prevState","anchorStyle","anchorClassName","React","DeleteLocalStorage","alignItems","justify","startIcon","Keystone","setEditMode","removeItem","reload","overflow","ProjectionMapping","SelectionTarget","editorMenuSlice","editorMapCenter","gridMaker","gridProps","typesEditorState","updateEditorMapCenter","updateGridProps","updateGridMaker","updateTypesEditorState","EditorMap","setGrid","editorMenuState","selectedRow","createdGrid","pickedCellsState","latCenter","lonCenter","pickedObject","feature","visible","cellInfo","rightButton","CenterMapButton","parseFloat","mapCenter","GridProps","formValues","setFormValues","handleFormUpdates","Stack","InputProps","inputProps","helperText","deg_to_rad","deg","PI","rad_to_deg","rad","randomProperty","GridMakerMenu","loading","setLoading","tableData","handleGridCreation","top_left_lon","top_left_lat","userPrj","cell_size","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","rndType","geojsonPolygon","polygon_xy","polygon_ll","v","ll","gridCreator","LoadingButton","resolve","loadingPosition","tableInitialState","columns","field","lookup","No","Web","TUI","LandUseTypesList","typesArray","createTypesArray","TypesEditorMenu","tableState","setTableState","setSelectedRow","rowColor","setRowColor","paging","selection","rowStyle","rowData","onRowClick","row","editable","onRowAdd","newData","onRowUpdate","oldData","CommitGridMenu","reqResponse","setReqResponse","generatedGrid","generatedGridBool","postGridToCityIO","DATA","GEOGRIDStructure","geoJsonFeatures","GEOGRIDObject","struct","newTypesList","oldType","element","makeGEOGRIDobject","GEOGRIDDATAObject","GEOGRIDDATA_object","makeGEOGRIDDATAobject","table_url","new_table_grid","reqResponseUI","EditorMenu","GridEditor","App","setTableName","viewSelectorState","setViewSelectorState","selectView","view","parsed","values","ThemeProvider","CssBaseline","animationSlice","updateAnimationTimeState","combineReducers","cityIOdataSliceReducer","menuSliceReducer","editorMenuSliceReducer","animationState","animationSliceReducer","store","configureStore","reducer","rootReducer","ReactDOM","render"],"mappings":"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","file":"static/js/main.8063297e.chunk.js","sourcesContent":["// import { cityIOModeBool } from \"../utils/utils\";\nimport queryString from \"query-string\";\n\nconst getServerLocation = () => {\n  const location = window.location;\n  const parsed = queryString.parse(location.search);\n\n  const serverLocation =\n    \"local\" in parsed\n      ? \"http://127.0.0.1:5000/api/\"\n      : \"https://cityio.media.mit.edu/api/\";\n  console.log(\"cityIO server location: \", serverLocation);\n  return serverLocation;\n};\n// get the location of the app (local or remote)\nconst getCSJSLocation = () => {\n  const location = window.location;\n  const parsed = queryString.parse(location.search);\n  const csjsLocation =\n    \"local\" in parsed\n      ? \"http://localhost:3000/CS_cityscopeJS/\"\n      : \"https://cityscope.media.mit.edu/CS_cityscopeJS/\";\n  console.log(\"cityScopeJS location: \", csjsLocation);\n  return csjsLocation;\n};\n\nexport const generalSettings = {\n  csjsURL: getCSJSLocation(),\n};\n\nexport const cityIOSettings = {\n  docsURL:\n    \"https://raw.githubusercontent.com/CityScope/CS_cityscopeJS/master/docs/\",\n  cityIO: {\n    baseURL: getServerLocation(),\n\n    ListOfTables: \"tables/list/\",\n    interval: 500,\n    cityIOmodules: [\n      { name: \"header\", expectUpdate: false },\n      { name: \"GEOGRID\", expectUpdate: false },\n      { name: \"ABM2\", expectUpdate: true },\n      { name: \"geojson\", expectUpdate: true },\n      { name: \"grid\", expectUpdate: false },\n      { name: \"access\", expectUpdate: true },\n      { name: \"GEOGRIDDATA\", expectUpdate: false },\n      { name: \"indicators\", expectUpdate: true },\n      { name: \"textual\", expectUpdate: true },\n      { name: \"scenarios\", expectUpdate: true },\n      { name: \"tui\", expectUpdate: true },\n    ],\n  },\n};\nexport const mapSettings = {\n  map: {\n    mapStyle: {\n      sat: \"mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd?fresh=true\",\n      blue: \"mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq?fresh=true\",\n    },\n    layers: {\n      ABM: {\n        endTime: 86400,\n        startTime: 43200,\n        animationSpeed: 10,\n      },\n    },\n    initialViewState: {\n      maxZoom: 22,\n      zoom: 15,\n      pitch: 0,\n      bearing: 0,\n    },\n  },\n};\n\nexport const expectedLayers = {\n  GRID_LAYER_CHECKBOX: {\n    displayName: \"CS Grid\",\n    cityIOmoduleName: \"GEOGRID\",\n    initState: true,\n    initSliderValue: 50,\n  },\n  ABM_LAYER_CHECKBOX: {\n    displayName: \"Animated Trips\",\n    cityIOmoduleName: \"ABM2\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  AGGREGATED_TRIPS_LAYER_CHECKBOX: {\n    displayName: \"Aggregated Trips\",\n    cityIOmoduleName: \"ABM2\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  ACCESS_LAYER_CHECKBOX: {\n    displayName: \"Heatmap\",\n    cityIOmoduleName: \"access\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  TEXTUAL_LAYER_CHECKBOX: {\n    displayName: \"Text\",\n    cityIOmoduleName: \"text\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  GEOJSON_LAYER_CHECKBOX: {\n    displayName: \"GeoJson\",\n    cityIOmoduleName: \"geojson\",\n    initState: false,\n    initSliderValue: 50,\n  },\n  MESH_LAYER_CHECKBOX: {\n    displayName: \"Mesh <beta>\",\n    cityIOmoduleName: \"GEOGRID\",\n    initState: false,\n    initSliderValue: 100,\n  },\n};\n\nexport const viewControlCheckboxes = {\n  ROTATE_CHECKBOX: {\n    displayName: \"Rotate Camera\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  EFFECTS_CHECKBOX: {\n    displayName: \"Toggle Effects\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  ANIMATION_CHECKBOX: {\n    displayName: \"Toggle Animation\",\n    initState: false,\n    initSliderValue: 100,\n  },\n};\n\nexport const viewControlButtons = {\n  RESET_VIEW_BUTTON: {\n    displayName: \"Reset View\",\n    initState: false,\n  },\n  ORTHO_VIEW_BUTTON: {\n    displayName: \"Ortho View\",\n    initState: false,\n  },\n  NORTH_VIEW_BUTTON: {\n    displayName: \"North View\",\n    initState: false,\n  },\n};\n\nexport const GridEditorSettings = {\n  map: {\n    mapStyle: {\n      sat: \"mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd?fresh=true\",\n      dark: \"mapbox://styles/relnox/cjl58dpkq2jjp2rmzyrdvfsds?fresh=true\",\n      blue: \"mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq?fresh=true\",\n    },\n  },\n\n  GEOGRIDDATA: {\n    color: [0, 0, 0],\n    height: 0,\n    id: 0,\n    interactive: \"Web\",\n    name: \"name\",\n  },\n\n  GEOGRID: {\n    features: [],\n    properties: {\n      header: {\n        tableName: \"test\",\n        cellSize: 50,\n        latitude: 42.3664655,\n        longitude: -71.0854323,\n        tz: -5,\n        ncols: 20,\n        nrows: 20,\n        rotation: 0,\n        projection:\n          \"+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000 +y_0=750000 +ellps=GRS80 +datum=NAD83 +units=m +no_def\",\n      },\n\n      types: {\n        Office: {\n          LBCS: [\n            {\n              proportion: 1,\n              use: {\n                \"2310\": 1,\n              },\n            },\n          ],\n          NAICS: [\n            {\n              proportion: 1,\n              use: {\n                \"5400\": 1,\n              },\n            },\n          ],\n          interactive: \"Web\",\n          color: \"#FF5277\",\n          height: 10,\n          sqm_pperson: 20,\n        },\n        Park: {\n          LBCS: [\n            {\n              proportion: 1,\n              use: {\n                \"7240\": 1,\n              },\n            },\n          ],\n          NAICS: null,\n          interactive: \"Web\",\n          color: \"#38C9FF\",\n          sqm_pperson: 1,\n        },\n        Residential: {\n          LBCS: [\n            {\n              proportion: 1,\n              use: {\n                \"1100\": 1,\n              },\n            },\n          ],\n          NAICS: null,\n          interactive: \"Web\",\n          color: \"#FFFF33\",\n          height: 4,\n          sqm_pperson: 90,\n        },\n      },\n    },\n    type: \"FeatureCollection\",\n  },\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const cityIOdataSlice = createSlice({\n  name: \"cityIOdataState\",\n  initialState: {},\n  cityIOisDone: false,\n  cityIOtableName: \"\",\n  reducers: {\n    updateCityIOdata: (state, action) => {\n      state.cityIOdata = action.payload;\n    },\n    toggleCityIOisDone: (state, action) => {\n      state.cityIOisDone = action.payload;\n    },\n    updateCityIOtableName: (state, action) => {\n      state.cityIOtableName = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateCityIOdata,\n  toggleCityIOisDone,\n  updateCityIOtableName,\n} = cityIOdataSlice.actions;\nexport default cityIOdataSlice.reducer;\n","import axios from \"axios\";\nimport {cityIOSettings} from \"../settings/settings\";\n\n/**\n * Get API call using axios\n */\n\nexport const getAPICall = async (URL) => {\n  try {\n    const response = await axios.get(URL);\n    return response.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n/**\n * convert rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n  function valToHex(c) {\n    var hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n  }\n  return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n\n\n\n/**\n * convert hex to rgb array\n */\nexport function hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n      ]\n    : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n  let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n  return isHex;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const postToCityIO = (data, tableName, endPoint) => {\n  let postURL = cityIOSettings.cityIO.baseURL + \"table/\" + tableName + endPoint;\n\n  const options = {\n    method: \"post\",\n    url: postURL,\n    data: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n  axios(options)\n    .then((res) => {\n      if (res.data.status === \"ok\") {\n        console.log(`--> cityIO endpoint ${postURL} was updated <--`);\n      }\n    })\n    .catch((error) => {\n      console.log(\"ERROR:\", error);\n    });\n};\n\nconst cityIObaseURL = cityIOSettings.cityIO.baseURL;\n\nexport const fetchJSON = async (url, options) => {\n  const response = await fetch(url, options);\n  const data = await response.json();\n  return data;\n};\n\nexport const getTablePrevCommitHash = async (id) =>\n  await fetchJSON(`${cityIObaseURL}commit/${id}/`).then((c) => {\n    return { parent: c.parent, meta: c };\n  });\n\nexport const getTableID = async (tableName) =>\n  await fetchJSON(\n    `${cityIObaseURL}table/${tableName}/meta/hashes/GEOGRIDDATA/`\n  );\n\nexport const getCommit = async (id) =>\n  await fetchJSON(`${cityIObaseURL}commit/${id}/`);\n\nexport const getModule = async (id) =>\n  await fetchJSON(`${cityIObaseURL}module/${id}/`);\n","import { Typography, Box } from \"@mui/material\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nconst LoadingModules = (props) => {\n  const { loadingModules } = props;\n  return (\n    <>\n      {loadingModules.map((module, index) => {\n        return (\n       \n            <Box\n              key={\"box_\"+module}\n              sx={{\n                position: \"fixed\",\n                bottom: (index + 1) * 10,\n                width: \"100%\",\n                zIndex: 10000,\n              }}\n            >\n              <LinearProgress color={\"secondary\"} />\n              <Typography\n                variant=\"caption\"\n                color=\"primary\"\n                style={{ marginRight: \"1vw\" }}\n              >\n                Loading {module}\n              </Typography>\n            </Box>\n       \n        );\n      })}\n    </>\n  );\n};\n\nexport default LoadingModules;\n","import { useEffect, useState } from \"react\";\nimport { cityIOSettings } from \"../../settings/settings\";\nimport {\n  updateCityIOdata,\n  toggleCityIOisDone,\n} from \"../../redux/reducers/cityIOdataSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getAPICall } from \"../../utils/utils\";\nimport LoadingModules from \"../../Components/LoadingModules\";\n\nconst removeElement = (array, elem) => {\n  var index = array.indexOf(elem);\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n  return array;\n};\n\nconst CityIO = (props) => {\n  const settings = cityIOSettings;\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const { tableName } = props;\n\n  const [mainHash, setMainHash] = useState(null);\n  const [hashes, setHashes] = useState({});\n  const [listLoadingModules, setListLoadingModules] = useState([]);\n  const cityioURL = `${settings.cityIO.baseURL}table/${tableName}/`;\n\n  /**\n   * start fetching API hashes to check for new data\n   */\n  useEffect(() => {\n    const timer = setTimeout(getCityIOmetaHash, settings.cityIO.interval);\n    console.log(\"reading cityIO every \" + settings.cityIO.interval + \"ms\");\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * gets the main hash of this cityIO table\n   * on a constant loop to check for updates\n   */\n  async function getCityIOmetaHash() {\n    // recursively get hashes\n    const newMainHash = await getAPICall(cityioURL + \"meta/id/\");\n    // is it a new hash?\n    if (mainHash !== newMainHash) {\n      setMainHash(newMainHash);\n    }\n    // do it forever\n    setTimeout(getCityIOmetaHash, settings.cityIO.interval);\n  }\n\n  useEffect(() => {\n    //! only update if hashId changes\n    if (!mainHash) {\n      return;\n    }\n    // if we have a new hash, start getting submodules\n    getModules();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mainHash]);\n\n  async function getModules() {\n    console.log(\"--- starting update ---\");\n    // wait to get all of this table's hashes\n    const newHashes = await getAPICall(cityioURL + \"meta/hashes/\");\n    // init array of GET promises\n    const promises = [];\n    // init array of modules names\n    const loadingModules = [];\n    // get an array of modules to update\n    const modulesToUpdate = settings.cityIO.cityIOmodules.map((x) => x.name);\n    // for each of the modules in settings, add api call to promises\n    modulesToUpdate.forEach((module) => {\n      // if this module has an old hash\n      // we assume it is about to be updated\n      if (hashes[module] !== newHashes[module]) {\n        // add this module URL to an array of GET requests\n        promises.push(getAPICall(`${cityioURL}${module}/`));\n        // and also add this module name to array\n        // of modules that we await for\n        loadingModules.push(module);\n      } else {\n        promises.push(null);\n      }\n      setListLoadingModules(loadingModules);\n    });\n\n    // GET all modules data\n    const modulesFromCityIO = await Promise.all(promises);\n    setHashes(newHashes);\n\n    // update cityio object with modules data\n    let modulesData = modulesToUpdate.reduce((obj, moduleName, index) => {\n      // if this module has data\n      if (modulesFromCityIO[index]) {\n        setListLoadingModules(removeElement(listLoadingModules, moduleName));\n\n        return { ...obj, [moduleName]: modulesFromCityIO[index] };\n      } else {\n        return obj;\n      }\n    }, cityIOdata);\n    let m = { ...modulesData, tableName: tableName };\n    dispatch(updateCityIOdata(m));\n    console.log(\"--- done updating from cityIO ---\");\n    dispatch(toggleCityIOisDone(true));\n  }\n\n  return <LoadingModules loadingModules={listLoadingModules} />;\n};\n\nexport default CityIO;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const menuSlice = createSlice({\n  name: \"menuState\",\n  initialState: {\n    editMenuState: {},\n    typesMenuState: {},\n    layersMenuState: {},\n    viewSettingsMenuState: {},\n    animationMenuState: {\n      toggleAnimationState: false,\n      animationSpeedSliderValue: 10,\n    },\n  },\n  reducers: {\n    updateLayersMenuState: (state, action) => {\n      state.layersMenuState = action.payload;\n    },\n\n    updateTypesMenuState: (state, action) => {\n      state.typesMenuState = action.payload;\n    },\n\n    updateEditMenuState: (state, action) => {\n      state.editMenuState = action.payload;\n    },\n\n    updateViewSettingsMenuState: (state, action) => {\n      state.viewSettingsMenuState = action.payload;\n    },\n\n    updateAnimationMenuState: (state, action) => {\n      state.animationMenuState = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateLayersMenuState,\n  updateTypesMenuState,\n  updateEditMenuState,\n  updateViewSettingsMenuState,\n  updateAnimationMenuState,\n} = menuSlice.actions;\nexport default menuSlice.reducer;\n","import { useEffect, useState } from \"react\";\nimport {\n  Slider,\n  Card,\n  Typography,\n  ListItem,\n  CardContent,\n  Button,\n  List,\n} from \"@mui/material\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateTypesMenuState } from \"../../../../redux/reducers/menuSlice\";\n\nexport default function TypesListMenu() {\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const typesList = cityIOdata.GEOGRID.properties.types;\n  const [selectedType, setSelectedType] = useState(null);\n\n  const [typeHeight, setTypeHeight] = useState(0);\n  const heightSliderMarks = [\n    { value: 0, label: \"min\" },\n    { value: 100, label: \"max\" },\n  ];\n\n  const handleListItemClick = (typeProps, thisTypeName) => {\n    typeProps = { ...typeProps, thisTypeName: thisTypeName };\n    if (typeHeight && typeProps.height) {\n      typeProps = { ...typeProps, height: typeHeight };\n    }\n    setSelectedType(typeProps);\n  };\n\n  useEffect(() => {\n    dispatch(\n      updateTypesMenuState({\n        SELECTED_TYPE: selectedType,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedType]);\n\n  // get the LBCS/NAICS types info\n  const LBCS = selectedType && selectedType.LBCS;\n  const NAICS = selectedType && selectedType.NAICS;\n  // get type description text if exist\n  let description =\n    selectedType && selectedType.description ? selectedType.description : null;\n\n  // create the types themselves\n  const createTypesIcons = (typesList) => {\n    let listMenuItemsArray = [];\n    Object.keys(typesList).forEach((thisType, index) => {\n      // get color\n      let col = typesList[thisType].color;\n\n      if (typeof col !== \"string\") {\n        col =\n          \"rgb(\" +\n          typesList[thisType].color[0] +\n          \",\" +\n          typesList[thisType].color[1] +\n          \",\" +\n          typesList[thisType].color[2] +\n          \")\";\n      }\n      // check if this type has height prop\n      listMenuItemsArray.push(\n        <div key={`li_types_top_div_${index}`}>\n          <ListItem key={`li_menu_${index}`}>\n            <Button\n              fullWidth\n              size=\"small\"\n              key={Math.random()}\n              variant=\"outlined\"\n              sx={{\n                \"&.MuiButton-text\": { color: { col } },\n                border: \"solid 1px \" + col,\n              }}\n              onClick={() => handleListItemClick(typesList[thisType], thisType)}\n            >\n              <Typography color={col} variant=\"caption\">\n                {thisType}\n              </Typography>\n            </Button>\n          </ListItem>\n\n          {selectedType && selectedType.thisTypeName === thisType && (\n            <ListItem key={`li_types_card_${index}`}>\n              <Card  key={`li_types_card_${index}`} sx={{ width: \"100%\" }}>\n                <CardContent>\n                  {description && (\n                    <Typography variant=\"caption\">{description}</Typography>\n                  )}\n\n                  {selectedType && selectedType.height && (\n                    <div                       key={`li_types_div_${index}`}\n                    >\n                      <Typography>Set Height</Typography>\n\n                      <Slider\n                      key={`li_types_slider_${index}`}\n                        valueLabelDisplay=\"auto\"\n                        value={typeHeight}\n                        size=\"small\"\n                        defaultValue={0}\n                        onChange={(e, val) => setTypeHeight(val)}\n                        onChangeCommitted={() =>\n                          setSelectedType({\n                            ...selectedType,\n                            height: typeHeight,\n                          })\n                        }\n                        min={heightSliderMarks[0].value}\n                        max={heightSliderMarks[1].value}\n                        marks={heightSliderMarks}\n                      />\n                    </div>\n                  )}\n                  {LBCS && (\n                    <div>\n                      <Typography>LBCS</Typography>\n                      <Typography variant=\"caption\">\n                        {JSON.stringify(LBCS, null, \"\\t\")}\n                      </Typography>\n                    </div>\n                  )}\n                  {NAICS && (\n                    <div>\n                      <Typography>NAICS</Typography>\n                      <Typography variant=\"caption\">\n                        {JSON.stringify(NAICS, null, \"\\t\")}\n                      </Typography>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </ListItem>\n          )}\n        </div>\n      );\n    });\n    return <List>{listMenuItemsArray}</List>;\n  };\n\n  return <>{createTypesIcons(typesList)}</>\n}\n","import {\n  Slider,\n  Checkbox,\n  Typography,\n  FormControlLabel,\n  Grid,\n} from \"@mui/material\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { expectedLayers } from \"../../../../settings/settings\";\nimport { updateLayersMenuState } from \"../../../../redux/reducers/menuSlice\";\n\nfunction LayersMenu() {\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n\n  // get the keys from cityIOdata\n  const cityIOkeys = Object.keys(cityIOdata);\n\n  // initial layer menu state\n  let initState = {};\n  const [layersMenuState, setLayersMenuState] = useState(() => {\n    for (const menuItem in expectedLayers) {\n      initState[menuItem] = {\n        isOn: expectedLayers[menuItem].initState,\n        slider: expectedLayers[menuItem].initSliderValue,\n      };\n    }\n    return initState;\n  });\n\n  useEffect(() => {\n    dispatch(updateLayersMenuState(layersMenuState));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [layersMenuState]);\n\n  // update the layer slider value\n  const [sliderVal, setSliderVal] = useState({});\n  const updateSliderVal = (menuItem, val) => {\n    setSliderVal({ ...sliderVal, [menuItem]: val });\n\n    setLayersMenuState({\n      ...layersMenuState,\n      [menuItem]: {\n        ...layersMenuState[menuItem],\n        slider: val,\n      },\n    });\n  };\n\n  const toggleListArr = [];\n  const makeLayerControlsMenu = () => {\n    // loop through the keys in cityIOdata and make a list of keys\n    for (const menuItem in expectedLayers) {\n      const moduleName = expectedLayers[menuItem].cityIOmoduleName;\n      // if the module name is in the data for this CS instance, make a checkbox\n      if (cityIOkeys.includes(moduleName)) {\n        toggleListArr.push(\n          <Grid container key={`grid_con_` + menuItem}>\n            <Grid item xs={4} key={`grid_i_1_` + menuItem}>\n              <FormControlLabel\n                key={\"formControl_\" + menuItem}\n                control={\n                  <Checkbox\n                    checked={\n                      layersMenuState[menuItem] &&\n                      layersMenuState[menuItem].isOn\n                    }\n                    key={\"checkbox_\" + menuItem}\n                    color=\"primary\"\n                    onChange={(e) => {\n                      setLayersMenuState({\n                        ...layersMenuState,\n                        [menuItem]: {\n                          ...layersMenuState[menuItem],\n                          isOn: e.target.checked,\n                        },\n                      });\n                    }}\n                  />\n                }\n                label={\n                  <Typography variant=\"caption\" key={\"label_\" + menuItem}>\n                    {expectedLayers[menuItem].displayName}\n                  </Typography>\n                }\n              />\n            </Grid>\n            {layersMenuState[menuItem] && layersMenuState[menuItem].isOn && (\n              <Grid item xs={8} key={`grid_i_2_` + menuItem}>\n                <Slider\n                  size=\"small\"\n                  key={\"slider_\" + menuItem}\n                  valueLabelDisplay=\"auto\"\n                  onChangeCommitted={(_, val) => updateSliderVal(menuItem, val)}\n                />\n              </Grid>\n            )}\n          </Grid>\n        );\n      }\n    }\n    return toggleListArr;\n  };\n\n  return <Grid container>{makeLayerControlsMenu()}</Grid>;\n}\n\nexport default LayersMenu;\n","import { useLayoutEffect, useState } from \"react\";\nimport {\n  ButtonGroup,\n  Button,\n  Typography,\n  Slider,\n  Checkbox,\n  List,\n  ListItem,\n} from \"@mui/material\";\nimport {\n  viewControlCheckboxes,\n  viewControlButtons,\n} from \"../../../../settings/settings\";\nimport { updateViewSettingsMenuState } from \"../../../../redux/reducers/menuSlice\";\nimport { useDispatch } from \"react-redux\";\n\nfunction ViewSettingsMenu() {\n  const dispatch = useDispatch();\n\n  const [viewSettingsMenuState, setViewSettingsMenuState] = useState(() => {\n    let initState = {};\n    for (const menuItem in viewControlCheckboxes) {\n      initState[menuItem] = {\n        isOn: viewControlCheckboxes[menuItem].initState,\n        slider:\n          viewControlCheckboxes[menuItem].initSliderValue &&\n          viewControlCheckboxes[menuItem].initSliderValue,\n      };\n    }\n    return initState;\n  });\n\n  // return the menu state to parent component\n  useLayoutEffect(() => {\n    //  dispatch this menu state to the redux store\n    dispatch(updateViewSettingsMenuState(viewSettingsMenuState));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewSettingsMenuState]);\n\n  const [sliderVal, setSliderVal] = useState({});\n  const updateSliderVal = (menuItem, val) => {\n    setSliderVal({ ...sliderVal, [menuItem]: val });\n\n    setViewSettingsMenuState({\n      ...viewSettingsMenuState,\n      [menuItem]: {\n        ...viewSettingsMenuState[menuItem],\n        slider: val,\n      },\n    });\n  };\n\n  const handleButtonClicks = (thisButton) => {\n    setViewSettingsMenuState({\n      ...viewSettingsMenuState,\n      VIEW_CONTROL_BUTTONS: thisButton,\n    });\n  };\n\n  // create a button group for the view control buttons\n  const createViewControlButtons = (viewControlButtons) => {\n    const buttonsArr = [];\n    for (const thisButton in viewControlButtons) {\n      buttonsArr.push(\n        <Button\n          key={Math.random()}\n          size=\"small\"\n          onClick={() => handleButtonClicks(thisButton)}\n        >\n          {viewControlButtons[thisButton].displayName}\n        </Button>\n      );\n    }\n    return <ButtonGroup color=\"primary\">{buttonsArr}</ButtonGroup>;\n  };\n\n  const createCheckboxes = (menuItemList) => {\n    const toggleListArr = [];\n    for (const menuItem in menuItemList) {\n      // check if we add slider to this menuItem\n      const hasSlider = menuItemList[menuItem].initSliderValue;\n\n      toggleListArr.push(\n        <div key={\"viewSettingDiv_\" + menuItem}>\n          <ListItem key={\"viewSettingListItem_\" + menuItem}>\n            <Checkbox\n              key={\"viewSettingCheckBox_\" + menuItem}\n              checked={\n                viewSettingsMenuState[menuItem] &&\n                viewSettingsMenuState[menuItem].isOn\n              }\n              name={menuItem}\n              onChange={(e) =>\n                setViewSettingsMenuState({\n                  ...viewSettingsMenuState,\n                  [menuItem]: {\n                    ...viewSettingsMenuState[menuItem],\n                    isOn: e.target.checked,\n                  },\n                })\n              }\n            />\n\n            <Typography\n              variant={\"caption\"}\n              key={\"viewSettingCaption_\" + menuItem}\n            >\n              {menuItemList[menuItem].displayName}\n            </Typography>\n          </ListItem>\n          {hasSlider &&\n            viewSettingsMenuState[menuItem] &&\n            viewSettingsMenuState[menuItem].isOn && (\n              <ListItem key={\"viewSettingListItemSlider_\" + menuItem}>\n                <Slider\n                  size=\"small\"\n                  key={\"viewSettingSlider_\" + menuItem}\n                  valueLabelDisplay=\"auto\"\n                  onChangeCommitted={(_, val) => updateSliderVal(menuItem, val)}\n                />\n              </ListItem>\n            )}\n        </div>\n      );\n    }\n    return toggleListArr;\n  };\n\n  return (\n    <List>\n      {createViewControlButtons(viewControlButtons)}\n      {createCheckboxes(viewControlCheckboxes)}\n    </List>\n  );\n}\n\nexport default ViewSettingsMenu;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Typography,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  ListItem,\n  Button,\n  List,\n  Dialog,\n  IconButton,\n  Tooltip,\n  Badge,\n  Grid,\n} from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { postToCityIO, getModule, getTableID } from \"../../../../utils/utils\";\n\nexport default function ScenariosMenu() {\n  const [scenariosButtonsList, setScenariosButtonsList] = useState([]);\n  const [dialogOpenState, setDialogOpenState] = useState(false);\n  const [scenarioToRestore, setScenariosToRestore] = useState();\n  // get cityIO data from redux store\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  // get cityio name from redux store\n  const cityIOtableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  const handleSaveThisState = () => {\n    getTableID(cityIOtableName).then((id) => {\n      const newScenario = {\n        // ! to be updated from dynamic ui element\n        name: `${id}`,\n        hash: id,\n        description: `this is ${id} description`,\n      };\n      const tempArr = cityIOdata.scenarios ? [...cityIOdata.scenarios] : [];\n      tempArr.push(newScenario);\n      postToCityIO(tempArr, cityIOtableName, `/scenarios/`);\n    });\n  };\n\n  const handleClose = () => {\n    setDialogOpenState(false);\n  };\n\n  const handleOpenDialog = (scenario) => {\n    // store to state the scenario to be restored\n    setScenariosToRestore(scenario);\n    // open dialog\n    setDialogOpenState(true);\n  };\n\n  const handleRestoreThisState = async () => {\n    if (!scenarioToRestore) return;\n    await getModule(scenarioToRestore.hash)\n      .then((module) => {\n        postToCityIO(module, cityIOtableName, `/GEOGRIDDATA/`);\n      })\n      .finally(() => {\n        handleClose();\n      });\n  };\n\n  const handleDeleteThisState = (scenario) => {\n    // copy the scenarios array\n    const tempArr = [...cityIOdata.scenarios];\n    // find the clicked scenario in the array\n    var scnToDelete = tempArr.filter((obj) => {\n      return obj.hash === scenario.hash;\n    });\n    // find the index of the scenario to delete\n    var index = tempArr.indexOf(scnToDelete[0]);\n    if (index !== -1) {\n      // remove the scenario from the array\n      tempArr.splice(index, 1);\n    }\n    // post the new array to the server\n    postToCityIO(tempArr, cityIOtableName, `/scenarios/`);\n  };\n\n  const createScenariosButtons = () => {\n    const scenariosButtons = cityIOdata.scenarios.map((scenario, i) => {\n      return (\n        <ListItem key={`scenario_grid_item_${i}`}>\n          <Tooltip\n            key={\"scenario_tt_\" + i}\n            arrow\n            placement=\"right\"\n            title={scenario.description || `No description`}\n          >\n            <Button\n              key={\"scenario_button_\" + i}\n              fullWidth\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={() => handleOpenDialog(scenario)}\n            >\n              <Typography variant=\"caption\">\n                {scenario.name.substring(0, 12) + `...`}\n              </Typography>\n            </Button>\n          </Tooltip>\n\n          <IconButton\n            key={\"scenario_ib_\" + i}\n            onClick={(e) => {\n              handleDeleteThisState(scenario);\n            }}\n            aria-label=\"delete\"\n            size=\"small\"\n          >\n            <DeleteIcon\n              color=\"primary\"\n              key={\"scenario_delicon_\" + i}\n              fontSize=\"inherit\"\n            />\n          </IconButton>\n        </ListItem>\n      );\n    });\n    return scenariosButtons;\n  };\n\n  useEffect(() => {\n    // check if there are any scenarios in the cityIOdata\n    if (!cityIOdata.scenarios) return;\n    const scenariosButtons = createScenariosButtons();\n    setScenariosButtonsList(scenariosButtons);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  return (\n    <Grid sx={{ flexGrow: 1 }} container >\n      <Badge\n        sx={{ width: \"100%\" }}\n        badgeContent={\n          (cityIOdata.scenarios && cityIOdata.scenarios.length) || 0\n        }\n        color=\"primary\"\n      >\n        <Button\n          fullWidth={true}\n          key={\"save_state_button\"}\n          variant=\"outlined\"\n          onClick={handleSaveThisState}\n        >\n          <Typography >Save This Scenario</Typography>\n        </Button>\n      </Badge>\n\n      <List>{scenariosButtonsList}</List>\n\n      <Dialog open={dialogOpenState} onClose={handleClose}>\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Revert to saved scenario?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            You can revert to this saved scenario by clicking the button below.\n            Reverting will delete all changes made since the last commit.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleRestoreThisState} autoFocus>\n            Revert\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Grid>\n  );\n}\n","import { useState, useCallback } from \"react\";\nimport { Drawer, Box } from \"@mui/material\";\n\nconst dividerWidth = 5;\nconst maxDrawerWidth =\n  Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0) -\n  1;\n\n \nconst minDrawerWidth = 50;\n\nexport default function ResizableDrawer({ children, direction, width }) {\n  const defaultDrawerWidth = Math.floor(maxDrawerWidth / 4);\n  const [drawerWidth, setDrawerWidth] = useState(width || defaultDrawerWidth);\n\n  const handleMouseDown = (e) => {\n    document.addEventListener(\"mouseup\", handleMouseUp, true);\n    document.addEventListener(\"mousemove\", handleMouseMove, true);\n  };\n\n  const handleMouseUp = () => {\n    document.removeEventListener(\"mouseup\", handleMouseUp, true);\n    document.removeEventListener(\"mousemove\", handleMouseMove, true);\n  };\n\n  const handleMouseMove = useCallback((e) => {\n    let newWidth = null;\n\n    if (direction === \"right\") {\n      newWidth =\n        document.body.offsetLeft + document.body.offsetWidth - e.clientX + 20;\n    } else {\n      newWidth = document.body.offsetLeft + e.clientX + 20;\n    }\n    if (newWidth > minDrawerWidth && newWidth < maxDrawerWidth) {\n      setDrawerWidth(newWidth);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <Box\n        onMouseDown={(e) => handleMouseDown(e)}\n        sx={{\n          width: `${dividerWidth}px`,\n          padding: dividerWidth + \"px 0 0\",\n          position: \"fixed\",\n          height: \"1000vh\",\n          left:\n            direction === \"left\"\n              ? drawerWidth + \"px\"\n              : undefined,\n          right: direction === \"right\" ? drawerWidth + \"px\" : undefined,\n          zIndex: 1,\n          cursor: \"ew-resize\",\n          backgroundColor: \"gray\",\n        }}\n      />\n      <Drawer\n        anchor={direction}\n        open={true}\n        variant=\"persistent\"\n        ModalProps={{\n          keepMounted: true,\n        }}\n        PaperProps={{ style: { width: drawerWidth } }}\n        sx={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        {children}\n      </Drawer>\n    </>\n  );\n}\n","import { Button, Typography } from \"@mui/material\";\nimport { updateEditMenuState } from \"../../../../redux/reducers/menuSlice\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function EditMenu() {\n  const dispatch = useDispatch();\n  const [editMenu, setEditMenu] = useState({ EDIT_BUTTON: false });\n\n  // controls the menu state for the edit button\n  const handleEditButtonClicks = (event) => {\n    setEditMenu({\n      ...editMenu,\n      [event.currentTarget.id]: !editMenu[event.currentTarget.id],\n    });\n  };\n\n  useEffect(() => {\n    // dispatch the edit menu state to the redux store\n    dispatch(updateEditMenuState(editMenu));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editMenu]);\n\n  return (\n    <Button\n      fullWidth\n      id={\"EDIT_BUTTON\"}\n      variant=\"outlined\"\n      endIcon={editMenu.EDIT_BUTTON ? <CloudUploadIcon /> : <EditIcon />}\n      onClick={(e) => handleEditButtonClicks(e)}\n    >\n      <Typography>\n        {editMenu.EDIT_BUTTON ? \"submit edits\" : \"start editing\"}\n      </Typography>\n    </Button>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { Typography } from \"@mui/material\";\n\nfunction TableInfo() {\n  const cityIOtableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      <Typography gutterBottom>CityScope</Typography>\n      <Typography variant=\"h3\">{cityIOtableName}</Typography>\n    </>\n  );\n}\n\nexport default TableInfo;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { updateLayersMenuState } from \"../redux/reducers/menuSlice\";\n\n// description:\n//   - this component handles the TUI menu\n//   - it is a stateful redux component that updates the state of \n//     the layers menu when the TUI is updated\n\nconst TUIhandler = () => {\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const tuiMenuControl = cityIOdata.tui;\n  const menuState = useSelector((state) => state.menuState);\n  const layersMenuState = menuState.layersMenuState;\n\n  useEffect(\n    () => {\n      if (!tuiMenuControl) return;\n      for (const menuItem in tuiMenuControl) {\n        dispatch(\n          updateLayersMenuState({\n            ...layersMenuState,\n            [menuItem]: {\n              ...layersMenuState[menuItem],\n              isOn: tuiMenuControl[menuItem],\n            },\n          })\n        );\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [tuiMenuControl]\n  );\n\n  return <></>;\n};\n\nexport default TUIhandler;\n","import { List, ListItem, CardContent, Card } from \"@mui/material\";\nimport TypesMenu from \"./TypesMenu\";\nimport LayersMenu from \"./LayersMenu\";\nimport ViewSettingsMenu from \"./ViewSettingsMenu\";\nimport ScenariosMenu from \"./ScenariosMenu\";\nimport ResizableDrawer from \"../../../Components/ResizableDrawer\";\nimport EditMenu from \"./EditMenu\";\nimport TableInfo from \"./TableInfo\";\nimport TUIhandler from \"../../../Components/TUIhandler\";\n\nfunction MenuContainer() {\n  const menuItemsArray = [\n    <TableInfo />,\n    <EditMenu />,\n    <TypesMenu />,\n    <ScenariosMenu />,\n    <LayersMenu />,\n    <ViewSettingsMenu />,\n  ];\n\n  const MenuItems = () => {\n    const m = [];\n\n    menuItemsArray.forEach((item, index) => {\n      m.push(\n        <ListItem key={index}>\n          <Card variant=\"outlined\" sx={{ width: \"100%\" }}>\n            <CardContent>{item}</CardContent>\n          </Card>\n        </ListItem>\n      );\n    });\n    return m;\n  };\n\n  return (\n    <ResizableDrawer direction=\"left\" width={300}>\n      <TUIhandler />\n      <List>\n        <MenuItems />\n      </List>\n    </ResizableDrawer>\n  );\n}\n\nexport default MenuContainer;\n","import { testHex, hexToRgb } from \"../../../../../utils/utils\";\nimport ErrorOutlineIcon from \"@mui/icons-material/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \": Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 10,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n                fontFamily: \"Roboto Mono\",\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}\n            </div>\n        </div>\n    );\n};\n","import { Typography } from \"@mui/material\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n  if (!props.mousePos) return null;\n  const mousePos = props.mousePos;\n  const hoveredObj = props.hoveredObj;\n\n  return (\n    <div\n      style={{\n        borderRadius: \"10%\",\n        position: \"fixed\",\n        pointerEvents: \"none\",\n        backgroundColor: \"rgba(0,0,0,0.5)\",\n        padding: \"1vw\",\n        color: \"rgba(255,255,255,0.9)\",\n        zIndex: 10,\n        left: mousePos.clientX,\n        top: mousePos.clientY,\n        //\n      }}\n    >\n      <Typography>Type: {hoveredObj.object.properties.name}</Typography>\n      <Typography>Height: {hoveredObj.object.properties.height}</Typography>\n      <Typography>ID: {hoveredObj.object.properties.id}</Typography>\n    </div>\n  );\n};\n","import { PaintBrush } from \"./PaintBrush\";\nimport { CellMeta } from \"../CellMeta\";\n\nexport default function PaintBrushContainer({\n  editOn,\n  mousePos,\n  selectedType,\n  pickingRadius,\n  mouseDown,\n  hoveredObj,\n}) {\n  const BrushSelector = () => {\n    if (\n      editOn &&\n      selectedType &&\n      Object.keys(selectedType).length &&\n      hoveredObj\n    ) {\n      return (\n        <PaintBrush\n          mousePos={mousePos}\n          selectedType={selectedType}\n          divSize={pickingRadius}\n          mouseDown={mouseDown}\n          hoveredCells={hoveredObj}\n        />\n      );\n    } else if (hoveredObj) {\n      return <CellMeta mousePos={mousePos} hoveredObj={hoveredObj} />;\n    } else {\n      return null;\n    }\n  };\n  return <BrushSelector />;\n}\n","import { HeatmapLayer } from \"deck.gl\";\n\nexport default function AccessLayer({ data, opacity }) {\n  const accessData = data.access && data.access.features;\n  const colors = [\n    [233, 62, 58],\n    [237, 104, 60],\n    [243, 144, 63],\n    [253, 199, 12],\n    [255, 243, 59],\n  ];\n   return new HeatmapLayer({\n     id: \"ACCESS\",\n    colorRange: colors,\n    intensity:  opacity,\n    threshold: 0.5,\n    data: accessData && accessData,\n    getPosition: (d) => d.geometry.coordinates,\n    getWeight: (d) => d.properties[0],\n    updateTriggers: {\n      getWeight: [0],\n    },\n  });\n}\n","import { PathLayer } from \"@deck.gl/layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nexport default function AggregatedTripsLayer({ data, ABMmode, opacity }) {\n  if (data.ABM2) {\n    return new PathLayer({\n      id: \"AGGREGATED_TRIPS\",\n      shadowEnabled: false,\n      data: data.ABM2.trips,\n      getPath: (d) => d.path,\n      getColor: (d) => hexToRgb(data.ABM2.attr.mode[d.mode].color),\n\n      opacity,\n      getWidth: 5,\n\n      updateTriggers: {\n        getColor: ABMmode,\n      },\n      transitions: {\n        getColor: 500,\n      },\n    });\n  }\n}\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\n//  * remap line width\nconst _remapValues = (value) => {\n  let remap = value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n  return remap;\n};\n\nexport default function ABMLayer({ data, ABMmode, zoomLevel, time, opacity }) {\n  if (data.ABM2) {\n    return new TripsLayer({\n      opacity,\n      id: \"ABM\",\n      data: data.ABM2.trips,\n      getPath: (d) => d.path,\n      getTimestamps: (d) => d.timestamps,\n      getColor: (d) => hexToRgb(data.ABM2.attr.mode[d.mode].color),\n      shadowEnabled: false,\n      getWidth: 1,\n      widthScale: _remapValues(zoomLevel),\n      trailLength: 500,\n      currentTime: time,\n\n      updateTriggers: {\n        getColor: ABMmode,\n      },\n      transitions: {\n        getColor: 500,\n      },\n    });\n  }\n}\n","import { GeoJsonLayer } from \"deck.gl\";\nimport { hexToRgb, testHex } from \"../../../../utils/utils\";\n\n/**\n * Description. uses deck api to\n * collect objects in a region\n * @argument{object} e  picking event\n */\nexport const multipleObjPicked = (e, pickingRadius, deckGLRef) => {\n  const dim = pickingRadius;\n  const x = e.x - dim / 2;\n  const y = e.y - dim / 2;\n  let multipleObj = deckGLRef.current.pickObjects({\n    x: x,\n    y: y,\n    width: dim,\n    height: dim,\n  });\n  return multipleObj;\n};\n\n/**\n * Description. allow only to pick cells that are\n *  not of CityScope TUI & that are interactable\n * so to not overlap TUI activity\n */\nconst handleGridCellEditing = (\n  e,\n  selectedType,\n  setSelectedCellsState,\n  pickingRadius,\n  deckGLRef\n) => {\n  const { height, color, name } = selectedType;\n  const multiSelectedObj = multipleObjPicked(e, pickingRadius, deckGLRef);\n  multiSelectedObj.forEach((selected) => {\n    const thisCellProps = selected.object.properties;\n    if (thisCellProps && thisCellProps.interactive) {\n      thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n      thisCellProps.height = height;\n      thisCellProps.name = name;\n    }\n  });\n  setSelectedCellsState(multiSelectedObj);\n};\n\n/**\n * Description. gets `props` with geojson\n * and process the interactive area\n */\nexport const processGridData = (cityIOdata) => {\n  //  get the static grid\n  const GEOGRID = cityIOdata.GEOGRID;\n  // create a copy of the GEOGRID object\n  const newGEOGRID = JSON.parse(JSON.stringify(GEOGRID));\n\n  // if GEOGRRIDDATA exist and is the same length as our grid\n  if (\n    cityIOdata.GEOGRIDDATA &&\n    cityIOdata.GEOGRIDDATA.length === cityIOdata.GEOGRID.features.length\n  ) {\n    // get the grid data\n    const GEOGRIDDATA = cityIOdata.GEOGRIDDATA;\n    // update GEOGRID features from GEOGRIDDATA on cityio\n    for (let i = 0; i < GEOGRID.features.length; i++) {\n      newGEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n      // inject id with ES7 copy of the object\n      newGEOGRID.features[i].properties = {\n        ...newGEOGRID.features[i].properties,\n        id: i,\n      };\n    }\n  }\n  return newGEOGRID;\n};\n\nexport default function GridLayer({\n  data,\n  editOn,\n  state: {\n    selectedType,\n    keyDownState,\n    selectedCellsState,\n    pickingRadius,\n    opacity,\n  },\n  updaters: { setSelectedCellsState, setDraggingWhileEditing, setHoveredObj },\n  deckGLref,\n}) {\n  return new GeoJsonLayer({\n    opacity,\n    id: \"GRID\",\n    data,\n    pickable: true,\n    extruded: true,\n    wireframe: true,\n    lineWidthScale: 1,\n    lineWidthMinPixels: 2,\n    getElevation: (d) => d.properties.height,\n    getFillColor: (d) => d.properties.color,\n\n    onClick: (event) => {\n      if (selectedType && editOn && keyDownState !== \"Shift\")\n        handleGridCellEditing(\n          event,\n          selectedType,\n          setSelectedCellsState,\n          pickingRadius,\n          deckGLref\n        );\n    },\n\n    onDrag: (event) => {\n      if (selectedType && editOn && keyDownState !== \"Shift\")\n        handleGridCellEditing(\n          event,\n          selectedType,\n          setSelectedCellsState,\n          pickingRadius,\n          deckGLref\n        );\n    },\n\n    onDragStart: () => {\n      if (selectedType && editOn && keyDownState !== \"Shift\") {\n        setDraggingWhileEditing(true);\n      }\n    },\n\n    onHover: (e) => {\n      if (e.object) {\n        setHoveredObj(e);\n      }\n    },\n\n    onDragEnd: () => {\n      setDraggingWhileEditing(false);\n    },\n    updateTriggers: {\n      getFillColor: selectedCellsState,\n      getElevation: selectedCellsState,\n    },\n    transitions: {\n      getFillColor: 300,\n      getElevation: 300,\n    },\n  });\n}\n","import { TextLayer } from \"@deck.gl/layers\";\n\nexport default function TextualLayer({ data, coordinates, opacity }) {\n  if (!data || !data.text) return;\n  /*\n     * this layer takes textual layer procured by a 3rd party\n     * module, and renders a text message near the grid cell\n     * defined in the data id attribute.\n     *\n     * data format:\n      [\n      {\"id\": 0, \"info\": \"yes!\" },   {\"id\": 10, \"info\": \"I'm on ID 10!\" }\n      ]\n     *\n     * coordinates format:\n     [\n       {\"info\": \"yes!\", coordinates: [-122.466233, 37.684638]},\n     ]\n     */\n\n  let textLayerData = [];\n\n  data.text.forEach((infoIteam) => {\n    textLayerData.push({\n      coordinates: [\n        coordinates.features[infoIteam.id].geometry.coordinates[0][0][0],\n        coordinates.features[infoIteam.id].geometry.coordinates[0][0][1],\n        100,\n      ],\n      info: infoIteam.info,\n    });\n  });\n\n  return new TextLayer({\n    opacity,\n    id: \"text-layer\",\n    data: textLayerData,\n    pickable: true,\n    getPosition: (d) => d.coordinates,\n    getText: (d) => d.info,\n    getColor: [255, 255, 255],\n    getSize: 30,\n    getAngle: 0,\n    getTextAnchor: \"middle\",\n    getAlignmentBaseline: \"center\",\n  });\n}\n\n// new TextLayer({\n//   id: \"text\",\n//   data: cityIOdata.GEOGRID && cityIOdata.GEOGRID.features,\n//   getPosition: (d) => {\n//     const pntArr = d.geometry.coordinates[0];\n//     const first = pntArr[1];\n//     const last = pntArr[pntArr.length - 2];\n//     const center = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n//     return center;\n//   },\n\n//   getText: (d) => {\n//     var length = 10;\n//     return d.properties.name.length > length\n//       ? d.properties.name.substring(0, length - 3) + \"...\"\n//       : d.properties.name;\n//   },\n//   getColor: (d) => [0, 0, 0],\n//   getSize: 8,\n// }),\n","import { GeoJsonLayer } from \"@deck.gl/layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nexport default function GeojsonLayer({ data: cityIOdata, opacity }) {\n  if (cityIOdata.geojson) {\n    return new GeoJsonLayer({\n      id: \"GeojsonLayer\",\n      data: cityIOdata.geojson,\n      opacity: opacity,\n      pickable: true,\n      wireframe: false,\n      stroked: true,\n      filled: true,\n      extruded: true,\n      lineWidthScale: 1,\n      getFillColor: (d) => hexToRgb(d.properties.fill),\n      getLineColor: (d) => hexToRgb(d.properties.stroke),\n      lineWidthMinPixels: 2,\n      getElevation: (d) => d.properties.height,\n      updateTriggers: {\n        getFillColor: cityIOdata,\n        getElevation: cityIOdata,\n      },\n      transitions: {\n        getFillColor: 500,\n        getElevation: 500,\n      },\n    });\n  }\n}\n","import { SimpleMeshLayer } from \"@deck.gl/mesh-layers\";\nimport { OBJLoader } from \"@loaders.gl/obj\";\n\nexport default function MeshLayer({ data, opacity }) {\n  if (data && data.features) {\n    return new SimpleMeshLayer({\n      id: \"mesh-layer\",\n      data: data.features,\n      loaders: [OBJLoader],\n      mesh: \"./obj/model.obj\",\n      getPosition: (d) => {\n        const pntArr = d.geometry.coordinates[0];\n        const first = pntArr[1];\n        const last = pntArr[pntArr.length - 2];\n        const center = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n        return center;\n      },\n      getColor: (d) =>\n        // d.properties.color,\n        [255, 255, 255, 255],\n\n      getOrientation: (d) => [-180, Math.ceil(Math.random() * 4) * 90, -90],\n      getScale: (d) =>\n        d.properties.height > 0\n          ? [\n              data.properties.header.cellSize / 2,\n              opacity * d.properties.height ,\n              data.properties.header.cellSize / 2,\n            ]\n          : [0, 0, 0],\n      updateTriggers: {\n        getScale: opacity,\n      },\n    });\n  }\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport PaintBrush from \"./components/PaintBrush\";\nimport { postToCityIO } from \"../../../utils/utils\";\nimport Map from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { mapSettings } from \"../../../settings/settings\";\nimport { LightingEffect } from \"@deck.gl/core\";\nimport {\n  AccessLayer,\n  AggregatedTripsLayer,\n  ABMLayer,\n  GridLayer,\n  TextualLayer,\n  GeojsonLayer,\n  MeshLayer,\n} from \"./deckglLayers\";\nimport { processGridData } from \"./deckglLayers/GridLayer\";\nimport { AmbientLight, _SunLight as SunLight } from \"@deck.gl/core\";\n\nexport default function DeckGLMap() {\n  // get cityio data from redux store\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  // get menu state from redux store\n  const menuState = useSelector((state) => state.menuState);\n  const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n  const [selectedCellsState, setSelectedCellsState] = useState();\n  const [viewState, setViewState] = useState(mapSettings.map.initialViewState);\n  const [keyDownState, setKeyDownState] = useState();\n  const [mousePos, setMousePos] = useState();\n  const [mouseDown, setMouseDown] = useState();\n  const [hoveredObj, setHoveredObj] = useState();\n  const [GEOGRIDDATA, setGEOGRIDDATA] = useState();\n  const deckGLref = useRef();\n  const pickingRadius = 40;\n  const editModeToggle = menuState.editMenuState.EDIT_BUTTON;\n  const selectedType = menuState.typesMenuState.SELECTED_TYPE;\n  const layersMenu = menuState.layersMenuState;\n  const viewControlButton =\n    menuState.viewSettingsMenuState.VIEW_CONTROL_BUTTONS;\n\n  const toggleEffects = menuState.viewSettingsMenuState.EFFECTS_CHECKBOX;\n\n  // ! constant animation speed for now - will be updated with slider\n\n  const toggleAnimationState =\n    menuState.viewSettingsMenuState.ANIMATION_CHECKBOX;\n\n  const [animationTime, setAnimationTime] = useState(0);\n  const [animation] = useState({});\n  const animate = () => {\n    if (toggleAnimationState && toggleAnimationState.isOn) {\n      // use variable outside of closure to allow toggle\n      setAnimationTime((t) => {\n        return t > mapSettings.map.layers.ABM.endTime\n          ? mapSettings.map.layers.ABM.startTime\n          : t + toggleAnimationState.slider;\n      });\n      animation.id = window.requestAnimationFrame(animate); // draw next frame\n    }\n  };\n  // ! self executing function to toggle animation state\n  (function () {\n    if (toggleAnimationState && !toggleAnimationState.isOn) {\n      window.cancelAnimationFrame(animation.id);\n      return;\n    }\n  })();\n\n  useEffect(() => {\n    animation.id = window.requestAnimationFrame(animate); // start animation\n    return () => {\n      window.cancelAnimationFrame(animation.id);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toggleAnimationState]);\n\n  // ! lights\n  const [effects, setEffects] = useState(() => []);\n  // set effects to null if toggle Animation State is false\n  useEffect(() => {\n    if (toggleEffects && toggleEffects.isOn) {\n      const ambientLight = new AmbientLight({\n        color: [255, 255, 255],\n        intensity: 1.0,\n      });\n      const dirLight = new SunLight({\n        timestamp: Date.UTC(2019, 7, 1, toggleEffects.slider % 24),\n        color: [255, 255, 255],\n        intensity: 1.0,\n        _shadow: true,\n      });\n      const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n      lightingEffect.shadowColor = [0, 0, 0, 0.8];\n      setEffects([lightingEffect]);\n    } else {\n      setEffects([]);\n    }\n  }, [toggleEffects]);\n  // ! end lights\n\n  // **\n  //  * resets the camera viewport\n  //  * to cityIO header data\n  //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n  //  *\n  const setViewStateToTableHeader = (viewControlButton) => {\n    const lastCell =\n      cityIOdata.GEOGRID.features[cityIOdata.GEOGRID.features.length - 1]\n        .geometry.coordinates[0][0];\n    const firstCell = cityIOdata.GEOGRID.features[0].geometry.coordinates[0][0];\n    const midGrid = [\n      (firstCell[0] + lastCell[0]) / 2,\n      (firstCell[1] + lastCell[1]) / 2,\n    ];\n    const header = cityIOdata.GEOGRID.properties.header;\n    setViewState({\n      ...viewState,\n      longitude: midGrid[0],\n      latitude: midGrid[1],\n      zoom: viewControlButton === \"RESET_VIEW_BUTTON\" ? 15 : viewState.zoom,\n      pitch: 0,\n      bearing:\n        viewControlButton === \"NORTH_VIEW_BUTTON\" ? 0 : 360 - header.rotation,\n      orthographic: viewControlButton === \"ORTHO_VIEW_BUTTON\" ? true : false,\n    });\n  };\n\n  useEffect(() => {\n    setViewStateToTableHeader(viewControlButton);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewControlButton]);\n\n  // fix deck view rotate\n  useEffect(() => {\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // zoom map on CS table location\n    setViewStateToTableHeader();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // update the grid layer with every change to GEOGRIDDATA\n  useEffect(() => {\n    setGEOGRIDDATA(processGridData(cityIOdata));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata.GEOGRIDDATA]);\n\n  // post GEOGRIDDATA changes to cityIO\n  useEffect(() => {\n    if (!editModeToggle && GEOGRIDDATA) {\n      let dataProps = [];\n      for (let i = 0; i < GEOGRIDDATA.features.length; i++) {\n        dataProps[i] = GEOGRIDDATA.features[i].properties;\n      }\n      postToCityIO(dataProps, cityIOdata.tableName, \"/GEOGRIDDATA/\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editModeToggle]);\n\n  const onViewStateChange = ({ viewState }) => {\n    viewState.orthographic =\n      viewControlButton === \"ORTHO_VIEW_BUTTON\" ? true : false;\n    setViewState(viewState);\n  };\n\n  const layersKey = {\n    ABM: ABMLayer({\n      data: cityIOdata,\n      ABMmode: 0,\n      zoomLevel: viewState.zoom,\n      time: animationTime,\n      opacity:\n        layersMenu &&\n        layersMenu.ABM_LAYER_CHECKBOX &&\n        layersMenu.ABM_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    AGGREGATED_TRIPS: AggregatedTripsLayer({\n      data: cityIOdata,\n      ABMmode: 0,\n      opacity:\n        layersMenu &&\n        layersMenu.AGGREGATED_TRIPS_LAYER_CHECKBOX &&\n        layersMenu.AGGREGATED_TRIPS_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    GRID: GridLayer({\n      data: GEOGRIDDATA,\n      editOn: editModeToggle,\n      state: {\n        selectedType,\n        keyDownState,\n        selectedCellsState,\n        pickingRadius,\n        opacity:\n          layersMenu &&\n          layersMenu.GRID_LAYER_CHECKBOX &&\n          layersMenu.GRID_LAYER_CHECKBOX.slider * 0.01,\n      },\n      updaters: {\n        setSelectedCellsState,\n        setDraggingWhileEditing,\n        setHoveredObj,\n      },\n      deckGLref,\n    }),\n\n    ACCESS: AccessLayer({\n      data: cityIOdata,\n      opacity:\n        layersMenu &&\n        layersMenu.ACCESS_LAYER_CHECKBOX &&\n        layersMenu.ACCESS_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    TEXTUAL: TextualLayer({\n      data: cityIOdata,\n      coordinates: GEOGRIDDATA && GEOGRIDDATA,\n      opacity:\n        layersMenu &&\n        layersMenu.TEXTUAL_LAYER_CHECKBOX &&\n        layersMenu.TEXTUAL_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    GEOJSON: GeojsonLayer({\n      data: cityIOdata,\n      opacity:\n        layersMenu &&\n        layersMenu.GEOJSON_LAYER_CHECKBOX &&\n        layersMenu.GEOJSON_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    MESH: MeshLayer({\n      data: GEOGRIDDATA,\n      opacity:\n        layersMenu &&\n        layersMenu.MESH_LAYER_CHECKBOX &&\n        layersMenu.MESH_LAYER_CHECKBOX.slider * 0.01,\n    }),\n  };\n\n  const layerOrder = [\n    \"GRID\",\n    \"TEXTUAL\",\n    \"MESH\",\n    \"GEOJSON\",\n    \"ACCESS\",\n    \"AGGREGATED_TRIPS\",\n    \"ABM\",\n  ];\n\n  const renderDeckLayers = () => {\n    let layers = [];\n    for (var layerNameString of layerOrder) {\n      // toggle layers on and off\n      if (\n        layersMenu &&\n        layersMenu[layerNameString + \"_LAYER_CHECKBOX\"] &&\n        layersMenu[layerNameString + \"_LAYER_CHECKBOX\"].isOn\n      ) {\n        layers.push(layersKey[layerNameString]);\n      }\n    }\n    return layers;\n  };\n\n  return (\n    <>\n      <div\n        onKeyDown={(e) => {\n          setKeyDownState(e.nativeEvent.key);\n        }}\n        onKeyUp={() => setKeyDownState(null)}\n        onMouseMove={(e) => setMousePos(e.nativeEvent)}\n        onMouseUp={() => setMouseDown(false)}\n        onMouseDown={() => setMouseDown(true)}\n      >\n        <PaintBrush\n          editOn={editModeToggle}\n          mousePos={mousePos}\n          selectedType={selectedType}\n          pickingRadius={pickingRadius}\n          mouseDown={mouseDown}\n          hoveredObj={hoveredObj}\n        />\n\n        <DeckGL\n          ref={deckGLref}\n          viewState={viewState}\n          effects={effects}\n          onViewStateChange={onViewStateChange}\n          layers={renderDeckLayers()}\n          controller={{\n            touchZoom: true,\n            touchRotate: true,\n            dragPan: !draggingWhileEditing,\n            dragRotate: !draggingWhileEditing,\n            keyboard: false,\n          }}\n        >\n          <Map\n            asyncRender={false}\n            dragRotate={true}\n            reuseMaps={true}\n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n            mapStyle={mapSettings.map.mapStyle.sat}\n            preventStyleDiffing={true}\n          />\n        </DeckGL>\n      </div>\n    </>\n  );\n}\n","import {\n  Chart as ChartJS,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Radar } from \"react-chartjs-2\";\nimport { useSelector } from \"react-redux\";\nimport { useState, useEffect } from \"react\";\n\nconst options = {\n  scales: {\n    r: {\n      angleLines: {\n        color: \"#696969\",\n      },\n      grid: {\n        color: \"#696969\",\n        circular: true,\n      },\n      pointLabels: {\n        color: \"#C0C0C0\",\n      },\n      ticks: {\n        color: \"#696969\",\n      },\n    },\n  },\n};\n\nconst optionsNoData = {\n  scales: {\n    r: {\n      angleLines: {\n        color: \"#363636\",\n      },\n      grid: {\n        color: \"#363636\",\n        circular: true,\n      },\n      pointLabels: {\n        color: \"#363636\",\n      },\n      ticks: {\n        color: \"#363636\",\n      },\n    },\n  },\n};\n\nconst noData = {\n  labels: [null, null, null],\n  datasets: [\n    {\n      label: \"No indicator data...\",\n      data: [null, null, null],\n      backgroundColor: \"#363636\",\n      borderColor: \"#363636\",\n      borderWidth: 1,\n    },\n  ],\n};\n\nexport default function RadarChart() {\n  ChartJS.register(\n    RadialLinearScale,\n    PointElement,\n    LineElement,\n    Filler,\n    Tooltip,\n    Legend\n  );\n\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const [radarData, setRadarData] = useState();\n\n  const createRadarData = (indicators) => {\n    let radarData = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Project Values\",\n          data: [],\n          backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderWidth: 1,\n        },\n        {\n          label: \"Reference Values\",\n          data: [],\n          backgroundColor: \"rgba(0, 33, 132, 0.2)\",\n          borderColor: \"rgba(0, 99, 255, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    for (let i = 0; i < indicators.length; i++) {\n      if (indicators[i].viz_type === \"radar\") {\n        radarData.labels.push(indicators[i].name);\n        radarData.datasets[0].data.push(indicators[i].value);\n        radarData.datasets[1].data.push(indicators[i].ref_value);\n      }\n    }\n    return radarData;\n  };\n\n  useEffect(() => {\n    if (!cityIOdata.indicators) {\n      setRadarData(noData);\n    } else {\n      const d = createRadarData(cityIOdata.indicators);\n      setRadarData(d);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  return (\n    <>\n      {radarData && (\n        <Radar\n          data={radarData}\n          options={cityIOdata.indicators ? options : optionsNoData}\n        />\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  scales: {\n    r: {\n      angleLines: {\n        color: \"#696969\",\n      },\n      grid: {\n        color: \"#696969\",\n        circular: true,\n      },\n      pointLabels: {\n        color: \"#C0C0C0\",\n      },\n      ticks: {\n        color: \"#696969\",\n      },\n    },\n  },\n  responsive: true,\n};\n\nexport const noData = {\n  labels: [\"no data...\"],\n  datasets: [\n    {\n      label: \"No indicator data...\",\n      data: [0],\n      backgroundColor: \"#696969\",\n    },\n  ],\n};\n\nexport default function BarChart() {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const [barChartData, setBarChartData] = useState();\n\n  useEffect(() => {\n    if (!cityIOdata.indicators) {\n      setBarChartData(noData);\n    } else {\n      const d = createBarChartData(cityIOdata.indicators);\n      setBarChartData(d);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  const createBarChartData = (indicators) => {\n    let barChartData = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Chart Data\",\n          data: [],\n          backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    for (let i = 0; i < indicators.length; i++) {\n      if (indicators[i].viz_type === \"bar\") {\n        barChartData.labels.push(indicators[i].name);\n        barChartData.datasets[0].data.push(indicators[i].value);\n      }\n    }\n    return barChartData;\n  };\n\n  return (\n    <>\n      {barChartData && (\n        <Bar options={options} data={barChartData ? barChartData : noData} />\n      )}\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nexport default function AreaCalc() {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [],\n  });\n\n  ChartJS.register(ArcElement, Tooltip, Legend);\n\n  let geoGridData = cityIOdata.GEOGRIDDATA;\n\n  const createChartData = () => {\n    const data = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Area Calculation\",\n          data: [],\n          backgroundColor: [],\n          borderColor: [],\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    geoGridData.forEach((gridCellData) => {\n      let typeName = gridCellData.name;\n      if (!typeName || typeName === \"None\" || typeName === \"\") {\n        typeName = \"Unknown type...\";\n      }\n      // check if this type is already in the array of labels (if not, add it)\n      if (data.labels.includes(typeName)) {\n        const index = data.labels.indexOf(typeName);\n        // add the value to the data array at existing label\n        data.datasets[0].data[index] =\n          gridCellData.height && gridCellData.height !== 0\n            ? data.datasets[0].data[index] + 1\n            : data.datasets[0].data[index] + 1;\n      } else {\n        data.labels.push(typeName);\n        data.datasets[0].data.push(0);\n        data.datasets[0].backgroundColor.push(\n          `rgba(${gridCellData.color[0]}, ${gridCellData.color[1]}, ${gridCellData.color[2]}, 0.2)`\n        );\n        data.datasets[0].borderColor.push(\n          `rgba(${gridCellData.color[0]}, ${gridCellData.color[1]}, ${gridCellData.color[2]}, 0.8)`\n        );\n      }\n    });\n    setChartData(data);\n  };\n\n  useEffect(() => {\n    if (!cityIOdata.GEOGRID.properties) return;\n    createChartData(cityIOdata);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  return <>{geoGridData && <Doughnut data={chartData} />}</>;\n}\n","import { Card, CardContent, Grid, Box } from \"@mui/material\";\nimport RadarChart from \"./RadarChart\";\nimport BarChart from \"./BarChart\";\nimport AreaCalc from \"./AreaCalc\";\nimport ResizableDrawer from \"../../../Components/ResizableDrawer\";\n\nfunction VisContainer() {\n  return (\n    <ResizableDrawer direction=\"right\" width={300}>\n      <Box sx={{ margin: 1 }}>\n        <Grid container spacing={1} direction={\"row\"}>\n          <Grid item xs={12} xl={8}>\n            <Card variant=\"outlined\" sx={{ width: \"100%\" }}>\n              <CardContent>\n                <RadarChart />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} xl={4}>\n            <Card variant=\"outlined\" sx={{ width: \"100%\" }}>\n              <CardContent>\n                <AreaCalc />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} xl={4}>\n            <Card variant=\"outlined\" sx={{ width: \"100%\" }}>\n              <CardContent>\n                <BarChart />\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n    </ResizableDrawer>\n  );\n}\n\nexport default VisContainer;\n","import CityIO from \"../../Components/CityIO\";\nimport { useSelector } from \"react-redux\";\nimport MenuContainer from \"./MenuContainer\";\nimport DeckGLMap from \"./DeckglMap\";\nimport VisContainer from \"./VisContainer\";\n// import AnimationComponent from \"../../Components/AnimationComponent\";\nimport LoadingModules from \"../../Components/LoadingModules\";\n\nexport default function CityScopeJS() {\n  const cityIOisDone = useSelector(\n    (state) => state.cityIOdataState.cityIOisDone\n  );\n  const tableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      {!cityIOisDone && <LoadingModules loadingModules={[tableName]} />}\n      {/* if we got a cityIO table name, start cityIO module */}\n      {tableName && <CityIO tableName={tableName} />}\n      {/* if cityIO module is done loading, start the CSjs app */}\n      {cityIOisDone && (\n        <>\n          {/* <AnimationComponent /> */}\n          <DeckGLMap />\n          <MenuContainer />\n          <VisContainer />\n        </>\n      )}\n    </>\n  );\n}\n","const typography = {\n    fontFamily: `\"Roboto Mono\", sans-serif`,\n    fontSize: 11,\n    fontWeightLight: 100,\n    fontWeightRegular: 500,\n    fontWeightMedium: 700,\n\n    h1: {\n        fontWeight: 700,\n        fontSize: 45,\n        letterSpacing: \"-1px\",\n    },\n    h2: {\n        fontWeight: 800,\n        fontSize: 29,\n        letterSpacing: \"-0.24px\",\n    },\n    h3: {\n        fontWeight: 700,\n        fontSize: 24,\n        letterSpacing: \"-0.06px\",\n    },\n    h4: {\n        fontWeight: 500,\n        fontSize: 20,\n        letterSpacing: \"-0.06px\",\n    },\n    h5: {\n        fontWeight: 500,\n        fontSize: 16,\n        letterSpacing: \"-0.05px\",\n    },\n    h6: {\n        fontWeight: 500,\n        fontSize: 14,\n        letterSpacing: \"-0.05px\",\n    },\n    overline: {\n        fontWeight: 500,\n    },\n};\n\nexport default typography;\n","import typography from \"./typography\";\nimport { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  typography,\n  palette: {\n\n    mode: \"dark\",\n    primary: {\n      main: \"#FFF\",\n      light: \"#ff5278\",\n    },\n    secondary: {\n      main: \"#ff5278\",\n    },\n    text: {\n      primary: \"#fff\",\n      secondary: \"#ff5278\",\n    },\n  },\n  shape: {\n    borderRadius: 10,\n  },\n  overrides: {\n    MuiOutlinedInput: {\n      notchedOutline: {\n        borderColor: \"#ff5278\",\n      },\n    },\n  },\n});\n\nexport default theme;\n","import Box from \"@mui/material/Box\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport { styled } from \"@mui/material/styles\";\nimport { useEffect, useState } from \"react\";\n\nexport default function TableListLoading() {\n  const [progress, setProgress] = useState(0);\n\n  const BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\n    height: 10,\n  }));\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((oldProgress) => {\n        if (oldProgress === 100) {\n          return 0;\n        }\n        const diff = Math.random() * 10;\n        return Math.min(oldProgress + diff, 100);\n      });\n    }, 500);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <Box sx={{ width: \"100%\", position: \"fixed\", bottom: \"0px\" }}>\n      <BorderLinearProgress variant=\"determinate\" value={progress} />\n    </Box>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport TableListLoading from \"./TableListLoading\";\nimport axios from \"axios\";\nimport { cityIOSettings } from \"../../settings/settings\";\n\nexport default function CityIOlist(props) {\n  const getTablesList = props.getTablesList;\n  const [tablesList, setTableList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    tablesList && getTablesList(tablesList);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tablesList]);\n\n  const fetchCityIOtables = async () => {\n    // ! https://stackoverflow.com/questions/37213783/waiting-for-all-promises-called-in-a-loop-to-finish\n    const cityIOlistURL =\n      cityIOSettings.cityIO.baseURL + cityIOSettings.cityIO.ListOfTables;\n    // get all URLs\n    const tablesArr = await axios.get(cityIOlistURL);\n    // create array of all requests\n    const requestArr = tablesArr.data.map(async (tableName) => {\n      // const tableName = urlStr.split('/').pop()\n      const url = `${cityIOSettings.cityIO.baseURL}table/${tableName}/`;\n      return axios\n        .get(`${url}GEOGRID/properties/header/`)\n        .then((res) =>\n          setTableList((oldArray) => [\n            ...oldArray,\n            { tableURL: url, tableName: tableName, tableHeader: res.data },\n          ])\n        )\n        .catch((error) => console.log(error.toString()));\n    });\n\n    Promise.all(requestArr).then(() => {\n      setIsLoading(false);\n      return tablesList;\n    });\n  };\n\n  useEffect(() => {\n    fetchCityIOtables();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <>{isLoading && <TableListLoading />}</>;\n}\n","import { Typography, Link } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport {generalSettings} from \"../../../settings/settings\";\n\nexport default function SelectedTable(props) {\n  const selectedTable = props.clicked;\n\n  const cityscopeJSendpoint = generalSettings.csjsURL + \"?cityscope=\";\n  const projectionEndpoint = generalSettings.csjsURL + \"?projection=\";\n\n  const [open, setOpen] = useState(false);\n\n  // open dialog when table info has been changed\n  useEffect(() => {\n    setOpen(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedTable]);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"table-select-dialog-title\"\n      aria-describedby=\"table-select-dialog-description\"\n    >\n      <DialogTitle id=\"table-select-dialog-title\">\n        CityScope {selectedTable.tableName}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"table-select-dialog-description\">\n          <Typography component={\"span\"}>\n            <Link\n              href={cityscopeJSendpoint + selectedTable.tableName.toLowerCase()}\n            >\n              Go to project\n            </Link>\n            {\", \"}\n            <Link\n              href={projectionEndpoint + selectedTable.tableName.toLowerCase()}\n            >\n              project this table to TUI\n            </Link>{\" \"}\n            or{\" \"}\n            <Link target={\"blank\"} href={selectedTable.tableURL}>\n              view raw data on cityIO.\n            </Link>\n          </Typography>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>(x) Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport SelectedTable from \"./SelectedTable\";\nimport { useState } from \"react\";\nexport default function SearchTablesList(props) {\n  const tablesList = props.tablesList;\n  const [selectedTable, setSelectedTable] = useState(null);\n  const defaultProps = {\n    options: tablesList,\n    getOptionLabel: (option) => option.tableName,\n  };\n\n  return (\n    <>\n      {selectedTable && <SelectedTable clicked={selectedTable} />}\n      <Autocomplete\n        {...defaultProps}\n        disablePortal\n        id=\"combo-box-demo\"\n        options={tablesList}\n        sx={{ width: 300 }}\n        renderInput={(params) => <TextField {...params} label=\"Search CityScope Project...\" />}\n        onChange={(event, newValue) => {\n          setSelectedTable(newValue);\n        }}\n      />\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/legoio.148c5ab6.png\";","import { useEffect, useState } from \"react\";\nimport { _MapContext } from \"react-map-gl\";\nimport { DeckGL } from \"@deck.gl/react\";\nimport { _GlobeView as GlobeView, COORDINATE_SYSTEM } from \"@deck.gl/core\";\nimport { TileLayer } from \"@deck.gl/geo-layers\";\nimport { FlyToInterpolator } from \"deck.gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { LineLayer, IconLayer, TextLayer, BitmapLayer } from \"@deck.gl/layers\";\nimport icon from \"./legoio.png\";\n\nimport SelectedTable from \"../SelectedTable\";\n\n// * draggable pin https://github.com/visgl/react-map-gl/tree/6.1-release/examples/draggable-markers\n\nexport default function CityIOdeckGLmap(props) {\n  const [markerInfo, setMarkerInfo] = useState([]);\n  const [clicked, setClicked] = useState();\n  const [zoom, setZoom] = useState();\n  const INIT_VIEW = {\n    longitude: -71.060929,\n    latitude: 42.3545259,\n    zoom: 1,\n    pitch: 0,\n    bearing: 0,\n    zHeight: 2000000,\n  };\n\n  const [viewport, setViewport] = useState(INIT_VIEW);\n  const [initialViewState, setInitialViewState] = useState(viewport);\n  // boolean for hovering flag\n  let isHovering = false;\n\n  useEffect(() => {\n    // set initial zoom level to refelct layers appearance\n    setZoom(INIT_VIEW.zoom);\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n  }, [INIT_VIEW.zoom]);\n\n  useEffect(() => {\n    let markersArr = [];\n   \n      props.cityIOdata.forEach((table, index) => {\n      \n        markersArr.push({\n          tableURL: table.tableURL,\n          tableName: table.tableName,\n          index: index,\n          tableHeader: table.tableHeader,\n          coord: {\n            from: [table.tableHeader.longitude, table.tableHeader.latitude],\n            to: [\n              table.tableHeader.longitude + index/10,\n              table.tableHeader.latitude + index/10,\n              INIT_VIEW.zHeight,\n            ],\n          },\n        });\n      });\n    \n    setMarkerInfo(markersArr);\n  }, [props, INIT_VIEW.zHeight]);\n\n  const layers = [\n    new TileLayer({\n      data:\n        \"https://basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png\",\n\n      /**\n       * \n       * TESTS WITH OTHER TILESETS  \n       * 'https://api.mapbox.com/v4/mapbox.mapbox-streets-v8/{z}/{x}/{y}.png' +\n      '?style=' +\n      'mapbox://styles/mapbox/dark-v10' +\n      'mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq' +\n      'mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd' +\n      '&access_token=' +\n      process.env.REACT_APP_MAPBOX_TOKEN,\n\n     settings.map.mapStyle.sat,\n       'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\n       */\n\n      minZoom: 0,\n      maxZoom: 19,\n      tileSize: 96,\n\n      renderSubLayers: (props) => {\n        const {\n          bbox: { west, south, east, north },\n        } = props.tile;\n\n        return new BitmapLayer(props, {\n          data: null,\n          image: props.data,\n          _imageCoordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n          bounds: [west, south, east, north],\n        });\n      },\n    }),\n\n    new LineLayer({\n      id: \"LineLayer\",\n      data: markerInfo,\n      pickable: true,\n      getWidth: zoom < 2 ? 0.5 : 0,\n      getSourcePosition: (d) => d.coord.from,\n      getTargetPosition: (d) => d.coord.to,\n      getColor: (d) => [255, 82, 120],\n    }),\n    new TextLayer({\n      id: \"text-layer\",\n      data: markerInfo,\n      pickable: true,\n      getPosition: (d) => d.coord.to,\n      getText: (d) => d.tableName,\n      getColor: [255, 82, 120],\n      getSize: zoom < 2 ? 0 : 10,\n      getAngle: 0,\n      getPixelOffset: [10, 5],\n      getTextAnchor: \"start\",\n      getAlignmentBaseline: \"center\",\n    }),\n    new IconLayer({\n      id: \"icon-layer\",\n      data: markerInfo,\n      pickable: true,\n      iconAtlas: icon,\n      onClick: (d) => {\n        setInitialViewState({\n          longitude: d.object.coord.to[0],\n          latitude: d.object.coord.to[1],\n          zoom: 3,\n          pitch: 0,\n          bearing: 0,\n          transitionDuration: 1000,\n          transitionInterpolator: new FlyToInterpolator(),\n        });\n\n        setClicked(d);\n      },\n      iconMapping: {\n        marker: { x: 0, y: 0, width: 768, height: 768, mask: false },\n      },\n      getIcon: (d) => \"marker\",\n      sizeScale: 1,\n      getSize: zoom < 5 ? 20 : 10,\n      getPosition: (d) => [d.coord.to[0], d.coord.to[1], INIT_VIEW.zHeight],\n    }),\n  ];\n\n  return (\n    <>\n      {clicked && clicked.object && <SelectedTable clicked={clicked.object} />}\n\n      <DeckGL\n        views={new GlobeView()}\n        onHover={({ object }) => (isHovering = Boolean(object))}\n        getCursor={({ isDragging }) =>\n          isDragging ? \"grabbing\" : isHovering ? \"crosshair\" : \"grab\"\n        }\n        layers={layers}\n        controller={true}\n        initialViewState={initialViewState}\n        onViewportChange={setViewport}\n        onViewStateChange={(d) => setZoom(d.viewState.zoom)}\n        ContextProvider={_MapContext.Provider}\n      ></DeckGL>\n    </>\n  );\n}\n","import CityIOlist from \"./CityIOlist\";\nimport SearchTablesList from \"./SearchTablesList\";\nimport { useState } from \"react\";\nimport { Typography, Link, Grid, Box } from \"@mui/material\";\nimport GitHubIcon from \"@mui/icons-material/GitHub\";\nimport CityIOdeckGLmap from \"./CityIOdeckGLmap/index\";\n\nexport default function CityIOviewer() {\n  // get the list of tables from CityIOlist component and pass it to SearchTablesList component\n  const [tablesList, getTablesList] = useState([]);\n  return (\n    <>\n      <CityIOdeckGLmap cityIOdata={tablesList} />\n\n      <Box sx={{ width: \"100%\", padding: 5 }}>\n        <CityIOlist getTablesList={getTablesList} />\n\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <SearchTablesList tablesList={tablesList} />\n          </Grid>\n          <Grid item xs={12} lg={6} zIndex={10}>\n            <Typography variant=\"h1\">MIT CityScope</Typography>\n            <Typography variant=\"h4\">\n              MIT CityScope is an open-source urban modeling and simulation\n              platform. CityScope allows users to examine different design\n              alternatives, and observe their impact through multiple layers of\n              urban analytics.\n              <Link href={\"https://github.com/CityScope\"} target={\"blank\"}>\n                Join the CityScope open-source development\n              </Link>  <GitHubIcon fontSize={\"small\"} /> \n            </Typography>\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Map from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { mapSettings } from \"../../../../settings/settings\";\nimport { GeoJsonLayer, TripsLayer, HeatmapLayer, TextLayer } from \"deck.gl\";\nimport { processGridData } from \"../../../CityScopeJS/DeckglMap/deckglLayers/GridLayer\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nexport default function ProjectionDeckMap(props) {\n  const editMode = props.editMode;\n  const deckGLref = useRef(null);\n  const settings = mapSettings;\n  const [viewState, setViewState] = useState();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const header = cityIOdata.GEOGRID.properties.header;\n  const setViewStateToTableHeader = () => {\n    setViewState({\n      ...viewState,\n      longitude: header.longitude,\n      latitude: header.latitude,\n      zoom: 15,\n      pitch: 0,\n      bearing: 360 - header.rotation,\n      orthographic: true,\n    });\n  };\n  useEffect(() => {\n    // fix deck view rotate\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // on init, check if prev. local storage with\n    // view state exist. If so, load it.\n    if (localStorage.getItem(\"projectionViewStateStorage\")) {\n      console.log(\"loading prev. projectionViewStateStorage...\");\n      const vs = localStorage.getItem(\"projectionViewStateStorage\");\n      setViewState(JSON.parse(vs));\n    } else {\n      // zoom map on CS table location\n      setViewStateToTableHeader();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onViewStateChange = ({ viewState }) => {\n    //    save current view state to local storage\n    localStorage.setItem(\n      \"projectionViewStateStorage\",\n      JSON.stringify(viewState)\n    );\n    // ! lock bearing to avoid odd rotation\n    setViewState({ ...viewState, pitch: 0, orthographic: true });\n  };\n\n  const [time, setTime] = useState(settings.map.layers.ABM.startTime);\n  const [animation] = useState({});\n\n  const animate = () => {\n    setTime((t) => {\n      return t > settings.map.layers.ABM.endTime\n        ? settings.map.layers.ABM.startTime\n        : t + settings.map.layers.ABM.animationSpeed;\n    });\n    animation.id = window.requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    animation.id = window.requestAnimationFrame(animate);\n    return () => window.cancelAnimationFrame(animation.id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animation]);\n\n  const layersArray = [\n    new GeoJsonLayer({\n      id: \"GRID\",\n      data: processGridData(cityIOdata),\n      opacity: 0.5,\n      extruded: false,\n      wireframe: true,\n      lineWidthScale: 1,\n      lineWidthMinPixels: 5,\n      getFillColor: (d) => d.properties.color,\n      transitions: {\n        getFillColor: 500,\n      },\n    }),\n\n    new HeatmapLayer({\n      id: \"ACCESS\",\n      colorRange: [\n        [233, 62, 58],\n        [237, 104, 60],\n        [243, 144, 63],\n      ],\n      intensity: 0.8,\n      threshold: 0.5,\n      data: cityIOdata.access && cityIOdata.access.features,\n      getPosition: (d) => d.geometry.coordinates,\n      getWeight: (d) => d.properties[0],\n      updateTriggers: {\n        getWeight: [0],\n      },\n    }),\n\n    // text layer in the center of each grid cell from the cityIOdata.GEOGRID.features\n    new TextLayer({\n      id: \"text\",\n      data: cityIOdata.GEOGRID && cityIOdata.GEOGRID.features,\n      getPosition: (d) => {\n        const pntArr = d.geometry.coordinates[0];\n        const first = pntArr[1];\n        const last = pntArr[pntArr.length - 2];\n        const center = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n        return center;\n      },\n\n      getText: (d) => {\n        var length = 10;\n        return d.properties.name.length > length\n          ? d.properties.name.substring(0, length - 3) + \"...\"\n          : d.properties.name;\n      },\n      getColor: (d) => [0, 0, 0],\n      getSize: 8,\n    }),\n\n    new TripsLayer({\n      id: \"ABM\",\n      data: cityIOdata.ABM2 && cityIOdata.ABM2.trips,\n      getColor: (d) => {\n        let col = hexToRgb(cityIOdata.ABM2.attr.mode[d.mode].color);\n        return col;\n      },\n      getPath: (d) => d.path,\n      getTimestamps: (d) => d.timestamps,\n      fadeTrail: true,\n      getWidth: 10,\n      trailLength: 200,\n      currentTime: time,\n    }),\n  ];\n\n  return (\n    <DeckGL\n      ref={deckGLref}\n      viewState={viewState}\n      onViewStateChange={onViewStateChange}\n      layers={layersArray}\n      controller={{\n        keyboard: false,\n      }}\n    >\n      {!editMode && (\n        <Map\n          width=\"100%\"\n          height=\"100%\"\n          asyncRender={false}\n          dragRotate={true}\n          reuseMaps={true}\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n          mapStyle={settings.map.mapStyle.blue}\n          preventStyleDiffing={true}\n        />\n      )}\n    </DeckGL>\n  );\n}\n","import { Anchor, Vector } from \"./Keystoner.tsx\";\n\nconst anchorSize = 20;\nconst halfAnchor = anchorSize / 1.5;\nconst vectorToTransform = (vector: Vector) =>\n  `translate(${vector[0]}px, ${vector[1]}px)`;\nconst styles = {\n  container: {\n    width: anchorSize,\n    height: anchorSize,\n    borderRadius: \"50%\",\n    position: \"absolute\" as \"absolute\",\n    border: \"1px solid white\",\n    cursor: \"move\",\n  },\n  \"top-left\": {\n    left: -halfAnchor,\n    top: -halfAnchor,\n  },\n  \"bottom-left\": {\n    left: -halfAnchor,\n    bottom: -halfAnchor,\n  },\n  \"top-right\": {\n    top: -halfAnchor,\n    right: -halfAnchor,\n  },\n  \"bottom-right\": {\n    bottom: -halfAnchor,\n    right: -halfAnchor,\n  },\n};\n\nexport interface Props {\n  position: Anchor;\n  onMouseEnter?: (position: Anchor) => void;\n  // tslint:disable-next-line:no-any\n  onMouseDown: (evt: any, position: Anchor) => void;\n  onMouseUp: (position: Anchor) => void;\n  translation: Vector;\n  style?: React.CSSProperties;\n  className?: string;\n}\n\nexport const AnchorComponent: StatelessComponent<Props> = ({\n  position,\n  translation,\n  onMouseEnter,\n  onMouseDown,\n  onMouseUp,\n  className = \"\",\n  style = {},\n}) => (\n  <div\n    onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n    onMouseDown={(evt) => onMouseDown(evt, position)}\n    onMouseUp={() => onMouseUp(position)}\n    className={className}\n    style={{\n      ...styles.container,\n      ...styles[position],\n      ...style,\n      transform: vectorToTransform(translation),\n    }}\n  />\n);\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n  var factor = Math.pow(10, precision);\n  var tempNumber = num * factor;\n  var roundedTempNumber = Math.round(tempNumber);\n  return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n  (Array as any)(num)\n    .fill()\n    .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n  sourcePoints: RectPoints,\n  targetPoints: RectPoints\n): Matrix3d => {\n  const a: number[][] = [];\n  const b: number[] = [];\n\n  for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n    const [fromX, fromY] = sourcePoints[i];\n    const [toX, toY] = targetPoints[i];\n\n    a.push(\n      [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n      [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n    );\n\n    b.push(toX, toY);\n  }\n\n  const h = solve(a, b, true);\n\n  return [\n    h[0],\n    h[3],\n    0,\n    h[6],\n    h[1],\n    h[4],\n    0,\n    h[7],\n    0,\n    0,\n    1,\n    0,\n    h[2],\n    h[5],\n    0,\n    1,\n  ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n  `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n  `translate(${vector[0]}px, ${vector[1]}px)`;\n\n// Component interfaces\nexport interface Props {\n  style?: React.CSSProperties;\n  className?: string;\n  isEditMode?: boolean;\n  x?: number;\n  y?: number;\n  anchorStyle?: React.CSSProperties;\n  anchorClassName?: string;\n}\n\nexport interface Context {\n  isEditMode: boolean;\n}\n\nexport interface State {\n  matrix: Matrix3d;\n  translateDelta: { [key: string]: Vector };\n  sourcePoints?: RectPoints;\n  transformOrigin: Vector;\n  containerTranslate: Vector;\n}\n\nconst styles = {\n  container: {\n    position: \"relative\" as \"relative\",\n  },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n  \"top-left\",\n  \"top-right\",\n  \"bottom-right\",\n  \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n  let deltaInitVals: any = {};\n  anchors.forEach((e) => {\n    deltaInitVals[e] = [0, 0];\n  });\n  return deltaInitVals;\n};\n\nexport default class Keystoner extends React.Component<Props, State> {\n  container: HTMLElement | null;\n  layerTranslateDelta: Vector | undefined;\n  anchorTranslateDelta: Vector | undefined;\n  isAnchorDragging = false;\n  targetPoints: RectPoints;\n  anchorMoving: Anchor | undefined;\n  state: State = {\n    matrix: defaultMatrix,\n    translateDelta: _setDeltaVal(),\n    sourcePoints: undefined,\n    transformOrigin: [0, 0],\n    containerTranslate: [this.props.x || 0, this.props.y || 0],\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    if (this.container) {\n      const { width, height } = this.container.getBoundingClientRect();\n      const marginInitialView = 0;\n      const sourcePoints = [\n        [marginInitialView, marginInitialView],\n        [width - marginInitialView, marginInitialView],\n        [width - marginInitialView, height - marginInitialView],\n        [marginInitialView, height - marginInitialView],\n      ] as RectPoints;\n      this.targetPoints = [...sourcePoints] as RectPoints;\n      this.setState({ sourcePoints });\n\n      if (localStorage.getItem(\"projMap\")) {\n        console.log(\"loading prev. projMap...\");\n        let ls: any = localStorage.getItem(\"projMap\");\n        this.setState(JSON.parse(ls));\n      }\n    }\n  }\n  componentDidUpdate(prevProps: any, prevState: State) {\n    // save whatever keystone was in state\n    localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n    window.removeEventListener(\"mousemove\", this.onMouseMove);\n  }\n\n  onAnchorMouseDown = (evt: any, position: any) => {\n    evt.stopPropagation();\n    this.anchorTranslateDelta = [\n      evt.pageX - this.state.translateDelta[position][0],\n      evt.pageY - this.state.translateDelta[position][1],\n    ];\n\n    this.anchorMoving = position;\n  };\n\n  onAnchorMouseMove = (evt: any) => {\n    if (\n      !this.anchorTranslateDelta ||\n      !this.state.sourcePoints ||\n      !this.anchorMoving\n    ) {\n      return;\n    }\n    evt.preventDefault();\n    evt.stopPropagation();\n    const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n    const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n    const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n    this.targetPoints[vectorIndexToModify] = [\n      this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n      this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n    ];\n\n    this.setState({\n      matrix: transformPointsToMatrix(\n        this.state.sourcePoints,\n        this.targetPoints!\n      ),\n      translateDelta: {\n        ...this.state.translateDelta,\n        [this.anchorMoving]: [deltaX, deltaY],\n      },\n    });\n  };\n\n  onAnchorMouseUp = (position: any) => {\n    this.anchorTranslateDelta = undefined;\n    this.anchorMoving = undefined;\n  };\n\n  onMouseUp = () => {\n    this.layerTranslateDelta = undefined;\n  };\n\n  onMouseMove = (evt: any) => {\n    if (!this.layerTranslateDelta || !this.props.isEditMode) {\n      return;\n    }\n\n    const newVector: Vector = [\n      evt.pageX - this.layerTranslateDelta[0],\n      evt.pageY - this.layerTranslateDelta[1],\n    ];\n\n    this.setState({\n      containerTranslate: newVector,\n    });\n  };\n\n  onMouseDown = (evt: any) => {\n    const { containerTranslate } = this.state;\n    this.layerTranslateDelta = [\n      evt.pageX - containerTranslate[0],\n      evt.pageY - containerTranslate[1],\n    ];\n  };\n\n  render() {\n    const {\n      style,\n      isEditMode,\n      className,\n      anchorStyle,\n      anchorClassName,\n    } = this.props;\n    const {\n      translateDelta,\n      matrix,\n      containerTranslate,\n      transformOrigin,\n    } = this.state;\n\n    return (\n      <>\n        <div\n          onMouseDown={this.onMouseDown}\n          onMouseUp={this.onMouseUp}\n          style={{\n            cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n            position: \"relative\",\n            display: \"inline-block\",\n            transform: vectorToTransform(containerTranslate),\n          }}\n        >\n          <div\n            ref={(ref) => {\n              this.container = ref;\n            }}\n            style={{\n              ...styles.container,\n              ...style,\n              pointerEvents: isEditMode ? \"none\" : \"all\",\n              transform: matrixToTransform(matrix),\n              transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n            }}\n            className={className}\n          >\n            {this.props.children}\n          </div>\n          {isEditMode && (\n            <div>\n              {anchors.map((anchor, index) => (\n                <AnchorComponent\n                  style={anchorStyle}\n                  className={anchorClassName}\n                  key={anchor}\n                  translation={translateDelta[anchor]}\n                  position={anchor}\n                  onMouseDown={this.onAnchorMouseDown}\n                  onMouseUp={this.onAnchorMouseUp}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport default function DeleteLocalStorage() {\n  return (\n    <Grid container alignItems=\"center\" justify=\"center\">\n      <Button\n        sx={{ zIndex: \"tooltip\", top: \"50vh\", left: \"50vw\" }}\n        variant=\"contained\"\n        startIcon={<DeleteIcon />}\n      >\n        Reset Projection Mapping\n      </Button>\n    </Grid>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport ProjectionDeckMap from \"./ProjectionDeckMap\";\nimport Keystoner from \"./Components/Keystoner\";\nimport DeleteLocalStorage from \"./Components/deleteLocalStorage\";\n\nexport default function Keystone() {\n  const [editMode, setEditMode] = useState(false);\n\n  const clearLocalStorage = () => {\n    if (localStorage.getItem(\"projMap\")) {\n      localStorage.removeItem(\"projMap\");\n    }\n    if (localStorage.getItem(\"projectionViewStateStorage\")) {\n      localStorage.removeItem(\"projectionViewStateStorage\");\n    }\n    window.location.reload();\n  };\n\n  useEffect(() => {\n    console.log(\"Keystone starting...\");\n    const onKeyDown = ({ key }) => {\n      if (key === \" \") {\n        setEditMode((editMode) => !editMode);\n      }\n    };\n    document.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [editMode]);\n\n  return (\n    <>\n      {editMode && (\n        <div onClick={() => clearLocalStorage()}>\n          <DeleteLocalStorage />\n        </div>\n      )}\n\n      <div\n        // ! this div's props are\n        // ! controling the projection z-index\n        // ! on top of the menus\n\n        style={{\n          height: \"100vh\",\n          width: \"100vw\",\n          overflow: \"hidden\",\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          zIndex: 1000,\n        }}\n      >\n        <div>\n          <Keystoner\n            style={{\n              height: \"100vh\",\n              width: \"100vw\",\n              backgroundColor: editMode ? \"rgba(255,0,0)\" : null,\n            }}\n            isEditMode={editMode}\n          >\n            <ProjectionDeckMap editMode = {editMode} />\n          </Keystoner>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport CityIO from \"../../Components/CityIO\";\nimport Keystone from \"./Keystone\";\n\nexport default function ProjectionMapping() {\n  const cityIOisDone = useSelector(\n    (state) => state.cityIOdataState.cityIOisDone\n  );\n  const tableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      {tableName && <CityIO tableName={tableName} />}\n      {cityIOisDone && <Keystone />}\n    </>\n  );\n}\n","export default function SelectionTarget(props) {\n  if (!props.mousePos) return null;\n  const mousePos = props.mousePos;\n  const mouseDown = props.mouseDown;\n  const selectedType = props.selectedType;\n  const divSize = props.divSize;\n  let mouseX = mousePos.x - divSize / 2;\n  let mouseY = mousePos.y - divSize / 2;\n  return (\n    <div\n      style={{\n        border: \"2px solid\",\n        backgroundColor: mouseDown ? selectedType.color : \"rgba(0,0,0,0)\",\n        borderColor: selectedType.color,\n        color: selectedType.color,\n        borderRadius: \"15%\",\n        position: \"fixed\",\n        zIndex: 1,\n        pointerEvents: \"none\",\n        width: divSize,\n        height: divSize,\n        left: mouseX || 0,\n        top: mouseY || 0,\n      }}\n    >\n      <div\n        style={{\n          position: \"relative\",\n          left: divSize + 10,\n          fontSize: \"0.5em\",\n        }}\n      >\n        {selectedType.name}\n      </div>\n    </div>\n  );\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { GridEditorSettings } from \"../../settings/settings\";\n\nexport const editorMenuSlice = createSlice({\n  name: \"menuState\",\n  initialState: {\n    editorMapCenter: {\n      latitude: GridEditorSettings.GEOGRID.properties.header.latitude,\n      longitude: GridEditorSettings.GEOGRID.properties.header.longitude,\n    },\n    gridMaker: {},\n    gridProps: {},\n    typesEditorState: {},\n  },\n  reducers: {\n    updateEditorMapCenter: (state, action) => {\n      state.editorMapCenter = action.payload;\n    },\n    updateGridProps: (state, action) => {\n      state.gridProps = action.payload;\n    },\n    updateGridMaker: (state, action) => {\n      state.gridMaker = action.payload;\n    },\n    updateTypesEditorState: (state, action) => {\n      state.typesEditorState = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateEditorMapCenter,\n  updateGridProps,\n  updateGridMaker,\n  updateTypesEditorState,\n} = editorMenuSlice.actions;\nexport default editorMenuSlice.reducer;\n","import EditorBrush from \"./EditorBrush\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { hexToRgb, testHex } from \"../../../utils/utils\";\nimport { updateGridMaker } from \"../../../redux/reducers/editorMenuSlice\";\nimport { GridEditorSettings } from \"../../../settings/settings\";\n\nexport default function EditorMap() {\n  const dispatch = useDispatch();\n  const [grid, setGrid] = useState();\n  // get the selected type from the store\n  const selectedType = useSelector(\n    (state) => state.editorMenuState.typesEditorState.selectedRow\n  );\n\n  // redux grid\n  const createdGrid = useSelector((state) => state.editorMenuState.gridMaker);\n  // create grid from redux store\n  useEffect(() => {\n    setGrid(createdGrid);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [createdGrid]);\n\n  // redux map center\n  const editorMapCenter = useSelector(\n    (state) => state.editorMenuState.editorMapCenter\n  );\n\n  const deckGLref = useRef(null);\n  const pickingRadius = 40;\n\n  useEffect(() => {\n    // zoom map on CS table location\n    setViewStateToTableHeader(editorMapCenter);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editorMapCenter]);\n\n  const [viewState, setViewState] = useState(\n    GridEditorSettings.map.initialViewState\n  );\n  // const [hoveredObj, setHoveredObj] = useState();\n  const [keyDownState, setKeyDownState] = useState();\n  const [mousePos, setMousePos] = useState();\n  const [mouseDown, setMouseDown] = useState();\n  const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n  const [pickedCellsState] = useState();\n  const onViewStateChange = ({ viewState }) => {\n    setViewState(viewState);\n  };\n\n  /**\n   * resets the camera viewport\n   * to cityIO header data\n   * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n   */\n  const setViewStateToTableHeader = (editorMapCenter) => {\n    setViewState({\n      ...viewState,\n      latitude:\n        (editorMapCenter && editorMapCenter.latCenter) ||\n        GridEditorSettings.GEOGRID.properties.header.latitude,\n      longitude:\n        (editorMapCenter && editorMapCenter.lonCenter) ||\n        GridEditorSettings.GEOGRID.properties.header.longitude,\n      zoom: 15,\n      pitch: 0,\n      bearing: 0,\n      orthographic: true,\n    });\n  };\n\n  // fix deck view rotate\n  useEffect(() => {\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // zoom map on CS table location\n    setViewStateToTableHeader();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Description. uses deck api to\n   * collect objects in a region\n   * @argument{object} event picking event\n   */\n  const multipleObjPicked = (event) => {\n    const dim = pickingRadius;\n    const x = event.x - dim / 2;\n    const y = event.y - dim / 2;\n    let multipleObj = deckGLref.current.pickObjects({\n      x: x,\n      y: y,\n      width: dim,\n      height: dim,\n    });\n    return multipleObj;\n  };\n\n  /**\n   * Description. allow only to pick cells that are\n   *  not of CityScope TUI & that are interactable\n   * so to not overlap TUI activity\n   */\n  const handleGridCellEditing = (event) => {\n    if (!selectedType) return;\n    const { height, name, color, interactive } = selectedType;\n    const multiSelectedObj = multipleObjPicked(event);\n\n    multiSelectedObj.forEach((pickedObject, index) => {\n      // create a copy of the object\n      const thisCellProps = { ...pickedObject.object.properties };\n      // modify the copy properties to match the selected type\n      thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n      thisCellProps.height = parseInt(height);\n      thisCellProps.name = name;\n      if (interactive !== \"No\") {\n        thisCellProps.interactive = interactive;\n      } else {\n        delete thisCellProps.interactive;\n      }\n      //  assign the modified copy to the grid object\n      setGrid((grid) => ({\n        ...grid,\n        features: grid.features.map((feature) => {\n          if (pickedObject.index === feature.properties.id) {\n            return {\n              ...feature,\n              properties: thisCellProps,\n            };\n          }\n          return feature;\n        }),\n      }));\n    });\n  };\n\n  /**\n   * Description.\n   * draw target area around mouse\n   */\n  const renderEditorBrush = () => {\n    return (\n      selectedType && (\n        <EditorBrush\n          mousePos={mousePos}\n          selectedType={selectedType}\n          divSize={pickingRadius}\n          mouseDown={mouseDown}\n          // hoveredObj={hoveredObj}\n        />\n      )\n    );\n  };\n\n  const handleKeyUp = () => {\n    setKeyDownState(null);\n  };\n\n  const handleKeyDown = (e) => {\n    // avoid common clicks\n    setKeyDownState(e.nativeEvent.key);\n  };\n\n  /**\n   * renders deck gl layers\n   */\n  const renderLayers = () => {\n    const layers = [\n      new GeoJsonLayer({\n        id: \"GRID\",\n        opacity: 0.5,\n        stroked: false,\n        filled: true,\n        wireframe: true,\n        visible: true,\n        pickable: true,\n        data: grid,\n        extruded: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 1,\n        getElevation: (d) => d.properties.height,\n        getFillColor: (d) => d.properties.color,\n\n        onClick: (event, cellInfo) => {\n          if (!cellInfo.rightButton && keyDownState !== \"Shift\")\n            handleGridCellEditing(event);\n        },\n        onDrag: (event, cellInfo) => {\n          if (!cellInfo.rightButton && keyDownState !== \"Shift\")\n            handleGridCellEditing(event);\n        },\n        onDragStart: (event, cellInfo) => {\n          if (!cellInfo.rightButton && keyDownState !== \"Shift\") {\n            setDraggingWhileEditing(true);\n          }\n        },\n        onDragEnd: () => {\n          setDraggingWhileEditing(false);\n        },\n        updateTriggers: {\n          getFillColor: pickedCellsState,\n          getElevation: pickedCellsState,\n        },\n      }),\n    ];\n    return layers;\n  };\n\n  return (\n    <div\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onMouseMove={(e) => setMousePos(e.nativeEvent)}\n      onMouseUp={() => {\n        // ! when mouse is up, dispatch the grid to the store\n        //! so it will be sent to the server when committing\n        dispatch(updateGridMaker(grid));\n        setMouseDown(false);\n      }}\n      onMouseDown={() => setMouseDown(true)}\n    >\n      {renderEditorBrush()}\n\n      <DeckGL\n        ref={deckGLref}\n        viewState={viewState}\n        onViewStateChange={onViewStateChange}\n        layers={renderLayers()}\n        controller={{\n          touchZoom: true,\n          touchRotate: true,\n          dragPan: !draggingWhileEditing,\n          dragRotate: !draggingWhileEditing,\n          keyboard: false,\n        }}\n      >\n        <StaticMap\n          asyncRender={false}\n          dragRotate={true}\n          reuseMaps={true}\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n          mapStyle={GridEditorSettings.map.mapStyle.sat}\n          preventStyleDiffing={true}\n        />\n      </DeckGL>\n    </div>\n  );\n}\n","import Button from \"@mui/material/Button\";\nimport CenterFocusStrongIcon from \"@mui/icons-material/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\nimport { updateEditorMapCenter } from \"../../../../../redux/reducers/editorMenuSlice\";\n\nexport default function CenterMapButton(props) {\n  const dispatch = useDispatch();\n\n  return (\n    <Button\n      onClick={() => {\n        dispatch(\n          updateEditorMapCenter({\n            latCenter: parseFloat(props.mapCenter[0]),\n            lonCenter: parseFloat(props.mapCenter[1]),\n          })\n        );\n      }}\n      variant=\"outlined\"\n      startIcon={<CenterFocusStrongIcon />}\n    >\n      Center Map to Grid\n    </Button>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { updateGridProps } from \"../../../../redux/reducers/editorMenuSlice\";\nimport { TextField, Typography, List, ListItem, Stack } from \"@mui/material\";\nimport CenterMapButton from \"./CenterMapButton\";\nimport { GridEditorSettings } from \"../../../../settings/settings\";\n\nexport default function GridProps() {\n  const settings = GridEditorSettings;\n  const dispatch = useDispatch();\n  const [formValues, setFormValues] = useState({\n    tableName: settings.GEOGRID.properties.header.tableName,\n    latitude: settings.GEOGRID.properties.header.latitude,\n    longitude: settings.GEOGRID.properties.header.longitude,\n    tz: settings.GEOGRID.properties.header.tz,\n    nrows: settings.GEOGRID.properties.header.nrows,\n    ncols: settings.GEOGRID.properties.header.nrows,\n    rotation: settings.GEOGRID.properties.header.rotation,\n    cellSize: settings.GEOGRID.properties.header.cellSize,\n    projection: settings.GEOGRID.properties.header.projection,\n  });\n\n  const handleFormUpdates = (event) => {\n    const { id, value } = event.target;\n    setFormValues({ ...formValues, [id]: value });\n  };\n\n  useEffect(() => {\n    // dispatch form values to redux store\n    dispatch(updateGridProps(formValues));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formValues]);\n\n  //  get all data\n  // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n  return (\n    <List>\n      <ListItem>\n        <Typography variant=\"h4\">Project Properties</Typography>\n      </ListItem>\n      <ListItem>\n        <TextField\n          onChange={(event) => handleFormUpdates(event)}\n          variant=\"outlined\"\n          id=\"tableName\"\n          label=\"CityScope Project Name\"\n          defaultValue={formValues.tableName}\n        />\n      </ListItem>\n      <ListItem>\n        <Stack direction=\"row\" spacing={1}>\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"latitude\"\n            label=\"Latitude\"\n            defaultValue={formValues.latitude}\n            type=\"number\"\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"longitude\"\n            label=\"Longitude\"\n            defaultValue={formValues.longitude}\n            type=\"number\"\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"tz\"\n            label=\"Time Zone (GMT)\"\n            defaultValue={formValues.tz}\n            type=\"number\"\n          />\n        </Stack>\n      </ListItem>\n      <ListItem>\n        <CenterMapButton\n          mapCenter={[formValues.latitude, formValues.longitude]}\n        />\n      </ListItem>\n\n      <ListItem>\n        <Stack direction=\"row\" spacing={1}>\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"nrows\"\n            label=\"Rows\"\n            defaultValue={formValues.nrows}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 100,\n                min: 0,\n              },\n            }}\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"ncols\"\n            label=\"Columns\"\n            defaultValue={formValues.ncols}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 100,\n                min: 0,\n              },\n            }}\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"rotation\"\n            label=\"Rotation (deg)\"\n            defaultValue={formValues.rotation}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 360,\n                min: 0,\n              },\n            }}\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"cellSize\"\n            label=\"Cell Size (m^2)\"\n            defaultValue={formValues.cellSize}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 1000,\n                min: 1,\n              },\n            }}\n          />\n        </Stack>\n      </ListItem>\n      <ListItem>\n        <TextField\n          size=\"small\"\n          onChange={(event) => handleFormUpdates(event)}\n          variant=\"outlined\"\n          id=\"projection\"\n          label=\"Projection\"\n          defaultValue={formValues.projection}\n          type=\"string\"\n          helperText=\"Default projection should work for most CityScope cases. Find specific projections at: https://epsg.io/\"\n        />\n      </ListItem>\n    </List>\n  );\n}\n","import proj4 from \"proj4\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nfunction deg_to_rad(deg) {\n  return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n  return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n  var keys = Object.keys(obj);\n  return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps, typesList) => {\n  let top_left_lon = parseFloat(gridProps.longitude);\n  let top_left_lat = parseFloat(gridProps.latitude);\n  let rotation = parseFloat(gridProps.rotation);\n  let userPrj = gridProps.projection;\n  let cell_size = parseFloat(gridProps.cellSize);\n  let nrows = parseFloat(gridProps.nrows);\n  let ncols = parseFloat(gridProps.ncols);\n\n  const webMercator = proj4.defs(\"EPSG:4326\");\n  let EARTH_RADIUS_M = 6.371e6;\n  let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n  let bearing = (90 - rotation + 360) % 360;\n  let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n  let la1 = deg_to_rad(top_left_lon_lat.lat);\n  let lo1 = deg_to_rad(top_left_lon_lat.lon);\n  let bearing_rad = deg_to_rad(bearing);\n  let la2 = Math.asin(\n    Math.sin(la1) * Math.cos(Ad) +\n      Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n  );\n  let lo2 =\n    lo1 +\n    Math.atan2(\n      Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n      Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n    );\n  let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n  let top_left_xy = proj4(webMercator, userPrj, [\n    top_left_lon_lat.lon,\n    top_left_lon_lat.lat,\n  ]);\n\n  let top_right_xy = proj4(webMercator, userPrj, [\n    top_right_lon_lat.lon,\n    top_right_lon_lat.lat,\n  ]);\n\n  let dydx =\n    (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n  let theta = Math.atan(dydx);\n  let cosTheta = Math.cos(theta);\n  let sinTheta = Math.sin(theta);\n  // create rotate matrix\n  let x_unRot = [];\n  let y_unRot = [];\n  for (let i = 0; i < nrows; i++) {\n    for (let j = 0; j < ncols; j++) {\n      x_unRot.push(j * cell_size);\n      y_unRot.push(-i * cell_size);\n    }\n  }\n\n  let x_rot = [];\n  let y_rot = [];\n  for (let i = 0; i < x_unRot.length; i++) {\n    x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n    y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n  }\n\n  let x_rot_trans = [];\n  let y_rot_trans = [];\n  for (let i = 0; i < x_rot.length; i++) {\n    x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n    y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n  }\n\n  var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n  var dydCol = y_rot_trans[1] - y_rot_trans[0];\n  var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n  var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n  let gridPnts = [];\n  let geojsonFeatureCollection = {\n    type: \"FeatureCollection\",\n    // polygons go here\n    features: [],\n  };\n\n  // get a list of types that is updated based on\n  // the current redux state of the types list table\n  let types = typesList;\n\n  for (let i = 0; i < x_rot_trans.length; i++) {\n    let rndType = randomProperty(types);\n\n    let geojsonPolygon = {\n      type: \"Feature\",\n      geometry: {\n        type: \"Polygon\",\n        coordinates: null,\n      },\n      properties: {\n        color: hexToRgb(rndType.color),\n        height: rndType.height,\n        name: rndType.name,\n        interactive: rndType.interactive,\n        id: i,\n      },\n    };\n\n    var polygon_xy = [\n      [x_rot_trans[i], y_rot_trans[i]],\n      [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n      [x_rot_trans[i] + dxdRow + dxdCol, y_rot_trans[i] + dydRow + dydCol],\n      [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n      [x_rot_trans[i], y_rot_trans[i]],\n    ];\n\n    var polygon_ll = [];\n    for (var v = 0; v < 5; v++) {\n      let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n      polygon_ll.push(ll);\n    }\n\n    geojsonPolygon.geometry.coordinates = [polygon_ll];\n    gridPnts.push(geojsonPolygon);\n  }\n  geojsonFeatureCollection.features = gridPnts;\n  return geojsonFeatureCollection;\n};\n","import { useState, useEffect } from \"react\";\nimport AutoAwesomeIcon from \"@mui/icons-material/AutoAwesome\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { gridCreator } from \"./gridCreator\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateGridMaker } from \"../../../../redux/reducers/editorMenuSlice\";\n\nexport default function GridMakerMenu() {\n  const dispatch = useDispatch();\n  const [grid, setGrid] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const gridProps = useSelector((state) => state.editorMenuState.gridProps);\n  const typesList = useSelector(\n    (state) => state.editorMenuState.typesEditorState.tableData\n  );\n\n  useEffect(() => {\n    dispatch(updateGridMaker(grid));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [grid]);\n\n  const handleGridCreation = () => {\n    setGrid(gridCreator(gridProps, typesList));\n  };\n\n  return (\n    <>\n      {gridProps && typesList && (\n        <LoadingButton\n          onClick={() => {\n            setLoading(true);\n            new Promise((resolve) => {\n              setTimeout(() => {\n                setLoading(false);\n                handleGridCreation();\n              }, 100);\n              resolve();\n            });\n          }}\n          loading={loading}\n          loadingPosition=\"start\"\n          variant=\"outlined\"\n          startIcon={<AutoAwesomeIcon />}\n        >\n          Generate Grid\n        </LoadingButton>\n      )}\n    </>\n  );\n}\n","import MaterialTable from \"@material-table/core\";\nimport { useState, useEffect } from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nimport { GridEditorSettings } from \"../../../../settings/settings\";\nimport { updateTypesEditorState } from \"../../../../redux/reducers/editorMenuSlice\";\n\nconst settings = GridEditorSettings;\n\nexport const createTypesArray = (LandUseTypesList) => {\n  let typesArray = [];\n  Object.keys(LandUseTypesList).forEach((type, index) => {\n    typesArray.push({\n      id: index,\n      name: type,\n      description: \"[edit info for type: \" + type + \"]\",\n      color: LandUseTypesList[type].color,\n      height: LandUseTypesList[type].height ? LandUseTypesList[type].height : 0,\n\n      LBCS: LandUseTypesList[type].LBCS\n        ? JSON.stringify(LandUseTypesList[type].LBCS)\n        : null,\n      NAICS: LandUseTypesList[type].NAICS\n        ? JSON.stringify(LandUseTypesList[type].NAICS)\n        : null,\n      interactive: LandUseTypesList[type].interactive,\n    });\n  });\n  return typesArray;\n};\n\nexport const tableInitialState = {\n  columns: [\n    {\n      title: \"Type\",\n      field: \"name\",\n    },\n    {\n      title: \"Description\",\n      field: \"description\",\n    },\n\n    {\n      title: \"Height\",\n      field: \"height\",\n      type: \"numeric\",\n    },\n    {\n      title: \"Interactive\",\n      field: \"interactive\",\n      lookup: { No: \"No\", Web: \"Web\", TUI: \"TUI\" },\n    },\n    {\n      title: \"Color\",\n      field: \"color\",\n      type: \"string\",\n    },\n    {\n      title: \"LBCS\",\n      field: \"LBCS\",\n      type: \"string\",\n    },\n    {\n      title: \"NAICS\",\n      field: \"NAICS\",\n      type: \"string\",\n    },\n  ],\n  data: createTypesArray(settings.GEOGRID.properties.types),\n};\n\nexport default function TypesEditorMenu() {\n  const [tableState, setTableState] = useState(tableInitialState);\n  const dispatch = useDispatch();\n  const [selectedRow, setSelectedRow] = useState();\n  const [rowColor, setRowColor] = useState();\n\n  // redux the type list on every change\n  useEffect(() => {\n    dispatch(\n      updateTypesEditorState({\n        tableData: tableState.data,\n        selectedRow: selectedRow,\n        rowColor: rowColor,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableState, selectedRow, rowColor]);\n\n  return (\n    <MaterialTable\n      title={<Typography variant=\"h4\">Types Editor</Typography>}\n      columns={tableState.columns}\n      data={tableState.data}\n      options={{\n        paging: false,\n        search: true,\n        selection: false,\n        rowStyle: (rowData) => ({\n          backgroundColor:\n            selectedRow && selectedRow.tableData.id === rowData.tableData.id\n              ? rowColor\n              : null,\n        }),\n      }}\n      onRowClick={(evt, row) => {\n        setSelectedRow(row);\n        setRowColor(row.color);\n      }}\n      editable={{\n        // ! new row is added to the end of the table\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            resolve();\n            setTimeout(() => {\n              setTableState((prevState) => {\n                const data = [...prevState.data];\n                newData.id = data.length;\n                data.push(newData);\n                return { ...prevState, data };\n              });\n            }, 50);\n          }),\n        // ! row edit is done by clicking on the row\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            resolve();\n            setTimeout(() => {\n              if (oldData) {\n                setTableState((prevState) => {\n                  const tableData = [...prevState.data];\n                  const index = tableData\n                    .map((object) => object.id)\n                    .indexOf(oldData.id);\n                  tableData[index] = newData;\n                  return { ...prevState, data: tableData };\n                });\n              }\n            }, 50);\n          }),\n        // ! row delete is done by clicking on the icon\n        // onRowDelete: (oldData) => {\n        //   new Promise((resolve) => {\n        //     resolve();\n        //     setTimeout(() => {\n        //       if (oldData) {\n        //         setTableState((prevState) => {\n        //           const tableData = [...prevState.data];\n        //           const index = tableData\n        //             .map((object) => object.id)\n        //             .indexOf(oldData.id);\n        //           tableData.splice(index, 1);\n        //           return { ...prevState, data: tableData };\n        //         });\n        //       }\n        //     }, 1000);\n        //   });\n        // },\n      }}\n    />\n  );\n}\n","import { useState } from \"react\";\nimport axios from \"axios\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport { GridEditorSettings } from \"../../../../settings/settings\";\nimport {cityIOSettings} from \"../../../../settings/settings\";\nimport Typography from \"@mui/material/Typography\";\nimport { useSelector } from \"react-redux\";\nimport Link from \"@mui/material/Link\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\n\nconst reqResponseUI = (response, tableName) => {\n  let cityscopeJSendpoint =\n    \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" + tableName;\n  // create the feedback text\n  let resText = (\n    <Typography color=\"textPrimary\" variant=\"caption\">\n      CityIO is {response.data.status}. Grid deployed to{\" \"}\n      <Link color=\"textSecondary\" href={cityscopeJSendpoint}>\n        {cityscopeJSendpoint}\n      </Link>\n    </Typography>\n  );\n  return resText;\n};\n\nconst makeGEOGRIDobject = (struct, typesList, geoJsonFeatures, gridProps) => {\n  let GEOGRIDObject = { ...struct };\n\n  // take types list and prepare to csJS format\n  let newTypesList = {};\n  typesList.forEach((oldType) => {\n    newTypesList[oldType.name] = { ...oldType };\n    //material-table creates strings for these items\n    // so in first \"Commit to cityIO\", these must be turned into\n    // Json objects. On Second commit, these are already objects,\n    // hence the two conditions below\n    newTypesList[oldType.name].LBCS =\n      typeof oldType.LBCS === \"string\"\n        ? JSON.parse(oldType.LBCS)\n        : oldType.LBCS;\n    newTypesList[oldType.name].NAICS =\n      typeof oldType.NAICS === \"string\"\n        ? JSON.parse(oldType.NAICS)\n        : oldType.NAICS;\n  });\n\n  GEOGRIDObject.properties.types = newTypesList;\n  // inject table props to grid\n  GEOGRIDObject.properties.header = { ...gridProps };\n\n  const toFloatArray = [\n    \"longitude\",\n    \"latitude\",\n    \"rotation\",\n    \"nrows\",\n    \"ncols\",\n    \"cellSize\",\n  ];\n  toFloatArray.forEach((element) => {\n    GEOGRIDObject.properties.header[element] = parseFloat(\n      GEOGRIDObject.properties.header[element]\n    );\n  });\n\n  // lastly get the grid features\n  GEOGRIDObject.features = geoJsonFeatures;\n  return GEOGRIDObject;\n};\n\nconst makeGEOGRIDDATAobject = (geoJsonFeatures) => {\n  let GEOGRIDDATA_object = [];\n  geoJsonFeatures.forEach((element) => {\n    GEOGRIDDATA_object.push(element.properties);\n  });\n  return GEOGRIDDATA_object;\n};\n\nexport default function CommitGridMenu() {\n  const [loading, setLoading] = useState(false);\n  const [reqResponse, setReqResponse] = useState();\n  const gridProps = useSelector((state) => state.editorMenuState.gridProps);\n  const typesList = useSelector(\n    (state) => state.editorMenuState.typesEditorState.tableData\n  );\n\n  const generatedGrid = useSelector((state) => state.editorMenuState.gridMaker);\n  const generatedGridBool =\n    generatedGrid &&\n    generatedGrid.features &&\n    generatedGrid.features.length > 0;\n\n  const postGridToCityIO = () => {\n    let GEOGRIDStructure = GridEditorSettings.GEOGRID;\n    let geoJsonFeatures = generatedGrid.features;\n    // take grid struct from settings\n    let GEOGRIDObject = makeGEOGRIDobject(\n      GEOGRIDStructure,\n      typesList,\n      geoJsonFeatures,\n      gridProps\n    );\n\n    let GEOGRIDDATAObject = makeGEOGRIDDATAobject(geoJsonFeatures);\n    let tableName = GEOGRIDObject.properties.header.tableName.toLowerCase();\n\n    // post to cityIO server \n    const gridPOSToptions = (URL, DATA) => {\n      return {\n        method: \"post\",\n        url: URL,\n        data: DATA,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      };\n    };\n  \n    const table_url = `${cityIOSettings.cityIO.baseURL}table/${tableName}/`;\n    const new_table_grid = {\n      GEOGRID: GEOGRIDObject,\n      GEOGRIDDATA: GEOGRIDDATAObject,\n    };\n\n    axios(gridPOSToptions(table_url, new_table_grid))\n      .then(function (response) {\n        setReqResponse(reqResponseUI(response, tableName));\n      })\n      .catch((error) => console.log(`ERROR: ${error}`));\n  };\n\n  return (\n    <>\n      {generatedGridBool && (\n        <>\n          <LoadingButton\n            onClick={() => {\n              setLoading(true);\n              new Promise((resolve) => {\n                setTimeout(() => {\n                  setLoading(false);\n                  postGridToCityIO();\n                }, 1500);\n                resolve();\n              });\n            }}\n            loading={loading}\n            loadingPosition=\"start\"\n            variant=\"outlined\"\n            startIcon={<CloudUploadIcon />}\n          >\n            Commit Grid to cityIO\n          </LoadingButton>\n\n          <div style={{ width: \"100%\" }}> {reqResponse}</div>\n        </>\n      )}\n    </>\n  );\n}\n","import { List, Grid, ListItem, Typography, Card, CardContent } from \"@mui/material\";\nimport ResizableDrawer from \"../../../Components/ResizableDrawer\";\nimport GridPropsMenu from \"./GridPropsMenu\";\nimport GridMakerMenu from \"./GridMakerMenu\";\nimport TypesEditorMenu from \"./TypesEditorMenu\";\nimport CommitGridMenu from \"./CommitGridMenu\";\n\nexport default function EditorMenu() {\n  const menuItemsArray = [\n    <Typography variant=\"h2\">CityScope Grid Editor</Typography>,\n    <Typography>\n      This editor can create and `commit` spatial layouts (`grids`) as a\n      baseline for CityScope projects. Use the menus and map to edit girds,\n      types, and props, and commit them to cityIO.\n    </Typography>,\n    <GridPropsMenu />,\n    <Grid container spacing={2}>\n      <Grid item>\n        <GridMakerMenu />\n      </Grid>\n      <Grid item>\n        <CommitGridMenu />\n      </Grid>\n    </Grid>,\n\n    <TypesEditorMenu />,\n  ];\n\n  const MenuItems = () => {\n    const m = [];\n\n    menuItemsArray.forEach((item, index) => {\n      m.push(\n        <ListItem key={index}>\n          <Card variant=\"outlined\" sx={{ width: \"100%\" }}>\n            <CardContent>{item}</CardContent>\n          </Card>\n        </ListItem>\n      );\n    });\n    return m;\n  };\n\n  return (\n    <ResizableDrawer direction={\"left\"} width={500}>\n      <List>\n        <MenuItems />\n      </List>\n    </ResizableDrawer>\n  );\n}\n","import EditorMap from \"./EditorMap\";\nimport EditorMenu from \"./EditorMenu\";\n\nexport default function GridEditor() {\n  return (\n    <>\n      <EditorMenu />\n      <EditorMap />\n    </>\n  );\n}\n","import CityScopeJS from \"./views/CityScopeJS\";\nimport { CssBaseline } from \"@mui/material/\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport theme from \"./theme\";\nimport { useState, useEffect } from \"react\";\nimport CityIOviewer from \"./views/CityIOviewer\";\nimport ProjectionMapping from \"./views/ProjectionMapping\";\nimport { useDispatch } from \"react-redux\";\nimport { updateCityIOtableName } from \"./redux/reducers/cityIOdataSlice\";\nimport GridEditor from \"./views/GridEditor\";\nimport queryString from \"query-string\";\n\n/**\nget this tab URL and parse as a simple router to show the correct view\n **/\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const [tableName, setTableName] = useState();\n\n  // change the document title to the table name\n  useEffect(() => {\n    document.title = tableName ? `CityScopeJS | ${tableName}` : \"CityScopeJS\";\n  }, [tableName]);\n\n  const [viewSelectorState, setViewSelectorState] = useState();\n\n  const selectView = (view) => {\n    const parsed = queryString.parse(window.location.search);\n    const cityIOtableName =\n      Object.values(parsed)[0] && Object.values(parsed)[0].toLowerCase();\n    // check if tableName is a valid tableName\n    if (cityIOtableName && cityIOtableName !== \"\") {\n      setTableName(cityIOtableName);\n      dispatch(updateCityIOtableName(cityIOtableName));\n      setViewSelectorState(view);\n    } else {\n      setViewSelectorState(\"cityio\");\n    }\n  };\n\n  // on init, get the adress URL to search for  a table\n  useEffect(() => {\n    const location = window.location;\n    const parsed = queryString.parse(location.search);\n\n    //a switch for the location.search and the parsed.tableName\n    switch (Object.keys(parsed)[0]) {\n      case \"cityscope\":\n        selectView(\"cityscopejs\");\n        break;\n      case \"projection\":\n        // check if this location has a tableName\n        selectView(\"projection\");\n        break;\n      case \"editor\":\n        // ! to get the table name for editing (not used yet)\n        setViewSelectorState(\"grideditor\");\n        break;\n      default:\n        setViewSelectorState(\"cityio\");\n        break;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <>\n        {/* otherwise show the editor  */}\n        {viewSelectorState === \"cityscopejs\" && <CityScopeJS />}\n        {/* otherwise show the editor  */}\n        {viewSelectorState === \"grideditor\" && <GridEditor />}\n        {/* otherwise, show the cityIOviewer */}\n        {viewSelectorState === \"cityio\" && <CityIOviewer />}\n        {/* otherwise, show the cityIOviewer */}\n        {viewSelectorState === \"projection\" && <ProjectionMapping />}\n      </>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const animationSlice = createSlice({\n  name: \"menuState\",\n  initialState: {\n    animationTime: 0,\n  },\n  reducers: {\n    updateAnimationTimeState: (state, action) => {\n      state.animationTime = action.payload;\n    },\n  },\n});\n\nexport const { updateAnimationTimeState } = animationSlice.actions;\nexport default animationSlice.reducer;\n","import { combineReducers } from \"redux\";\nimport cityIOdataSliceReducer from \"./cityIOdataSlice\";\nimport menuSliceReducer from \"./menuSlice\";\nimport editorMenuSliceReducer from \"./editorMenuSlice\";\nimport animationSliceReducer from \"../../Components/_wip_animation/_animationSlice\"; \n\nexport default combineReducers({\n  cityIOdataState: cityIOdataSliceReducer,\n  menuState: menuSliceReducer,\n  editorMenuState: editorMenuSliceReducer,\n  animationState: animationSliceReducer,\n});\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./redux/reducers\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nReactDOM.render(\n  <>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}