{"version":3,"sources":["theme/GlobalStyles.js","theme/typography.js","theme/index.js","layouts/MainLayout/NavBar/NavItem.js","layouts/MainLayout/NavBar/index.js","layouts/MainLayout/TopBar.js","layouts/MainLayout/index.js","layouts/Page.js","views/Errors/NotFoundView.js","views/GridEditor/EditorMap/EditorBrush.js","redux/actions.js","views/GridEditor/EditorMap/EditorMap.js","views/GridEditor/EditorMenu/TypesEditor/index.js","views/GridEditor/EditorMenu/GridProps/GridMaker/gridCreator.js","views/GridEditor/EditorMenu/GridProps/GridMaker/index.js","views/GridEditor/EditorMenu/GridProps/CommitGrid/index.js","views/GridEditor/EditorMenu/GridProps/CenterMapButton/CenterMapButton.js","views/GridEditor/EditorMenu/GridProps/index.js","views/GridEditor/EditorMenu/index.js","views/GridEditor/index.js","views/CityScopeJS/CityIO/utils.js","views/CityScopeJS/CityIO/cityIO.js","redux/initialState.js","redux/reducer.js","redux/store.js","views/CityScopeJS/DeckglMap/utils/BaseMapUtils.js","views/CityScopeJS/MenuContainer/EditMenu/TypeInfo.js","views/CityScopeJS/MenuContainer/EditMenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/ABMLegend.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/styles.js","views/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/AccessSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/index.js","views/CityScopeJS/MenuContainer/SaveMenu/components/SaveAsScenario/index.js","views/CityScopeJS/MenuContainer/SaveMenu/components/ScenarioItems/index.js","views/CityScopeJS/MenuContainer/SaveMenu/index.js","views/CityScopeJS/MenuContainer/index.js","views/CityScopeJS/DeckglMap/components/PaintBrush/PaintBrush.js","views/CityScopeJS/DeckglMap/components/CellMeta.js","views/CityScopeJS/DeckglMap/components/PaintBrush/index.js","views/CityScopeJS/DeckglMap/components/AnimationComponent.js","views/CityScopeJS/DeckglMap/utils/EffectsUtils.js","views/CityScopeJS/DeckglMap/deckglLayers/AccessLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/AggregatedTripsLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/ABMLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GridLayer.js","views/CityScopeJS/DeckglMap/index.js","views/CityScopeJS/CityIO/LoadingSpinner/index.js","views/Errors/MissingTableInfo.js","views/CityScopeJS/VisContainer/Radar/index.js","views/CityScopeJS/VisContainer/BarChart/index.js","views/CityScopeJS/VisContainer/AreaCalc/index.js","views/CityScopeJS/VisContainer/index.js","views/CityScopeJS/ProjectionMapping/Components/PrjDeckGLMap.js","views/CityScopeJS/ProjectionMapping/Components/util.ts","views/CityScopeJS/ProjectionMapping/Components/anchor.tsx","views/CityScopeJS/ProjectionMapping/Components/Keystoner.tsx","views/CityScopeJS/ProjectionMapping/Components/deleteLocalStorage.js","views/CityScopeJS/ProjectionMapping/index.js","views/CityScopeJS/index.js","views/SplashScreen/GetGITdate.js","views/SplashScreen/index.js","routes.js","App.js","redux/Provider.js","index.js"],"names":["useStyles","makeStyles","createStyles","boxSizing","margin","padding","html","height","width","body","backgroundColor","a","textDecoration","GlobalStyles","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","h1","fontWeight","letterSpacing","h2","h3","h4","h5","h6","overline","theme","createMuiTheme","zIndex","appBar","palette","background","default","paper","dark","primary","main","light","secondary","text","colors","grey","shape","borderRadius","overrides","MuiListItem","root","boxShadow","button","MuiAppBar","colorPrimary","color","MuiDivider","opacity","MuiCard","MuiButton","item","display","paddingTop","paddingBottom","justifyContent","textTransform","icon","marginRight","spacing","title","active","fontWeightBold","NavItem","className","href","Icon","rest","classes","ListItem","clsx","disableGutters","Button","activeClassName","component","RouterLink","to","size","items","HomeIcon","MapIcon","BarChartIcon","mobileDrawer","top","NavBar","onMobileClose","openMobile","location","useLocation","useEffect","pathname","content","Box","flexDirection","p","List","map","style","key","flexGrow","Card","elevation","CardContent","position","Fab","Typography","align","variant","Date","getFullYear","Drawer","anchor","onClose","open","defaultProps","TopBar","onMobileNavOpen","AppBar","Toolbar","IconButton","onClick","name","overflow","flex","MainLayout","useState","navMenuState","setNavMenuState","Page","forwardRef","ref","children","Helmet","image","marginTop","maxWidth","NotFoundView","Container","SelectionTarget","props","mousePos","selectedType","divSize","colorTrans","mouseX","clientX","mouseY","clientY","border","mouseDown","borderColor","pointerEvents","left","getCityioData","data","type","listenToSlidersEvents","listenToEditMenu","setReadyState","setLoadingState","setScenarioNames","addLoadingModules","removeLoadingModules","listenToGridCreator","listenToRowEdits","listenToBaseMapCenter","_hexToRgb","hex","result","exec","parseInt","BaseMap","_toggleOrthoView","viewState","orthographic","menu","includes","_onViewStateChange","setState","componentDidUpdate","prevProps","mapCenter","state","latitude","latCenter","longitude","lonCenter","pitch","bearing","_mulipleObjPicked","e","dim","pickingRadius","x","y","deckGL","pickObjects","_handleGridcellEditing","interactive","multiSelectedObj","forEach","selected","thisCellProps","object","properties","selectedCellsState","_renderSelectionTarget","_handleKeyUp","keyDownState","_handleKeyDown","nativeEvent","draggingWhileEditing","settings","initialViewState","dirLightSettings","timestamp","UTC","intensity","_shadow","this","_rightClickViewRotate","_setViewStateToTableHeader","GEOGRID","header","zoom","document","getElementById","addEventListener","evt","preventDefault","layers","push","GeoJsonLayer","id","stroked","filled","wireframe","createdGrid","visible","pickable","extruded","lineWidthScale","lineWidthMinPixels","getElevation","d","getFillColor","event","cellInfo","rightButton","onDrag","onDragStart","onDragEnd","updateTriggers","transitions","onKeyDown","onKeyUp","onMouseMove","onMouseUp","onMouseDown","deck","onViewStateChange","_renderLayers","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","reuseMaps","mapboxApiAccessToken","process","mapStyle","sat","preventStyleDiffing","Component","mapDispatchToProps","connect","ROW_EDIT","BASE_MAP_CENTER","GRID_CREATED","TypesEditor","React","columns","field","lookup","No","Web","TUI","LanduseTypesList","typesArray","Object","keys","description","LBCS","JSON","stringify","NAICS","createtypesArray","types","dispatch","useDispatch","selectedRow","setSelectedRow","rowColor","setRowColor","Grid","container","xs","s","m","l","xl","options","paging","search","selection","rowStyle","rowData","tableData","onRowClick","row","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","onRowUpdate","oldData","indexOf","onRowDelete","splice","deg_to_rad","deg","Math","PI","rad_to_deg","rad","randomProperty","obj","length","random","GridMaker","reduxState","useSelector","handleGridCreation","grid","gridProps","typesList","top_left_lon","parseFloat","top_left_lat","rotation","userPrj","projection","cell_size","cellSize","nrows","ncols","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","i","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","features","rndType","geojsonPolygon","geometry","coordinates","polygon_xy","polygon_ll","v","ll","gridCreator","TYPES_LIST","startIcon","makeGEOGRIDobject","struct","geoJsonFeatures","GEOGRID_object","newTypesList","oldType","parse","CommitGrid","reqResonse","setReqResonse","hasGrid","postGridToCityIO","GEOGRIDstruct","GEOGRIDDATA_object","element","makeGEOGRIDDATAobject","tableName","toLowerCase","requestsList","geoGridURL","geoGridDataURL","geoGridOptions","URL","DATA","method","url","headers","Accept","axios","then","response","cityscopeJSendpoint","status","Link","reqResonseUI","console","log","catch","error","dataStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","appendChild","click","remove","downloadObjectAsJson","CenterMapButton","GridProps","notchedOutline","borderWidth","flexWrap","tz","formValues","setformValues","handleChangeForm","target","value","noValidate","autoComplete","TextField","InputProps","onChange","textField","label","defaultValue","inputProps","max","min","helperText","EditorMenu","GridEditor","md","maxHeight","EditorMap","getScenarioIndices","cityIO","baseURL","get","res","scenarioIndices","filter","str","replace","promises","getScenarioName","all","r","err","getAPICall","CityIO","hashId","setHashId","hashes","setHashes","cityioURL","cityioData","CITYIO","update","newHashId","interval","newHashes","loadingModules","pickedModules","cityIOmodules","module","modules","modulesData","reduce","k","timer","clearTimeout","getModules","listOfToggles","toggles","menuInitState","values","showOnInit","initialState","MENU","SCENARIO_NAMES","MAP","LOADING_MODULES","SLIDERS","time","ABM","startSimHour","currentSimHour","endSimHour","speed","animationSpeed","ABM_MODE","ACCESS_TOGGLE","SELECTED_TYPE","READY","LOADING","reducer","action","Set","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","hexToRgb","testHex","hexString","test","_proccessGridData","GEOGRIDDATA","_proccessAccessData","accessData","access","heatmap","_postMapEditsToCityIO","endPoint","expectUpdateModules","val","expectUpdate","cityIOKeys","getState","has","setSelectedCellsState","deckGLRef","current","_multipleObjPicked","TypeInfo","COLOR_SCALE","hoveredRadial","setHoveredRadial","typeInfo","attr","index","angle","proportion","use","careateData","colorType","animation","innerRadius","radialRadius","radius","getLabel","showLabels","getAngle","onValueMouseOver","onSeriesMouseOut","padAngle","gutterBottom","selectedIndex","setSelectedIndex","marks","parseTypeInfo","iconsArr","col","rgbCol","typeHasHeightProps","alignItems","typeProps","ListItemAvatar","Avatar","charAt","ListItemText","Collapse","in","Slider","valueLabelDisplay","getAriaLabel","toString","Divider","createTypesIcons","marginLeft","subtitle1","subtitle2","ABMLegend","tripsAttr","trips","tripsData","modes","mode","profiles","profile","tripTypeValue","string","legendData","prepareLegendData","ABMSubmenu","sliders","settripTypeValue","FormControl","RadioGroup","aria-label","FormControlLabel","control","Radio","newValue","aria-labelledby","ShadowSubmenu","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","c","startColor","endColor","startTitle","endTitle","ListItemSecondaryAction","Switch","edge","checked","TogglesMenu","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","thisToggle","displayName","ABM2","SaveAsScenario","setOpen","setName","toggleDrawer","handleClose","scenarioNames","postScenario","info","disabled","Dialog","DialogTitle","DialogContent","DialogContentText","autoFocus","fullWidth","DialogActions","newScenarioIndex","getScenarioIndex","ScenarioItems","scenario","getScenario","deleteScenario","SaveMenu","MenuContainer","updatedMenuState","PaintBrush","hoveredCells","isInteractiveCell","msg","CellMeta","hoveredObj","PaintBrushContainer","editOn","AnimationComponent","animationFrame","cancelAnimationFrame","_animate","rotateOn","ABMOn","updaters","sunEffects","setViewState","startHour","endHour","t","updateSunDirection","requestAnimationFrame","bind","currentDateMidnight","setHours","_setupSunEffects","effectsRef","tableHeader","ambientLight","AmbientLight","dirLight","_SunLight","lightingEffect","LightingEffect","shadowColor","thisLocationTime","getTime","date","directionalLights","getMonth","getDay","getHours","getMinutes","getSeconds","AccessLayer","HeatmapLayer","colorRange","radiusPixels","threshold","getPosition","getWeight","AggregatedTripsLayer","ABMmode","PathLayer","getPath","noisePath","path","getColor","getWidth","ABMLayer","zoomLevel","TripsLayer","getTimestamps","timestamps","widthScale","rounded","trailLength","currentTime","GridLayer","setDraggingWhileEditing","setHoveredObj","onHover","Map","setKeyDownState","setMousePos","setMouseDown","setAccess","setGEOGRID","setABM","loaded","setLoaded","useRef","shadowsOn","resetViewOn","dataProps","layersKey","AGGREGATED_TRIPS","GRID","ACCESS","layerOrder","layer","effects","asyncRender","LoadingSpinner","bottom","right","LinearProgress","MissingTableInfo","Radar","radarData","setRadarData","indicators","f","domains","viz_type","ref_value","domain","createRadarData","polygons","fillOpacity","strokeWidth","axes","fill","labels","textAnchor","radarSize","stroke","tickValues","Array","BarChart","barChartData","setBarChartData","hoveredNode","setHoveredNode","generateData","dataArr","alignContent","xType","stackBy","yDomain","tickLabelAngle","AreaCalc","areaData","setAreaData","geoGridData","calcAreaObj","gridCellData","typeName","hasOwnProperty","count","area","g","b","valToHex","rgbToHex","radialData","calcArea","labelsRadiusMultiplier","labelsStyle","font","textShadow","VisContainer","cityIOdata","PrjDeckGLMap","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","vectorToTransform","vector","styles","cursor","anchorSize","AnchorComponent","translation","onMouseEnter","transform","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","Keystoner","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","onAnchorMouseUp","isEditMode","newVector","getBoundingClientRect","localStorage","getItem","ls","setItem","removeEventListener","anchorStyle","anchorClassName","DeleteLocalStorage","justify","ProjectionMapping","_clearLocalStraoge","removeItem","reload","CityScopeJS","setTableName","pre","cityscopePrjName","substring","isReady","direction","GetGITdate","author","branch","sha","link","gitMeta","setGitMeta","fetch","json","commit","gridCell","textAlign","divider","SplashScreen","routes","App","routing","useRoutes","ThemeProvider","ProviderWrapper","ReactDOM","render","Provider"],"mappings":"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","file":"static/js/main.7034e610.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        \"@global\": {\n            \"*\": {\n                boxSizing: \"border-box\",\n                margin: 0,\n                padding: 0,\n            },\n            html: {\n                \"-webkit-font-smoothing\": \"antialiased\",\n                \"-moz-osx-font-smoothing\": \"grayscale\",\n                height: \"100%\",\n                width: \"100%\",\n            },\n            body: {\n                backgroundColor: \"#18191a\",\n                height: \"100%\",\n                width: \"100%\",\n            },\n            a: {\n                textDecoration: \"none\",\n            },\n            \"#root\": {\n                height: \"100%\",\n                width: \"100%\",\n            },\n        },\n    })\n);\n\nconst GlobalStyles = () => {\n    useStyles();\n\n    return null;\n};\n\nexport default GlobalStyles;\n","const typography = {\n    fontFamily: `\"Roboto Mono\", sans-serif`,\n    fontSize: 14,\n    fontWeightLight: 100,\n    fontWeightRegular: 500,\n    fontWeightMedium: 700,\n\n    h1: {\n        fontWeight: 700,\n        fontSize: 45,\n        letterSpacing: \"-1px\",\n    },\n    h2: {\n        fontWeight: 800,\n        fontSize: 29,\n        letterSpacing: \"-0.24px\",\n    },\n    h3: {\n        fontWeight: 700,\n        fontSize: 24,\n        letterSpacing: \"-0.06px\",\n    },\n    h4: {\n        fontWeight: 500,\n        fontSize: 20,\n        letterSpacing: \"-0.06px\",\n    },\n    h5: {\n        fontWeight: 500,\n        fontSize: 16,\n        letterSpacing: \"-0.05px\",\n    },\n    h6: {\n        fontWeight: 500,\n        fontSize: 14,\n        letterSpacing: \"-0.05px\",\n    },\n    overline: {\n        fontWeight: 500,\n    },\n};\n\nexport default typography;\n","import { createMuiTheme, colors } from \"@material-ui/core\";\nimport typography from \"./typography\";\n\nconst theme = createMuiTheme({\n    zIndex: {\n        appBar: 1500,\n    },\n    palette: {\n        background: {\n            default: \"#ff5278\",\n            paper: \"#18191a\",\n            dark: \"#ff5278\",\n        },\n        primary: {\n            main: \"#FFF\",\n            light: \"#ff5278\",\n        },\n        secondary: {\n            main: \"#ff5278\",\n        },\n        text: {\n            primary: colors.grey[100],\n            secondary: \"#ff5278\",\n        },\n    },\n\n    typography,\n    shape: {\n        borderRadius: 20,\n    },\n\n    overrides: {\n        MuiListItem: {\n            root: {\n                \"&$selected\": {\n                    backgroundColor: \"#18191a\",\n                    boxShadow:\n                        \"12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)\",\n                    \"&:hover\": {\n                        backgroundColor: \"#ff5278\",\n                    },\n                },\n            },\n            button: {\n                \"&:hover\": {\n                    backgroundColor: \"#ff5278\",\n                },\n            },\n        },\n        MuiAppBar: {\n            colorPrimary: { backgroundColor: \"#18191a\", color: \"#FFF\" },\n        },\n        MuiDivider: {\n            root: {\n                backgroundColor: \"#FFF\",\n                opacity: 0.1,\n            },\n        },\n        MuiCard: {\n            root: {\n                boxShadow:\n                    \"12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)\",\n            },\n        },\n        MuiButton: {\n            root: {\n                boxShadow:\n                    \"12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)\",\n                \"&:hover\": {\n                    boxShadow:\n                        \"12px 12px 16px 0  #000,-2px -2px 16px 0  #ff5278\",\n                },\n                width: \"100%\",\n            },\n        },\n    },\n});\n\nexport default theme;\n","import React from \"react\";\nimport { NavLink as RouterLink } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport { Button, ListItem, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    item: {\n        display: \"flex\",\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n    button: {\n        color: theme.palette.text.main,\n        fontWeight: theme.typography.fontWeightMedium,\n        justifyContent: \"flex-start\",\n        letterSpacing: 0,\n        padding: \"10px 8px\",\n        textTransform: \"none\",\n        width: \"100%\",\n    },\n    icon: {\n        marginRight: theme.spacing(1),\n    },\n    title: {\n        marginRight: \"auto\",\n    },\n    active: {\n        color: theme.palette.text.secondary,\n        \"& $title\": {\n            fontWeight: theme.typography.fontWeightBold,\n        },\n        \"& $icon\": {\n            color: theme.palette.text.secondary,\n        },\n    },\n}));\n\nconst NavItem = ({ className, href, icon: Icon, title, ...rest }) => {\n    const classes = useStyles();\n\n    return (\n        <ListItem\n            className={clsx(classes.item, className)}\n            disableGutters\n            {...rest}\n        >\n            <Button\n                activeClassName={classes.active}\n                className={classes.button}\n                component={RouterLink}\n                to={href}\n            >\n                {Icon && <Icon className={classes.icon} size=\"20\" />}\n                <span className={classes.title}>{title}</span>\n            </Button>\n        </ListItem>\n    );\n};\n\nNavItem.propTypes = {\n    className: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.elementType,\n    title: PropTypes.string,\n};\n\nexport default NavItem;\n","import React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport {\n    Box,\n    Drawer,\n    Fab,\n    List,\n    Typography,\n    makeStyles,\n    Card,\n    CardContent,\n} from \"@material-ui/core\";\nimport {\n    BarChart as BarChartIcon,\n    Map as MapIcon,\n    Home as HomeIcon,\n} from \"react-feather\";\nimport NavItem from \"./NavItem\";\n\nconst items = [\n    {\n        href: \"/home\",\n        icon: HomeIcon,\n        title: \"Home\",\n    },\n\n    {\n        href: \"/\",\n        icon: MapIcon,\n        title: \"CityScopeJS\",\n    },\n    {\n        href: \"/editor\",\n        icon: BarChartIcon,\n        title: \"Grid Editor\",\n    },\n];\n\nconst useStyles = makeStyles(() => ({\n    mobileDrawer: {\n        width: \"30vw\",\n        top: 48,\n        height: \"calc(100% - 48px)\",\n        boxShadow:\n            \"22px 22px 22px 0 rgba(0,0,0)\",\n    },\n}));\n\nconst NavBar = ({ onMobileClose, openMobile }) => {\n    const classes = useStyles();\n    const location = useLocation();\n\n    useEffect(() => {\n        if (openMobile && onMobileClose) {\n            onMobileClose();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [location.pathname]);\n\n    const content = (\n        <Box height=\"100%\" display=\"flex\" flexDirection=\"column\" p={3}>\n            <List>\n                {items.map((item) => (\n                    <NavItem\n                        style={{ padding: \"2vh\" }}\n                        href={item.href}\n                        key={item.title}\n                        title={item.title}\n                        icon={item.icon}\n                    />\n                ))}\n            </List>\n\n            <Box flexGrow={1} />\n            <Card elevation={5} p={2}>\n                <CardContent position={\"bottom\"}>\n                    <Fab\n                        href=\"http://github.com/CityScope/CS_cityscopeJS/\"\n                        color=\"default\"\n                        size=\"small\"\n                    >\n                        <GitHubIcon />\n                    </Fab>\n                    <Box p={2} />\n                    <Typography align=\"left\" variant=\"h5\">\n                        MIT CityScope\n                    </Typography>\n                    <Typography align=\"left\" variant=\"caption\">\n                        {new Date().getFullYear()}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </Box>\n    );\n\n    return (\n        <>\n            <Drawer\n                anchor=\"left\"\n                classes={{ paper: classes.mobileDrawer }}\n                onClose={onMobileClose}\n                open={openMobile}\n                elevation={10}\n                variant=\"persistent\"\n            >\n                {content}\n            </Drawer>\n        </>\n    );\n};\n\nNavBar.propTypes = {\n    onMobileClose: PropTypes.func,\n    openMobile: PropTypes.bool,\n};\n\nNavBar.defaultProps = {\n    onMobileClose: () => {},\n    openMobile: false,\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\n\nimport {\n    AppBar,\n    IconButton,\n    Toolbar,\n    Typography,\n    makeStyles,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles(() => ({\n    root: {},\n}));\n\nconst TopBar = ({ className, onMobileNavOpen, ...rest }) => {\n    const classes = useStyles();\n\n    return (\n        <AppBar\n            className={clsx(classes.root, className)}\n            elevation={5}\n            {...rest}\n        >\n            <Toolbar variant=\"dense\">\n                <IconButton color=\"inherit\" onClick={onMobileNavOpen}>\n                    <MenuIcon />\n                </IconButton>\n                <RouterLink to=\"/\">\n                    <Typography\n                        className={classes.name}\n                        color=\"textPrimary\"\n                        variant=\"h5\"\n                    >\n                        MIT CityScope\n                    </Typography>\n                </RouterLink>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nTopBar.propTypes = {\n    className: PropTypes.string,\n    onMobileNavOpen: PropTypes.func,\n};\n\nexport default TopBar;\n","import React, { useState } from \"react\";\nimport { Outlet } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core\";\nimport NavBar from \"./NavBar\";\nimport TopBar from \"./TopBar\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background,\n        display: \"flex\",\n        height: \"100%\",\n        overflow: \"hidden\",\n        width: \"100%\",\n    },\n\n    content: {\n        paddingTop: 48,\n        flex: \"1 1 auto\",\n        height: \"100vh\",\n        overflow: \"auto\",\n    },\n}));\n\nconst MainLayout = () => {\n    const classes = useStyles();\n    const [navMenuState, setNavMenuState] = useState(true);\n\n    return (\n        <div className={classes.root}>\n            <NavBar openMobile={!navMenuState} />\n            <TopBar onMobileNavOpen={() => setNavMenuState(!navMenuState)} />\n            <div className={classes.content}>\n                <Outlet />\n            </div>\n        </div>\n    );\n};\n\nexport default MainLayout;\n","import React, { forwardRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport PropTypes from \"prop-types\";\n\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\n    return (\n        <div ref={ref} {...rest}>\n            <Helmet>\n                <title>\n                    CityScopeJS {\">\"} {title}\n                </title>\n            </Helmet>\n            {children}\n        </div>\n    );\n});\n\nPage.propTypes = {\n    children: PropTypes.node.isRequired,\n    title: PropTypes.string,\n};\n\nexport default Page;\n","import React from \"react\";\nimport { Box, Container, Typography, makeStyles } from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background,\n    height: \"100%\",\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n  image: {\n    marginTop: 50,\n    display: \"inline-block\",\n    maxWidth: \"100%\",\n    width: 560,\n  },\n}));\n\nconst NotFoundView = () => {\n  const classes = useStyles();\n\n  return (\n    <Page className={classes.root} title=\"404\">\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Container maxWidth=\"md\">\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h1\">\n            404\n          </Typography>\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h5\">\n            The page you are looking for isn’t here\n          </Typography>\n        </Container>\n      </Box>\n    </Page>\n  );\n};\n\nexport default NotFoundView;\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport default function SelectionTarget(props) {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n    const selectedType = props.selectedType;\n    const divSize = props.divSize;\n\n    const colorTrans =\n        \"rgba(\" +\n        selectedType.color[0] +\n        \",\" +\n        selectedType.color[1] +\n        \",\" +\n        selectedType.color[2] +\n        \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: selectedType.color,\n                color: selectedType.color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\",\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n}\n","/**\n * ACTIONS\n */\nexport const GET_CITYIO_DATA = \"GET_CITYIO_DATA\";\nexport function getCityioData(data) {\n    return { type: GET_CITYIO_DATA, data };\n}\n\nexport const LISTEN_TO_MAP_EVENTS = \"LISTEN_TO_MAP_EVENTS\";\nexport function listenToMapEvents(data) {\n    return { type: LISTEN_TO_MAP_EVENTS, data };\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = \"LISTEN_TO_ABM_SLIDERS\";\nexport function listenToSlidersEvents(data) {\n    return { type: LISTEN_TO_ABM_SLIDERS, data };\n}\n\nexport const LISTEN_TO_ABM_MODE = \"LISTEN_TO_ABM_MODE\";\nexport function listenToABMmode(data) {\n    return { type: LISTEN_TO_ABM_MODE, data };\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = \"LISTEN_TO_ACCESS_TOGGLE\";\nexport function listenToAccessToggle(data) {\n    return { type: LISTEN_TO_ACCESS_TOGGLE, data };\n}\n\nexport const MENU_INTERACTION = \"MENU_INTERACTION\";\nexport function listenToMenuUI(data) {\n    return { type: MENU_INTERACTION, data };\n}\n\nexport const LISTEN_TO_EDIT_MENU = \"LISTEN_TO_EDIT_MENU\";\nexport function listenToEditMenu(data) {\n    return { type: LISTEN_TO_EDIT_MENU, data };\n}\n\nexport const SET_READY_STATE = \"SET_READY_STATE\";\nexport function setReadyState(data) {\n    return { type: SET_READY_STATE, data };\n}\n\nexport const SET_LOADING_STATE = \"SET_LOADING_STATE\";\nexport function setLoadingState(data) {\n    return { type: SET_LOADING_STATE, data };\n}\n\nexport const SET_SCENARIO_NAMES = \"SET_SCENARIO_NAMES\";\nexport function setScenarioNames(data) {\n    return { type: SET_SCENARIO_NAMES, data };\n}\n\nexport const ADD_LOADING_MODULES = \"ADD_LOADING_MODULES\";\nexport function addLoadingModules(data) {\n    return { type: ADD_LOADING_MODULES, data };\n}\n\nexport const REMOVE_LOADING_MODULES = \"REMOVE_LOADING_MODULES\";\nexport function removeLoadingModules(data) {\n    return { type: REMOVE_LOADING_MODULES, data };\n}\n\n/**\n * Editor Actions\n */\n\nexport const LISTEN_TO_GRID_CREATOR = \"LISTEN_TO_GRID_CREATOR\";\nexport function listenToGridCreator(data) {\n    return { type: LISTEN_TO_GRID_CREATOR, data };\n}\n\nexport const LISTEN_TO_ROW_EDIT = \"LISTEN_TO_ROW_EDIT\";\nexport function listenToRowEdits(data) {\n    return { type: LISTEN_TO_ROW_EDIT, data };\n}\n\nexport const LISTEN_TO_TYPES_LIST = \"LISTEN_TO_TYPES_LIST\";\nexport function listeonToTypesList(data) {\n    return { type: LISTEN_TO_TYPES_LIST, data };\n}\n\nexport const LISTEN_TO_BASE_MAP_CENTER = \"LISTEN_TO_BASE_MAP_CENTER\";\nexport function listenToBaseMapCenter(data) {\n    return { type: LISTEN_TO_BASE_MAP_CENTER, data };\n}\n","import React, { Component } from \"react\";\nimport EditorBrush from \"./EditorBrush\";\nimport { connect } from \"react-redux\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport settings from \"../GridEditorSettings.json\";\nimport { listenToBaseMapCenter } from \"../../../redux/actions\";\n\nexport const _hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n};\n\nclass BaseMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 12),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n    }\n\n    _toggleOrthoView = (viewState) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n    };\n\n    _onViewStateChange = ({ viewState }) => {\n        this.setState({ viewState });\n    };\n\n    componentDidUpdate = (prevProps) => {\n        if (this.props.mapCenter !== prevProps.mapCenter)\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    latitude: this.props.mapCenter.latCenter,\n                    longitude: this.props.mapCenter.lonCenter,\n                    pitch: 0,\n                    bearing: 0,\n                    orthographic: false,\n                },\n            });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                latitude: settings.GEOGRID.properties.header.latitude,\n                longitude: settings.GEOGRID.properties.header.longitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 0,\n                orthographic: true,\n            },\n        });\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        if (!this.props.selectedType) return;\n        const { height, name, color, interactive } = this.props.selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n\n        multiSelectedObj.forEach((selected) => {\n            let thisCellProps = selected.object.properties;\n            thisCellProps.color = _hexToRgb(color);\n            thisCellProps.height = parseInt(height);\n            thisCellProps.name = name;\n            if (interactive !== \"No\") {\n                thisCellProps.interactive = interactive;\n            } else {\n                delete thisCellProps.interactive;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        return (\n            this.props.selectedType && (\n                <EditorBrush\n                    mousePos={this.state.mousePos}\n                    selectedType={this.props.selectedType}\n                    divSize={this.state.pickingRadius}\n                    mouseDown={this.state.mouseDown}\n                />\n            )\n        );\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        let layers = [];\n        layers.push(\n            new GeoJsonLayer({\n                id: \"GRID\",\n                opacity: 0.5,\n                stroked: false,\n                filled: true,\n                wireframe: true,\n                data: this.props.createdGrid,\n                visible: true,\n                pickable: true,\n                extruded: true,\n                lineWidthScale: 1,\n                lineWidthMinPixels: 1,\n                getElevation: (d) => d.properties.height,\n                getFillColor: (d) => d.properties.color,\n\n                onClick: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n\n                onDrag: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n                onDragStart: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    ) {\n                        this.setState({ draggingWhileEditing: true });\n                    }\n                },\n                onDragEnd: () => {\n                    this.setState({ draggingWhileEditing: false });\n                },\n                updateTriggers: {\n                    getFillColor: this.state.selectedCellsState,\n                    getElevation: this.state.selectedCellsState,\n                },\n                transitions: {\n                    getFillColor: 500,\n                    getElevation: 500,\n                },\n            })\n        );\n\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {this._renderSelectionTarget()}\n\n                <DeckGL\n                    // sets the cursor on paint\n                    // getCursor={() => \"none\"}\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.sat}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    listenToBaseMapCenter: listenToBaseMapCenter,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedType: state.ROW_EDIT,\n        mapCenter: state.BASE_MAP_CENTER,\n        createdGrid: state.GRID_CREATED,\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap);\n","import MaterialTable from \"material-table\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\nimport {\n    listenToRowEdits,\n    listeonToTypesList,\n    listenToGridCreator,\n} from \"../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport settings from \"../../GridEditorSettings.json\";\n\nexport default function TypesEditor() {\n    const createtypesArray = (LanduseTypesList) => {\n        let typesArray = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            typesArray.push({\n                name: type,\n                description: \"description for: \" + type,\n                color: LanduseTypesList[type].color,\n                height: LanduseTypesList[type].height\n                    ? LanduseTypesList[type].height\n                    : 0,\n\n                LBCS: LanduseTypesList[type].LBCS\n                    ? JSON.stringify(LanduseTypesList[type].LBCS)\n                    : null,\n                NAICS: LanduseTypesList[type].NAICS\n                    ? JSON.stringify(LanduseTypesList[type].NAICS)\n                    : null,\n                interactive: LanduseTypesList[type].interactive,\n            });\n        });\n        return typesArray;\n    };\n\n    const [state, setState] = React.useState({\n        columns: [\n            {\n                title: \"Type\",\n                field: \"name\",\n            },\n            {\n                title: \"Description\",\n                field: \"description\",\n            },\n\n            {\n                title: \"Height\",\n                field: \"height\",\n                type: \"numeric\",\n            },\n            {\n                title: \"Interactive\",\n                field: \"interactive\",\n                lookup: { No: \"No\", Web: \"Web\", TUI: \"TUI\" },\n            },\n            {\n                title: \"Color\",\n                field: \"color\",\n                type: \"string\",\n            },\n            {\n                title: \"LBCS\",\n                field: \"LBCS\",\n                type: \"string\",\n            },\n            {\n                title: \"NAICS\",\n                field: \"NAICS\",\n                type: \"string\",\n            },\n        ],\n        data: createtypesArray(settings.GEOGRID.properties.types),\n    });\n\n    const dispatch = useDispatch();\n    const [selectedRow, setSelectedRow] = useState(null);\n    const [rowColor, setRowColor] = useState(null);\n\n    // redux the type list on every change\n    useEffect(() => {\n        dispatch(listeonToTypesList(state.data));\n    });\n\n    return (\n        <Grid container>\n            <Grid item xs={12} s={12} m={12} l={12} xl={12}>\n                <MaterialTable\n                    title={<Typography variant=\"h2\">Types Editor</Typography>}\n                    // columns={state.columns}\n                    columns={state.columns}\n                    data={state.data}\n                    options={{\n                        paging: false,\n                        search: false,\n                        selection: false,\n                        rowStyle: (rowData) => ({\n                            fontFamily: \"Roboto Mono\",\n                            fontSize: 12,\n                            backgroundColor:\n                                selectedRow === rowData.tableData.id\n                                    ? rowColor\n                                    : null,\n                        }),\n                    }}\n                    onRowClick={(evt, row) => {\n                        setSelectedRow(row.tableData.id);\n                        setRowColor(row.color);\n                        dispatch(listenToRowEdits(row));\n                    }}\n                    editable={{\n                        onRowAdd: (newData) =>\n                            new Promise((resolve) => {\n                                setTimeout(() => {\n                                    resolve();\n                                    setState((prevState) => {\n                                        const data = [...prevState.data];\n                                        data.push(newData);\n                                        return { ...prevState, data };\n                                    });\n                                }, 500);\n                            }),\n                        onRowUpdate: (newData, oldData) =>\n                            new Promise((resolve) => {\n                                setTimeout(() => {\n                                    resolve();\n                                    if (oldData) {\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data[\n                                                data.indexOf(oldData)\n                                            ] = newData;\n\n                                            return { ...prevState, data };\n                                        });\n                                    }\n\n                                    // dispath change to redux\n                                    dispatch(listenToRowEdits(newData));\n                                }, 500);\n                            }),\n                        onRowDelete: (oldData) =>\n                            new Promise((resolve) => {\n                                setTimeout(() => {\n                                    resolve();\n                                    setState((prevState) => {\n                                        const data = [...prevState.data];\n                                        data.splice(data.indexOf(oldData), 1);\n                                        return { ...prevState, data };\n                                    });\n\n                                    dispatch(listenToGridCreator(null));\n                                }, 500);\n                            }),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n","import proj4 from \"proj4\";\nimport { _hexToRgb } from \"../../../EditorMap/EditorMap\";\n\nfunction deg_to_rad(deg) {\n    return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n    return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n    var keys = Object.keys(obj);\n    return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps, typesList) => {\n    let top_left_lon = parseFloat(gridProps.longitude);\n    let top_left_lat = parseFloat(gridProps.latitude);\n    let rotation = parseFloat(gridProps.rotation);\n    let userPrj = gridProps.projection;\n    let cell_size = parseFloat(gridProps.cellSize);\n    let nrows = parseFloat(gridProps.nrows);\n    let ncols = parseFloat(gridProps.ncols);\n\n    const webMercator = proj4.defs(\"EPSG:4326\");\n    let EARTH_RADIUS_M = 6.371e6;\n    let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n    let bearing = (90 - rotation + 360) % 360;\n    let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n    let la1 = deg_to_rad(top_left_lon_lat.lat);\n    let lo1 = deg_to_rad(top_left_lon_lat.lon);\n    let bearing_rad = deg_to_rad(bearing);\n    let la2 = Math.asin(\n        Math.sin(la1) * Math.cos(Ad) +\n            Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n    );\n    let lo2 =\n        lo1 +\n        Math.atan2(\n            Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n            Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n        );\n    let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n    let top_left_xy = proj4(webMercator, userPrj, [\n        top_left_lon_lat.lon,\n        top_left_lon_lat.lat,\n    ]);\n\n    let top_right_xy = proj4(webMercator, userPrj, [\n        top_right_lon_lat.lon,\n        top_right_lon_lat.lat,\n    ]);\n\n    let dydx =\n        (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n    let theta = Math.atan(dydx);\n    let cosTheta = Math.cos(theta);\n    let sinTheta = Math.sin(theta);\n    // create rotate matrix\n    let x_unRot = [];\n    let y_unRot = [];\n    for (let i = 0; i < nrows; i++) {\n        for (let j = 0; j < ncols; j++) {\n            x_unRot.push(j * cell_size);\n            y_unRot.push(-i * cell_size);\n        }\n    }\n\n    let x_rot = [];\n    let y_rot = [];\n    for (let i = 0; i < x_unRot.length; i++) {\n        x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n        y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n    }\n\n    let x_rot_trans = [];\n    let y_rot_trans = [];\n    for (let i = 0; i < x_rot.length; i++) {\n        x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n        y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n    }\n\n    var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n    var dydCol = y_rot_trans[1] - y_rot_trans[0];\n    var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n    var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n    let gridPnts = [];\n    let geojsonFeatureCollection = {\n        type: \"FeatureCollection\",\n        // polygons go here\n        features: [],\n    };\n\n    // get a list of types that is updated based on\n    // the current redux state of the types list table\n    let types = typesList;\n\n    for (let i = 0; i < x_rot_trans.length; i++) {\n        let rndType = randomProperty(types);\n\n        let geojsonPolygon = {\n            type: \"Feature\",\n            geometry: {\n                type: \"Polygon\",\n                coordinates: null,\n            },\n            properties: {\n                color: _hexToRgb(rndType.color),\n                height: rndType.height,\n                name: rndType.name,\n                interactive: rndType.interactive,\n                id: i,\n            },\n        };\n\n        var polygon_xy = [\n            [x_rot_trans[i], y_rot_trans[i]],\n            [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n            [\n                x_rot_trans[i] + dxdRow + dxdCol,\n                y_rot_trans[i] + dydRow + dydCol,\n            ],\n            [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n            [x_rot_trans[i], y_rot_trans[i]],\n        ];\n\n        var polygon_ll = [];\n        for (var v = 0; v < 5; v++) {\n            let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n            polygon_ll.push(ll);\n        }\n\n        geojsonPolygon.geometry.coordinates = [polygon_ll];\n        gridPnts.push(geojsonPolygon);\n    }\n    geojsonFeatureCollection.features = gridPnts;\n    return geojsonFeatureCollection;\n};\n","import React from \"react\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport Button from \"@material-ui/core/Button\";\nimport { gridCreator } from \"./gridCreator\";\nimport { listenToGridCreator } from \"../../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n\nexport default function GridMaker(props) {\n    const dispatch = useDispatch();\n    const reduxState = useSelector((state) => state);\n\n    const handleGridCreation = () => {\n        let grid = gridCreator(props.gridProps, reduxState.TYPES_LIST);\n        dispatch(listenToGridCreator(grid));\n    };\n\n    return (\n        <Button\n            onClick={() => {\n                handleGridCreation();\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<AppsIcon />}\n        >\n            Create Grid\n        </Button>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport axios from \"axios\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSelector } from \"react-redux\";\nimport Link from \"@material-ui/core/Link\";\n\nconst reqResonseUI = (response, tableName) => {\n    let cityscopeJSendpoint =\n        \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" +\n        tableName;\n    // create the feedback text\n    let resText = (\n        <Typography color=\"textPrimary\" variant=\"caption\">\n            CityIO is {response.data.status}. Grid deployed to{\" \"}\n            <Link color=\"textSecondary\" href={cityscopeJSendpoint}>\n                {cityscopeJSendpoint}\n            </Link>\n        </Typography>\n    );\n\n    return resText;\n};\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst makeGEOGRIDobject = (struct, typesList, geoJsonFeatures, gridProps) => {\n    let GEOGRID_object = struct;\n\n    // take types list and prepare to csJS format\n    let newTypesList = {};\n\n    typesList.forEach((oldType) => {\n        newTypesList[oldType.name] = oldType;\n        //material-table creates strings for these items\n        // so in first \"Commit to cityIO\", these must be turned into\n        // Json objects. On Second commit, these are already objects,\n        // hence the two conditions below\n\n        newTypesList[oldType.name].LBCS =\n            typeof oldType.LBCS == \"string\"\n                ? JSON.parse(oldType.LBCS)\n                : oldType.LBCS;\n        newTypesList[oldType.name].NAICS =\n            typeof oldType.NAICS == \"string\"\n                ? JSON.parse(oldType.NAICS)\n                : oldType.NAICS;\n    });\n\n    GEOGRID_object.properties.types = newTypesList;\n\n    // inject table props to grid\n    GEOGRID_object.properties.header = gridProps;\n    GEOGRID_object.properties.header.longitude = parseFloat(\n        GEOGRID_object.properties.header.longitude\n    );\n    GEOGRID_object.properties.header.latitude = parseFloat(\n        GEOGRID_object.properties.header.latitude\n    );\n    GEOGRID_object.properties.header.rotation = parseFloat(\n        GEOGRID_object.properties.header.rotation\n    );\n    GEOGRID_object.properties.header.nrows = parseFloat(\n        GEOGRID_object.properties.header.nrows\n    );\n    GEOGRID_object.properties.header.ncols = parseFloat(\n        GEOGRID_object.properties.header.ncols\n    );\n    GEOGRID_object.properties.header.cellSize = parseFloat(\n        GEOGRID_object.properties.header.cellSize\n    );\n\n    // lastly get the grid features\n    GEOGRID_object.features = geoJsonFeatures;\n    return GEOGRID_object;\n};\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst makeGEOGRIDDATAobject = (geoJsonFeatures) => {\n    let GEOGRIDDATA_object = [];\n    geoJsonFeatures.forEach((element) => {\n        GEOGRIDDATA_object.push(element.properties);\n    });\n    return GEOGRIDDATA_object;\n};\n\nexport default function CommitGrid(props) {\n    const [reqResonse, setReqResonse] = React.useState(null);\n\n    const reduxState = useSelector((state) => state);\n    const hasGrid = reduxState.GRID_CREATED;\n\n    const downloadObjectAsJson = () => {\n        let GEOGRIDstruct = settings.GEOGRID;\n\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        let GEOGRID_object = makeGEOGRIDobject(\n            GEOGRIDstruct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n        var dataStr =\n            \"data:text/json;charset=utf-8,\" +\n            encodeURIComponent(JSON.stringify(GEOGRID_object));\n        var downloadAnchorNode = document.createElement(\"a\");\n        downloadAnchorNode.setAttribute(\"href\", dataStr);\n        downloadAnchorNode.setAttribute(\"download\", \"grid.json\");\n        document.body.appendChild(downloadAnchorNode); // required for firefox\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    };\n\n    const postGridToCityIO = () => {\n        let GEOGRIDstruct = settings.GEOGRID;\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        // take grid struct from settings\n        let GEOGRID_object = makeGEOGRIDobject(\n            GEOGRIDstruct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n\n        let GEOGRIDDATA_object = makeGEOGRIDDATAobject(geoJsonFeatures);\n\n        let tableName = GEOGRID_object.properties.header.tableName.toLowerCase();\n        let requestsList = {\n            geoGridURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRID\",\n\n            geoGridDataURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRIDDATA\",\n        };\n\n        const geoGridOptions = (URL, DATA) => {\n            return {\n                method: \"post\",\n                url: URL,\n                data: DATA,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\",\n                },\n            };\n        };\n\n        axios(geoGridOptions(requestsList.geoGridURL, GEOGRID_object))\n            .then(function (response) {\n                setReqResonse(reqResonseUI(response, tableName));\n            })\n            // then reset GEOGRIDDATA of that new grid\n\n            .then(function () {\n                axios(geoGridOptions(requestsList.geoGridDataURL, {}));\n                console.log(\"removed GEOGRIDDATA\");\n            })\n            .then(function () {\n                axios(\n                    geoGridOptions(\n                        requestsList.geoGridDataURL,\n                        GEOGRIDDATA_object\n                    )\n                );\n                console.log(\"mirrored GEOGRID to GEOGRIDDATA\");\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    return (\n        <>\n            {hasGrid && (\n                <>\n                    <Button\n                        onClick={() => {\n                            postGridToCityIO();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudUploadIcon />}\n                    >\n                        Commit Grid to cityIO\n                    </Button>\n\n                    <Button\n                        onClick={() => {\n                            // ! download as json\n                            downloadObjectAsJson();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudDownloadIcon />}\n                    >\n                        Download JSON\n                    </Button>\n\n                    <div style={{ width: \"100%\" }}> {reqResonse}</div>\n                </>\n            )}\n        </>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CenterFocusStrongIcon from \"@material-ui/icons/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\n\nimport { listenToBaseMapCenter } from \"../../../../../redux/actions\";\n\nexport default function CenterMapButton(props) {\n    const dispatch = useDispatch();\n\n    return (\n        <Button\n            onClick={() => {\n                dispatch(\n                    listenToBaseMapCenter({\n                        latCenter: parseFloat(props.mapCenter[0]),\n                        lonCenter: parseFloat(props.mapCenter[1]),\n                    })\n                );\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<CenterFocusStrongIcon />}\n            style={{ fontSize: \"12px\" }}\n        >\n            Center Map\n        </Button>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GridMaker from \"./GridMaker\";\nimport CommitGrid from \"./CommitGrid\";\nimport CenterMapButton from \"./CenterMapButton/CenterMapButton\";\nimport settings from \"../../GridEditorSettings.json\";\n\nexport default function GridProps() {\n    const useStyles = makeStyles((theme) => ({\n        notchedOutline: {\n            borderWidth: \"1px\",\n            borderColor: theme.palette.text.secondary,\n        },\n        root: {\n            \"& .MuiTextField-root\": {\n                margin: theme.spacing(1),\n                flexWrap: \"wrap\",\n            },\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n    }));\n\n    const [formValues, setformValues] = React.useState({\n        tableName: \"CityScopeJS\",\n        latitude: settings.GEOGRID.properties.header.latitude,\n        longitude: settings.GEOGRID.properties.header.longitude,\n        tz:settings.GEOGRID.properties.header.tz, \n        nrows: settings.GEOGRID.properties.header.nrows,\n        ncols: settings.GEOGRID.properties.header.nrows,\n        rotation: settings.GEOGRID.properties.header.rotation,\n        cellSize: settings.GEOGRID.properties.header.cellSize,\n        projection: settings.GEOGRID.properties.header.projection,\n    });\n\n    const handleChangeForm = (event) => {\n        const { id, value } = event.target;\n        setformValues({ ...formValues, [id]: value });\n    };\n\n    const classes = useStyles();\n\n    //  get all data\n    // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\">\n            <Typography variant=\"h2\">Grid Properties</Typography>\n            <div className={classes.root}>\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"tableName\"\n                    label=\"CityScope Project Name\"\n                    defaultValue={formValues.tableName}\n                />\n            </div>\n            <div className={classes.root}>\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"latitude\"\n                    label=\"Latitude\"\n                    defaultValue={formValues.latitude}\n                    type=\"number\"\n                />\n\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"longitude\"\n                    label=\"Longitude\"\n                    defaultValue={formValues.longitude}\n                    type=\"number\"\n                />\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"tz\"\n                    label=\"Time Zone (GMT)\"\n                    defaultValue={formValues.tz}\n                    type=\"number\"\n                />\n            </div>\n            <div className={classes.root}>\n                <CenterMapButton\n                    mapCenter={[formValues.latitude, formValues.longitude]}\n                />\n            </div>\n            <div className={classes.root}>\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"nrows\"\n                    label=\"Rows\"\n                    defaultValue={formValues.nrows}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 100,\n                            min: 0,\n                        },\n                    }}\n                />\n\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"ncols\"\n                    label=\"Columns\"\n                    defaultValue={formValues.ncols}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 100,\n                            min: 0,\n                        },\n                    }}\n                />\n\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"rotation\"\n                    label=\"Rotation (deg)\"\n                    defaultValue={formValues.rotation}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 360,\n                            min: 0,\n                        },\n                    }}\n                />\n\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"cellSize\"\n                    label=\"Cell Size (m^2)\"\n                    defaultValue={formValues.cellSize}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 1000,\n                            min: 0,\n                        },\n                    }}\n                />\n            </div>\n            <div className={classes.root}>\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    id=\"projection\"\n                    label=\"Projection\"\n                    defaultValue={formValues.projection}\n                    type=\"string\"\n                    helperText=\"Default projection should work for most CityScope cases. Find specific projections at: https://epsg.io/\"\n                />\n            </div>\n            <div className={classes.root}>\n                <GridMaker gridProps={formValues} />\n                <CommitGrid gridProps={formValues} />\n            </div>\n        </form>\n    );\n}\n","// // export default EditMenuMain;\n\nimport React from \"react\";\nimport TypesEditor from \"./TypesEditor\";\nimport GridProps from \"./GridProps\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function EditorMenu() {\n    return (\n        <List>\n            <ListItem>\n                <Typography variant=\"h1\">CityScope Grid Editor</Typography>\n            </ListItem>\n            <ListItem>\n                <Typography>\n                    This tool is for creating CityScope projects with virtual\n                    editable girds, types, and props, and deploy them to cityIO.\n                </Typography>\n            </ListItem>\n            <ListItem>\n                <GridProps />\n            </ListItem>\n            <ListItem>\n                <TypesEditor />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport EditorMap from \"./EditorMap/EditorMap\";\nimport EditorMenu from \"./EditorMenu\";\nimport {\n    makeStyles,\n    Grid,\n    Card,\n    CardContent,\n    Container,\n} from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: \"auto\",\n        height: \"100%\",\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n}));\n\nexport default function GridEditor() {\n    const classes = useStyles();\n\n    return (\n        <Page className={classes.root} title=\"Editor\">\n            <Container maxWidth={false}>\n                <>\n                    <Grid container spacing={5}>\n                        <Grid item xs={12} l={6} md={6} xl={4}>\n                            <Card\n                                elevation={15}\n                                style={{\n                                    maxHeight: \"85vh\",\n                                    overflow: \"auto\",\n                                }}\n                            >\n                                <CardContent>\n                                    <EditorMenu />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        <Grid item xs={12} l={6} md={6} xl={8}>\n                            <Card\n                                elevation={15}\n                                style={{\n                                    height: \"85vh\",\n                                    width: \"100%\",\n                                    position: \"relative\",\n                                }}\n                            >\n                                <CardContent>\n                                    <EditorMap />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </>\n            </Container>\n        </Page>\n    );\n}\n","import axios from \"axios\";\nimport settings from \"../../../settings/settings.json\";\n\nexport const getScenarioIndices = (\n    tableName,\n    setScenarioNames,\n    setLoadingState\n) => {\n    var url = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n    axios\n        .get(url)\n        .then((res) => {\n            const metaDataKeys = Object.keys(res.data);\n            const scenarioIndices = metaDataKeys\n                .filter((str) => str.includes(\"scenarios\"))\n                .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n            const promises = [];\n            for (const id of scenarioIndices) {\n                promises.push(getScenarioName(tableName, id));\n            }\n            Promise.all(promises)\n                .then((res) => {\n                    setScenarioNames(\n                        res.map((r) => ({\n                            name: r.data.name,\n                            id: r.data.id,\n                        }))\n                    );\n                    setLoadingState && setLoadingState(false);\n                })\n                .catch((err) =>\n                    console.log(\"error getting scenario names\", err)\n                );\n        })\n        .catch((err) => {\n            console.log(\"Error getting scenarios\", err);\n        });\n};\n\nexport const getScenarioName = (tableName, id) => {\n    const url =\n        settings.cityIO.baseURL + tableName + \"/scenarios\" + id + \"/info\";\n    return axios.get(url);\n};\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n    setScenarioNames,\n    addLoadingModules,\n    removeLoadingModules,\n} from \"../../../redux/actions\";\nimport settings from \"../../../settings/settings.json\";\nimport { getScenarioIndices } from \"./utils\";\n\nconst getAPICall = async (URL) => {\n    try {\n        // ! should add 'retry' here\n        // ! https://stackoverflow.com/questions/56074531/how-to-retry-5xx-requests-using-axios\n        const response = await axios.get(URL);\n        return response.data;\n    } catch (err) {\n        console.log(err);\n    }\n};\n\nexport default function CityIO(props) {\n    const { tableName } = props;\n    const [hashId, setHashId] = useState(null);\n    const [hashes, setHashes] = useState({});\n    const cityioURL = settings.cityIO.baseURL + tableName;\n    const cityioData = useSelector((state) => state.CITYIO);\n\n    const dispatch = useDispatch();\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    useEffect(() => {\n        const timer = setTimeout(update, settings.cityIO.interval);\n        console.log(\"reading cityIO every\" + settings.cityIO.interval + \"ms\");\n        return () => clearTimeout(timer);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    async function update() {\n        // recursively get hashes\n        const newHashId = await getAPICall(cityioURL + \"/meta/id\");\n        if (hashId !== newHashId) {\n            setHashId(newHashId);\n        }\n        setTimeout(update, settings.cityIO.interval);\n    }\n\n    async function getModules() {\n        const newHashes = await getAPICall(cityioURL + \"/meta/hashes\");\n        const promises = [];\n        const loadingModules = [];\n        const pickedModules = settings.cityIO.cityIOmodules.map((x) => x.name);\n        // for each of the modules in settings, add api call to promises\n        pickedModules.forEach((module) => {\n            if (hashes[module] !== newHashes[module]) {\n                promises.push(getAPICall(cityioURL + \"/\" + module));\n                loadingModules.push(module);\n            } else {\n                promises.push(null);\n            }\n        });\n        dispatch(addLoadingModules(loadingModules));\n        const modules = await Promise.all(promises);\n        setHashes(newHashes);\n\n        // update cityio object with modules data\n        const modulesData = pickedModules.reduce((obj, k, i) => {\n            if (modules[i]) {\n                console.log(`updating ${k}`);\n                return { ...obj, [k]: modules[i] };\n            } else {\n                return obj;\n            }\n        }, cityioData);\n        modulesData.tableName = tableName;\n\n        dispatch(removeLoadingModules(loadingModules));\n\n        // send to cityio\n        dispatch(getCityioData(modulesData));\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        dispatch(setReadyState(true));\n        dispatch(setLoadingState(false));\n    }\n\n    useEffect(() => {\n        //! only update if hashId changes\n        if (!hashId) {\n            return;\n        }\n        // reset the state of loading flag\n        dispatch(setLoadingState(true));\n        // set Scenario Names and Ids\n        getScenarioIndices(tableName, (data) =>\n            dispatch(setScenarioNames(data))\n        );\n        getModules();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [hashId]);\n\n    return null;\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    SCENARIO_NAMES: [],\n    MAP: {},\n    LOADING_MODULES: [],\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.currentSimHour,\n            settings.map.layers.ABM.endSimHour,\n        ],\n        speed: settings.map.layers.ABM.animationSpeed,\n    },\n    ABM_MODE: \"mode\",\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: null,\n    READY: false,\n    LOADING: false,\n\n    /**\n     * ! EDITOR INIT STATE\n     */\n\n    ROW_EDIT: null,\n    BASE_MAP_CENTER: {\n        latCenter: null,\n        lonCenter: null,\n    },\n    TYPES_LIST: null,\n    GRID_CREATED: null,\n};\n\nexport default initialState;\n","import {\n    GET_CITYIO_DATA,\n    MENU_INTERACTION,\n    LISTEN_TO_MAP_EVENTS,\n    LISTEN_TO_ABM_SLIDERS,\n    LISTEN_TO_EDIT_MENU,\n    SET_READY_STATE,\n    SET_LOADING_STATE,\n    SET_SCENARIO_NAMES,\n    LISTEN_TO_ACCESS_TOGGLE,\n    LISTEN_TO_ROW_EDIT,\n    LISTEN_TO_TYPES_LIST,\n    LISTEN_TO_GRID_CREATOR,\n    LISTEN_TO_BASE_MAP_CENTER,\n    LISTEN_TO_ABM_MODE,\n    ADD_LOADING_MODULES,\n    REMOVE_LOADING_MODULES,\n} from \"./actions\";\nimport initialState from \"./initialState\";\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_CITYIO_DATA:\n            return { ...state, CITYIO: action.data };\n        case MENU_INTERACTION:\n            return { ...state, MENU: action.data };\n        case LISTEN_TO_MAP_EVENTS:\n            return { ...state, MAP: action.data };\n        case LISTEN_TO_ABM_SLIDERS:\n            return { ...state, SLIDERS: action.data };\n        case LISTEN_TO_ABM_MODE:\n            return { ...state, ABM_MODE: action.data };\n        case LISTEN_TO_ACCESS_TOGGLE:\n            return { ...state, ACCESS_TOGGLE: action.data };\n        case LISTEN_TO_EDIT_MENU:\n            return { ...state, SELECTED_TYPE: action.data };\n        case SET_READY_STATE:\n            return { ...state, READY: action.data };\n        case SET_LOADING_STATE:\n            return { ...state, LOADING: action.data };\n        case SET_SCENARIO_NAMES:\n            return { ...state, SCENARIO_NAMES: action.data };\n        case ADD_LOADING_MODULES:\n            return {\n                ...state,\n                LOADING_MODULES: [\n                    ...new Set([...state.LOADING_MODULES, ...action.data]),\n                ],\n            };\n        case REMOVE_LOADING_MODULES:\n            return {\n                ...state,\n                LOADING_MODULES: state.LOADING_MODULES.filter(\n                    (x) => !action.data.includes(x)\n                ),\n            };\n\n        //! Editor\n        case LISTEN_TO_ROW_EDIT:\n            return { ...state, ROW_EDIT: action.data };\n\n        case LISTEN_TO_TYPES_LIST:\n            return { ...state, TYPES_LIST: action.data };\n\n        case LISTEN_TO_GRID_CREATOR:\n            return { ...state, GRID_CREATED: action.data };\n\n        case LISTEN_TO_BASE_MAP_CENTER:\n            return { ...state, BASE_MAP_CENTER: action.data };\n\n        default:\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nconst store = configureStore();\n\nexport default store;\n","import axios from \"axios\";\nimport { addLoadingModules } from \"../../../../redux/actions\";\nimport store from \"../../../../redux/store\";\nimport settings from \"../../../../settings/settings.json\";\n\n/**\n * conver rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n    function valToHex(c) {\n        var hex = c.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n    return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n/**\n * conver hex to rgb array\n */\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n    let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n    return isHex;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n    // get the static grid\n    const GEOGRID = cityioData.GEOGRID;\n    // if GEOGRRIDDATA exist and is the same length as our grid\n    if (\n        cityioData.GEOGRIDDATA &&\n        cityioData.GEOGRIDDATA.length === cityioData.GEOGRID.features.length\n    ) {\n        // get the grid data\n        const GEOGRIDDATA = cityioData.GEOGRIDDATA;\n        // update GEOGRID features from GEOGRIDDATA on cityio\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n            // inject id\n            GEOGRID.features[i].properties.id = i;\n        }\n    }\n    const newGrid = JSON.parse(JSON.stringify(GEOGRID));\n    return newGrid;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (data) => {\n    const accessData = data.access;\n    // get colors from settings\n    let coordinates = accessData.features.map((d) => d.geometry.coordinates);\n    let values = accessData.features.map((d) => d.properties);\n    let heatmap = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        heatmap.push({\n            coordinates: coordinates[i],\n            values: values[i],\n        });\n    }\n    return heatmap;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n    const expectUpdateModules = new Set(\n        settings.cityIO.cityIOmodules\n            .filter((val) => val.expectUpdate)\n            .map((val) => val.name)\n    );\n    const cityIOKeys = new Set(Object.keys(store.getState().CITYIO));\n\n    const loadingModules = [...cityIOKeys].filter((i) =>\n        expectUpdateModules.has(i)\n    );\n\n    let postURL =\n        \"https://cityio.media.mit.edu/api/table/update/\" + tableName + endPoint;\n\n    const options = {\n        method: \"post\",\n        url: postURL,\n        data: data,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options)\n        .then((res) => {\n            if (res.data.status === \"ok\") {\n                store.dispatch(addLoadingModules(loadingModules));\n            }\n        })\n        .catch((error) => {\n            console.log(\"ERROR:\", error);\n        });\n};\n\n// /**\n//  * Description. uses deck api to\n//  * collect objects in a region\n//  * @argument{object} e  picking event\n//  */\nexport const _multipleObjPicked = (e, pickingRadius, deckGLRef) => {\n    const dim = pickingRadius;\n    const x = e.x - dim / 2;\n    const y = e.y - dim / 2;\n    let multipleObj = deckGLRef.current.pickObjects({\n        x: x,\n        y: y,\n        width: dim,\n        height: dim,\n    });\n    return multipleObj;\n};\n\n// /**\n//  * Description. allow only to pick cells that are\n//  *  not of CityScope TUI & that are interactable\n//  * so to not overlap TUI activity\n//  */\nexport const _handleGridcellEditing = (\n    e,\n    selectedType,\n    setSelectedCellsState,\n    pickingRadius,\n    deckGLRef\n) => {\n    const { height, color, name } = selectedType;\n    const multiSelectedObj = _multipleObjPicked(e, pickingRadius, deckGLRef);\n    multiSelectedObj.forEach((selected) => {\n        const thisCellProps = selected.object.properties;\n        if (thisCellProps && thisCellProps.interactive) {\n            thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n            thisCellProps.height = height;\n            thisCellProps.name = name;\n        }\n    });\n    setSelectedCellsState(multiSelectedObj);\n};\n","import React, { useState } from \"react\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function TypeInfo(props) {\n    const COLOR_SCALE = [\"#85C4C8\", \"#C22E00\", \"#1E96BE\", \"#EC9370\", \"#F6D18A\"];\n\n    const radialRadius = 50;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    // method to create data for radial chart\n    const careateData = () => {\n        // array for data\n        let data = [];\n        // check type info: if string, parse, else object\n        let info = props.typeInfo;\n        // get the type data\n        info.forEach((attr, index) => {\n            data.push({\n                angle: attr.proportion,\n                label: JSON.stringify(attr.use),\n                color: COLOR_SCALE[index],\n            });\n        });\n\n        return data;\n    };\n\n    const data = careateData();\n\n    /*\n    const boxStyle = { height: \"10px\", width: \"10px\" };\n\n    function buildValue(hoveredCell) {\n        const { radius, angle, angle0 } = hoveredCell;\n        const truedAngle = (angle + angle0) / 2;\n        return {\n            x: radius * Math.cos(truedAngle),\n            y: radius * Math.sin(truedAngle),\n        };\n    }\n    */\n\n    return (\n        <>\n            <RadialChart\n                colorType=\"literal\"\n                animation={true}\n                className={\"donut-chart-example\"}\n                innerRadius={radialRadius / 2 - radialRadius / 5}\n                radius={radialRadius / 2}\n                getLabel={(d) => d.label}\n                showLabels={false}\n                getAngle={(d) => d.angle}\n                data={data}\n                onValueMouseOver={(evt) => {\n                    setHoveredRadial(evt);\n                }}\n                onSeriesMouseOut={() => setHoveredRadial(false)}\n                width={radialRadius}\n                height={radialRadius}\n                padAngle={0.1}\n            >\n                {hoveredRadial !== false && (\n                    <Hint value={hoveredRadial}>\n                        <div\n                            style={{\n                                background: \"rgba(0,0,0,0.8)\",\n                                fontSize: 10,\n                            }}\n                        >\n                            <Typography variant={\"caption\"} gutterBottom>\n                                {hoveredRadial.label}\n                            </Typography>\n                        </div>\n                    </Hint>\n                )}\n            </RadialChart>\n        </>\n    );\n}\n","import React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport {\n    Collapse,\n    Typography,\n    CardContent,\n    Box,\n    Avatar,\n    ListItemAvatar,\n    ListItem,\n    ListItemText,\n    Grid,\n    Card,\n} from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { listenToEditMenu } from \"../../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport { testHex, hexToRgb } from \"../../DeckglMap/utils/BaseMapUtils\";\nimport TypeInfo from \"./TypeInfo\";\n\nfunction EditMenu(props) {\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    let selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const height = selectedType ? selectedType.height : null;\n\n    const marks = [\n        { value: 0, label: \"min\" },\n        { value: 100, label: \"max\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    const parseTypeInfo = (typeInfo) => {\n        //! check type info: if string, parse, else object\n        let info =\n            typeof typeInfo == \"string\" ? JSON.parse(typeInfo) : typeInfo;\n        return info;\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type, index) => {\n            // get type description if exist\n            let description = LanduseTypesList[type].description\n                ? LanduseTypesList[type].description\n                : null;\n\n            let col = LanduseTypesList[type].color;\n            // get the LBCS/NAICS types info\n            let LBCS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].LBCS\n            );\n            let NAICS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].NAICS\n            );\n\n            if (testHex(col)) {\n                col = hexToRgb(col);\n            }\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n            let typeHasHeightProps = false;\n            if (LanduseTypesList[type].height) {\n                typeHasHeightProps = true;\n            }\n\n            iconsArr.push(\n                <div key={Math.random()}>\n                    <ListItem\n                        alignItems=\"flex-start\"\n                        button\n                        variant=\"raised\"\n                        selected={selected}\n                        onClick={(event) =>\n                            handleListItemClick(\n                                event,\n                                type,\n                                LanduseTypesList[type]\n                            )\n                        }\n                    >\n                        <ListItemAvatar>\n                            <Avatar\n                                style={{\n                                    backgroundColor: rgbCol,\n                                    color: \"black\",\n                                }}\n                            >\n                                {type.charAt(0)}\n                            </Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText primary={type} />\n                    </ListItem>\n\n                    <Collapse in={selected}>\n                        <Box spacing={1} p={1} m={1}>\n                            <Card elevation={15}>\n                                <CardContent>\n                                    <Typography variant=\"h5\">\n                                        Type Information\n                                    </Typography>\n\n                                    {description && (\n                                        <Typography variant=\"caption\">\n                                            {description}\n                                        </Typography>\n                                    )}\n                                    <Box spacing={1} p={1} m={1} />\n                                    <Grid container spacing={3}>\n                                        <Grid\n                                            item\n                                            xs={6}\n                                            l={6}\n                                            md={6}\n                                            xl={6}\n                                            container\n                                        >\n                                            {LBCS && (\n                                                <>\n                                                    <Typography variant=\"caption\">\n                                                        LBCS\n                                                    </Typography>\n\n                                                    <TypeInfo typeInfo={LBCS} />\n                                                </>\n                                            )}\n                                        </Grid>\n                                        <Grid\n                                            item\n                                            xs={6}\n                                            l={6}\n                                            md={6}\n                                            xl={6}\n                                            container\n                                        >\n                                            {NAICS && (\n                                                <>\n                                                    <Typography variant=\"caption\">\n                                                        NAICS\n                                                    </Typography>\n                                                    <TypeInfo\n                                                        typeInfo={NAICS}\n                                                    />\n                                                </>\n                                            )}\n                                        </Grid>\n\n                                        {typeHasHeightProps && (\n                                            <>\n                                                <Grid\n                                                    item\n                                                    xs={10}\n                                                    l={10}\n                                                    md={10}\n                                                    xl={10}\n                                                    container\n                                                >\n                                                    <Typography gutterBottom>\n                                                        Set Height\n                                                    </Typography>\n\n                                                    <Slider\n                                                        value={height}\n                                                        valueLabelDisplay=\"auto\"\n                                                        onChange={(\n                                                            event,\n                                                            value\n                                                        ) =>\n                                                            dispatch(\n                                                                listenToEditMenu(\n                                                                    {\n                                                                        ...selectedType,\n                                                                        height: value,\n                                                                    }\n                                                                )\n                                                            )\n                                                        }\n                                                        getAriaLabel={(index) =>\n                                                            index.toString()\n                                                        }\n                                                        min={marks[0].value}\n                                                        max={marks[1].value}\n                                                        marks={marks}\n                                                    />\n                                                </Grid>\n                                            </>\n                                        )}\n                                    </Grid>\n                                </CardContent>\n                            </Card>\n                        </Box>\n                    </Collapse>\n\n                    <Divider />\n                </div>\n            );\n        });\n        return <List>{iconsArr}</List>;\n    };\n\n    return <>{createTypesIcons(props.cityioData.GEOGRID.properties.types)}</>;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { DiscreteColorLegend } from \"react-vis\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// ! https://github.com/uber/react-vis/blob/premodern/showcase/legends/searchable-discrete-color.js\n\nexport default function ABMLegend(props) {\n    const tripsAttr = props.trips.tripsData;\n    const modes = tripsAttr.mode;\n    const profiles = tripsAttr.profile;\n\n    const prepareLegendData = (string) => {\n        let data = string === \"mode\" ? modes : profiles;\n\n        let legendData = [];\n        for (const key in data) {\n            legendData.push({ title: data[key].name, color: data[key].color });\n        }\n        return legendData;\n    };\n\n    return (\n        <>\n            <Typography variant=\"h6\" gutterBottom>\n                {props.tripTypeValue === \"mode\" ? \"Mode Choise\" : \"Profiles \"}\n            </Typography>\n            <DiscreteColorLegend\n                height={300}\n                width={150}\n                items={prepareLegendData(props.tripTypeValue)}\n            />\n        </>\n    );\n}\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    listenToSlidersEvents,\n    listenToABMmode,\n} from \"../../../../../redux/actions\";\nimport ABMLegend from \"./ABMLegend\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst marks = [\n    {\n        value: 0,\n        label: \"12AM\",\n    },\n    {\n        value: 21600,\n        label: \"6AM\",\n    },\n    {\n        value: 43200,\n        label: \"12PM\",\n    },\n    {\n        value: 64800,\n        label: \"6PM\",\n    },\n    {\n        value: 86400,\n        label: \"12AM\",\n    },\n];\n\nfunction ABMSubmenu(props) {\n    const classes = useStyles();\n    const sliders = useSelector((state) => state.SLIDERS);\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const handleSetSpeedValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                speed: newValue,\n            })\n        );\n    };\n\n    const [tripTypeValue, settripTypeValue] = React.useState(\"mode\");\n\n    const handleABMmodeChange = (event) => {\n        dispatch(listenToABMmode(event.target.value));\n        settripTypeValue(event.target.value);\n    };\n\n    return (\n        <div className={classes.root}>\n            <FormControl component=\"fieldset\">\n                <RadioGroup\n                    aria-label=\"tripType\"\n                    name=\"tripType\"\n                    value={tripTypeValue}\n                    onChange={handleABMmodeChange}\n                >\n                    <FormControlLabel\n                        value=\"mode\"\n                        control={<Radio />}\n                        label=\"Mode Choice\"\n                    />\n                    <FormControlLabel\n                        value=\"profile\"\n                        control={<Radio />}\n                        label=\"Profile\"\n                    />\n                </RadioGroup>\n            </FormControl>\n\n            <ABMLegend trips={props} tripTypeValue={tripTypeValue} />\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Simulation Range\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n            <Typography\n                className={classes.subtitle2}\n                variant=\"subtitle2\"\n                id=\"continuous-slider\"\n                gutterBottom\n            >\n                Simulation Speed\n            </Typography>\n            <Slider\n                min={0}\n                max={100}\n                value={sliders.speed}\n                onChange={handleSetSpeedValue}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"continuous-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ABMSubmenu;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../../redux/actions\";\n\nfunction ShadowSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector((state) => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\",\n        },\n        {\n            value: 21600,\n            label: \"6AM\",\n        },\n        {\n            value: 43200,\n            label: \"12PM\",\n        },\n        {\n            value: 64800,\n            label: \"6PM\",\n        },\n        {\n            value: 86400,\n            label: \"12AM\",\n        },\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Time of day\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ShadowSubmenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { listenToAccessToggle } from \"../../../../../redux/actions\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { ContinuousColorLegend } from \"react-vis\";\n\nimport settings from \"../../../../../settings/settings.json\";\n\nfunction AccessSubmenu(props) {\n    const accessToggle = useSelector((state) => state.ACCESS_TOGGLE);\n\n    const { cityioData } = props;\n\n    const ACCESS_PROPERTIES =\n        cityioData && cityioData.access && cityioData.access.properties\n            ? cityioData.access.properties\n            : [];\n\n    const dispatch = useDispatch();\n    const c = settings.map.layers.heatmap.colors;\n    const l = c.length - 1;\n    return (\n        <List>\n            <ListItem>\n                <ContinuousColorLegend\n                    width={500}\n                    startColor={\n                        \"rgb(\" + c[0][0] + \",\" + c[0][1] + \",\" + c[0][2] + \")\"\n                    }\n                    endColor={\n                        \"rgb(\" + c[l][0] + \",\" + c[l][1] + \",\" + c[l][2] + \")\"\n                    }\n                    startTitle=\"No Access\"\n                    endTitle=\"Full Access\"\n                />\n            </ListItem>\n            {ACCESS_PROPERTIES.map((p, i) => (\n                <ListItem key={p}>\n                    <ListItemText\n                        primary={p}\n                        style={{ textTransform: \"capitalize\" }}\n                    />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            checked={accessToggle === i}\n                            onChange={() => {\n                                dispatch(listenToAccessToggle(i));\n                            }}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AccessSubmenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport settings from \"../../../../settings/settings.json\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ABMSubmenu from \"./ABMSubmenu\";\nimport ShadowSubmenu from \"./ShadowSubmenu\";\nimport AccessSubmenu from \"./AccessSubmenu\";\nimport Switch from \"@material-ui/core/Switch\";\n\nfunction TogglesMenu(props) {\n    const { handleToggle } = props;\n\n    const { menuState, cityioData } = useSelector((state) => ({\n        menuState: state.MENU,\n        cityioData: state.CITYIO,\n    }));\n\n    const togglesMeta = settings.menu.toggles;\n    const listOfToggles = Object.keys(togglesMeta);\n\n    /**\n     * gets props with initial menu state\n     * and turn on the layer on init\n     */\n    let togglesCompsArray = [];\n    // array of loaded API modules\n    const loadedModules = Object.keys(cityioData);\n    // create each toggle\n    for (let i = 0; i < listOfToggles.length; i++) {\n        // check if the mdoule of this toggle\n        // was loaded on the API\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\n\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\n\n        if (loadedModules.includes(requireModule) || requireModule === false) {\n            const thisToggle = (\n                <div key={listOfToggles[i]}>\n                    <ListItem>\n                        <Switch\n                            edge=\"start\"\n                            onChange={handleToggle(listOfToggles[i])}\n                            checked={checked}\n                        />\n                        <ListItemText\n                            primary={togglesMeta[listOfToggles[i]].displayName}\n                        />\n                    </ListItem>\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"SHADOWS\" && (\n                            <Collapse in={checked}>\n                                <ShadowSubmenu />\n                            </Collapse>\n                        )\n                    }\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"ABM\" && (\n                            <Collapse in={checked}>\n                                <ABMSubmenu tripsData={cityioData.ABM2.attr} />\n                            </Collapse>\n                        )\n                    }\n                    {listOfToggles[i] === \"ACCESS\" && (\n                        <Collapse\n                            in={checked}\n                            style={{\n                                marginLeft: 24,\n                            }}\n                        >\n                            <AccessSubmenu cityioData={cityioData} />\n                        </Collapse>\n                    )}\n                </div>\n            );\n            togglesCompsArray.push(thisToggle);\n        }\n    }\n\n    return <List>{togglesCompsArray}</List>;\n}\n\nexport default TogglesMenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLoadingState } from \"../../../../../../redux/actions\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport axios from \"axios\";\nimport {\n    Button,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from \"@material-ui/core\";\n\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\n\nexport default function SaveAsScenario(props) {\n    const maxNumOfScenarios = 10;\n    const [open, setOpen] = React.useState(false);\n    const [name, setName] = React.useState(\"\");\n    const dispatch = useDispatch();\n    const { tableName, toggleDrawer } = props;\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n\n    const getScenarioIndex = () => {\n        var getURL = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const metaDataKeys = Object.keys(res.data);\n                const scenarioIndices = metaDataKeys\n                    .filter((str) => str.includes(\"scenarios\"))\n                    .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n                console.log(\"successfully got scenarios\");\n                const newScenarioIndex = scenarioIndices.length\n                    ? Math.max(...scenarioIndices) + 1\n                    : 0;\n                postScenario(newScenarioIndex);\n            })\n            .catch((err) => {\n                console.log(\"Error getting scenarios\", err);\n            });\n    };\n\n    const postScenario = (id) => {\n        const data = {\n            GEOGRIDDATA: cityioData.GEOGRIDDATA,\n            info: {\n                id,\n                name,\n            },\n        };\n\n        var postURL =\n            settings.cityIO.baseURL + \"update/\" + tableName + \"/scenarios\" + id;\n\n        const options = {\n            method: \"post\",\n            url: postURL,\n            data,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                console.log(\"Successfully saved grid data and network\");\n                dispatch(setLoadingState(false));\n                toggleDrawer();\n                handleClose();\n            })\n            .catch((error) => {\n                console.log(\"%c\" + error);\n                console.log(\"ERROR:\", error);\n                handleClose();\n            });\n    };\n\n    return (\n        <>\n            <Button\n                disabled={scenarioNames.length >= maxNumOfScenarios}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleClickOpen}\n                startIcon={<CloudUploadIcon />}\n            >\n                Save Scenario\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Save Scenario</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Name:</DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        fullWidth\n                        value={name}\n                        onChange={(event) => setName(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"default\">\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            dispatch(setLoadingState(true));\n                            getScenarioIndex();\n                        }}\n                        color=\"default\"\n                    >\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    setScenarioNames,\n    setLoadingState,\n} from \"../../../../../../redux/actions\";\nimport axios from \"axios\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport { ListItem, Button, Typography, List } from \"@material-ui/core\";\nimport { _postMapEditsToCityIO } from \"../../../../DeckglMap/utils/BaseMapUtils\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { getScenarioIndices } from \"../../../../CityIO/utils\";\n\nfunction ScenarioItems(props) {\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n    const dispatch = useDispatch();\n\n    const getScenario = (tableName, id) => {\n        const getURL = settings.cityIO.baseURL + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const { GEOGRIDDATA } = res.data;\n                _postMapEditsToCityIO(\n                    GEOGRIDDATA,\n                    cityioData.tableName,\n                    \"/GEOGRIDDATA\"\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const deleteScenario = (tableName, id) => {\n        const getURL =\n            settings.cityIO.baseURL + \"clear/\" + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                getScenarioIndices(\n                    cityioData.tableName,\n                    (data) => dispatch(setScenarioNames(data)),\n                    (state) => dispatch(setLoadingState(state))\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const generateListItems = () =>\n        scenarioNames.map((scenario) => (\n            <ListItem key={scenario.id}>\n                <Button\n                    style={{ textTransform: \"none\" }}\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        getScenario(cityioData.tableName, scenario.id);\n                    }}\n                >\n                    <Typography variant=\"h6\">{scenario.name}</Typography>\n                </Button>\n                <Button\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        deleteScenario(cityioData.tableName, scenario.id);\n                    }}\n                >\n                    <CancelIcon />\n                </Button>\n            </ListItem>\n        ));\n\n    return <List>{generateListItems()}</List>;\n}\n\nexport default ScenarioItems;\n","import React from \"react\";\nimport SaveAsScenario from \"./components/SaveAsScenario\";\nimport ScenarioItems from \"./components/ScenarioItems\";\nimport { List, ListItem, Divider } from \"@material-ui/core\";\n\nexport default function SaveMenu(props) {\n    const { tableName } = props;\n\n    return (\n        <List>\n            <ListItem>\n                <SaveAsScenario tableName={tableName} />\n            </ListItem>\n            <ListItem>\n                <Divider />\n            </ListItem>\n            <ListItem>\n                <ScenarioItems />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToMenuUI } from \"../../../redux/actions\";\nimport EditMenu from \"./EditMenu\";\nimport TogglesMenu from \"./TogglesMenu\";\nimport SaveMenu from \"./SaveMenu\";\nimport { Button, Typography, List, ListItem } from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\n\nfunction MenuContainer(props) {\n    const { tableName } = props;\n    const menuState = useSelector((state) => state.MENU);\n    const dispatch = useDispatch();\n\n    const handleToggle = (value) => () => {\n        const i = menuState.indexOf(value);\n        const updatedMenuState = [...menuState];\n        if (i === -1) {\n            updatedMenuState.push(value);\n        } else {\n            updatedMenuState.splice(i, 1);\n        }\n\n        dispatch(listenToMenuUI(updatedMenuState));\n    };\n\n    return (\n        <>\n            <List>\n                <ListItem>\n                    <Typography variant={\"h2\"}>Grid Edit</Typography>\n                </ListItem>\n                <ListItem>\n                    <Button\n                        startIcon={\n                            menuState.includes(\"EDIT\") ? (\n                                <>\n                                    <CloudUploadIcon />\n                                    Send to cityIO\n                                </>\n                            ) : (\n                                <>\n                                    <EditIcon />\n                                    Edit Mode\n                                </>\n                            )\n                        }\n                        color=\"default\"\n                        onClick={handleToggle(\"EDIT\")}\n                    ></Button>\n                </ListItem>\n\n                <EditMenu />\n\n                <ListItem>\n                    <Typography variant={\"h2\"}>Scenarios</Typography>\n                </ListItem>\n                <ListItem>\n                    <SaveMenu\n                        tableName={tableName}\n                        handleToggle={handleToggle}\n                    />\n                </ListItem>\n                <ListItem>\n                    <Typography variant={\"h2\"}>View Options</Typography>\n                </ListItem>\n                <ListItem>\n                    <Button\n                        startIcon={\n                            <>\n                                <NavigationIcon />\n                                Reset View\n                            </>\n                        }\n                        color=\"default\"\n                        onClick={handleToggle(\"RESET_VIEW\")}\n                    />\n                </ListItem>\n            </List>\n\n            <TogglesMenu handleToggle={handleToggle} />\n        </>\n    );\n}\n\nexport default MenuContainer;\n","import React from \"react\";\nimport { testHex, hexToRgb } from \"../../utils/BaseMapUtils\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \"Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}:\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    return (\n        <div\n            style={{\n                borderRadius: \"10%\",\n                position: \"fixed\",\n                pointerEvents: \"none\",\n                backgroundColor: \"rgba(0,0,0,0.5)\",\n                padding: \"1vw\",\n                color: \"rgba(255,255,255,0.9)\",\n                zIndex: 1,\n                left: mousePos.clientX,\n                top: mousePos.clientY,\n                fontFamily:'monospace',\n                fontSize: \"0.65em\",\n                fontWeight: 500,\n            }}\n        >\n            <p>\n                Type:\n                {props.hoveredObj.object.properties.name}\n            </p>\n            <p>\n                Floors:\n                {props.hoveredObj.object.properties.height}\n            </p>\n            <p>\n                ID:\n                {props.hoveredObj.object.properties.id}\n            </p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { PaintBrush } from \"./PaintBrush\";\nimport { CellMeta } from \"../CellMeta\";\n\nexport default function PaintBrushContainer({\n    editOn,\n    mousePos,\n    selectedType,\n    pickingRadius,\n    mouseDown,\n    hoveredObj,\n}) {\n    if (editOn) {\n        return (\n            selectedType && (\n                <PaintBrush\n                    mousePos={mousePos}\n                    selectedType={selectedType}\n                    divSize={pickingRadius}\n                    mouseDown={mouseDown}\n                    hoveredCells={hoveredObj}\n                />\n            )\n        );\n    } else {\n        return (\n            hoveredObj && (\n                <CellMeta mousePos={mousePos} hoveredObj={hoveredObj} />\n            )\n        );\n    }\n}\n","import { Component } from \"react\";\n\nclass AnimationComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.animationFrame = null;\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    _animate() {\n        const {\n            toggles: { rotateOn, ABMOn },\n            state: { viewState, sliders },\n            updaters: { listenToSlidersEvents, sunEffects, setViewState },\n            dispatch,\n        } = this.props;\n        if (rotateOn) {\n            let bearing = viewState.bearing ? viewState.bearing : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            setViewState({\n                ...viewState,\n                bearing: bearing,\n            });\n        }\n\n        if (ABMOn) {\n            const time = sliders.time[1];\n            const speed = sliders.speed;\n            const startHour = sliders.time[0];\n            const endHour = sliders.time[2];\n\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n\n            dispatch(\n                listenToSlidersEvents({\n                    ...sliders,\n                    time: [sliders.time[0], t, sliders.time[2]],\n                })\n            );\n\n            // update sun position\n            if (sunEffects) {\n                sunEffects.updateSunDirection(t);\n            }\n        }\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default AnimationComponent;\n","import { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\n\nvar currentDateMidnight = new Date();\n// set initial midnight to GMT 0 \ncurrentDateMidnight.setHours(0, 0, 0, 0);\n\nexport const _setupSunEffects = (effectsRef, tableHeader) => {\n    // get time zone from the tz value if exist\n    if (tableHeader.tz) {\n        currentDateMidnight.setHours(tableHeader.tz, 0, 0, 0);\n    }\n    const ambientLight = new AmbientLight({\n        color: [255, 255, 255],\n        intensity: 0.85,\n    });\n    const dirLight = new _SunLight({\n        timestamp: 0,\n        color: [255, 255, 255],\n        intensity: 1.0,\n        _shadow: true,\n    });\n    const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n    lightingEffect.shadowColor = [0, 0, 0, 0.5];\n    effectsRef.current = [lightingEffect];\n};\n\nexport const updateSunDirection = (time, effectsRef) => {    \n    const thisLocationTime = currentDateMidnight.getTime() + time * 1000;\n    var date = new Date(thisLocationTime);\n\n    effectsRef.current[0].directionalLights[0].timestamp = Date.UTC(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDay(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds()\n    );\n};\n","import { HeatmapLayer } from \"deck.gl\";\nimport settings from \"../../../../settings/settings.json\";\n\nexport default function AccessLayer({ data, accessToggle }) {\n    return new HeatmapLayer({\n        id: \"ACCESS\",\n        colorRange: settings.map.layers.heatmap.colors,\n        radiusPixels: 200,\n        opacity: 0.5,\n        threshold: 0.5,\n        data,\n        getPosition: (d) => d.coordinates,\n        getWeight: (d) => d.values[accessToggle],\n        updateTriggers: {\n            getWeight: [accessToggle],\n        },\n    });\n}\n","import { PathLayer } from \"deck.gl\";\nimport { hexToRgb } from \"../utils/BaseMapUtils\";\n\nexport default function AggregatedTripsLayer({ data, cityioData, ABMmode }) {\n    return new PathLayer({\n        id: \"AGGREGATED_TRIPS\",\n        _shadow: false,\n        data,\n        getPath: (d) => {\n            const noisePath =\n                Math.random() < 0.5\n                    ? Math.random() * 0.00005\n                    : Math.random() * -0.00005;\n            for (let i in d.path) {\n                d.path[i][0] = d.path[i][0] + noisePath;\n                d.path[i][1] = d.path[i][1] + noisePath;\n                d.path[i][2] = d.mode[0] * 2;\n            }\n            return d.path;\n        },\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n        opacity: 0.2,\n        getWidth: 1.5,\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\nimport { hexToRgb } from \"../utils/BaseMapUtils\";\n\n//  * remap line width\nconst _remapValues = (value) => {\n    let remap =\n        value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n    return remap;\n};\n\nexport default function ABMLayer({\n    data,\n    cityioData,\n    ABMmode,\n    zoomLevel,\n    sliders,\n}) {\n    return new TripsLayer({\n        id: \"ABM\",\n        data,\n        getPath: (d) => d.path,\n        getTimestamps: (d) => d.timestamps,\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n\n        getWidth: 1,\n        widthScale: _remapValues(zoomLevel),\n        opacity: 0.8,\n        rounded: true,\n        trailLength: 500,\n        currentTime: sliders.time[1],\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { GeoJsonLayer } from \"deck.gl\";\nimport { _handleGridcellEditing } from \"../utils/BaseMapUtils\";\n\nexport default function GridLayer({\n    data,\n    editOn,\n    state: { selectedType, keyDownState, selectedCellsState, pickingRadius },\n    updaters: { setSelectedCellsState, setDraggingWhileEditing, setHoveredObj },\n    deckGL,\n}) {\n    return new GeoJsonLayer({\n        id: \"GRID\",\n        data,\n        pickable: true,\n        extruded: true,\n        wireframe: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 2,\n        getElevation: (d) => d.properties.height,\n        getFillColor: (d) => d.properties.color,\n\n        onClick: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDrag: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDragStart: () => {\n            if (selectedType && editOn && keyDownState !== \"Shift\") {\n                setDraggingWhileEditing(true);\n            }\n        },\n\n        onHover: (e) => {\n            if (e.object) {\n                setHoveredObj(e);\n            }\n        },\n\n        onDragEnd: () => {\n            setDraggingWhileEditing(false);\n        },\n        updateTriggers: {\n            getFillColor: selectedCellsState,\n            getElevation: selectedCellsState,\n        },\n        transitions: {\n            getFillColor: 500,\n            getElevation: 500,\n        },\n    });\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport PaintBrush from \"./components/PaintBrush\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../redux/actions\";\nimport {\n    _proccessAccessData,\n    _proccessGridData,\n    _postMapEditsToCityIO,\n} from \"./utils/BaseMapUtils\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport settings from \"../../../settings/settings.json\";\nimport AnimationComponent from \"./components/AnimationComponent\";\nimport { updateSunDirection, _setupSunEffects } from \"./utils/EffectsUtils\";\nimport {\n    AccessLayer,\n    AggregatedTripsLayer,\n    ABMLayer,\n    GridLayer,\n} from \"./deckglLayers\";\n\nexport default function Map() {\n    const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n    const [selectedCellsState, setSelectedCellsState] = useState(null);\n    const [viewState, setViewState] = useState(settings.map.initialViewState);\n    const [keyDownState, setKeyDownState] = useState(null);\n    const [mousePos, setMousePos] = useState(null);\n    const [mouseDown, setMouseDown] = useState(null);\n    const [hoveredObj, setHoveredObj] = useState(null);\n    const [access, setAccess] = useState(null);\n    const [GEOGRID, setGEOGRID] = useState(null);\n    const [ABM, setABM] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const effectsRef = useRef();\n    const deckGL = useRef();\n\n    const dispatch = useDispatch();\n\n    const pickingRadius = 40;\n\n    const [\n        cityioData,\n        sliders,\n        menu,\n        accessToggle,\n        selectedType,\n        ABMmode,\n    ] = useSelector((state) => [\n        state.CITYIO,\n        state.SLIDERS,\n        state.MENU,\n        state.ACCESS_TOGGLE,\n        state.SELECTED_TYPE,\n        state.ABM_MODE,\n    ]);\n\n    var ABMOn = menu.includes(\"ABM\");\n    var rotateOn = menu.includes(\"ROTATE\");\n    var shadowsOn = menu.includes(\"SHADOWS\");\n    var editOn = menu.includes(\"EDIT\");\n    var resetViewOn = menu.includes(\"RESET_VIEW\");\n\n    useEffect(() => {\n        // fix deck view rotate\n        _rightClickViewRotate();\n        // setup sun effects\n        _setupSunEffects(effectsRef, cityioData.GEOGRID.properties.header);\n        // zoom map on CS table location\n        _setViewStateToTableHeader();\n        setLoaded(true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (!loaded) return;\n        updateSunDirection(sliders.time[1], effectsRef);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sliders.time]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        let shadowColor = shadowsOn ? [0, 0, 0, 0.5] : [0, 0, 0, 0];\n        effectsRef.current[0].shadowColor = shadowColor;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [shadowsOn]);\n\n    useEffect(() => {\n        setGEOGRID(_proccessGridData(cityioData));\n\n        if (cityioData.access) {\n            setAccess(_proccessAccessData(cityioData));\n        }\n\n        if (cityioData.ABM2) {\n            setABM(cityioData.ABM2);\n        }\n    }, [cityioData]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        if (!editOn) {\n            let dataProps = [];\n\n            for (let i = 0; i < GEOGRID.features.length; i++) {\n                dataProps[i] = GEOGRID.features[i].properties;\n            }\n            _postMapEditsToCityIO(\n                dataProps,\n                cityioData.tableName,\n                \"/GEOGRIDDATA\"\n            );\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [editOn]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        _setViewStateToTableHeader();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [resetViewOn]);\n\n    const onViewStateChange = ({ viewState }) => {\n        setViewState(viewState);\n    };\n\n    // /**\n    //  * resets the camera viewport\n    //  * to cityIO header data\n    //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n    //  */\n    const _setViewStateToTableHeader = () => {\n        const header = cityioData.GEOGRID.properties.header;\n\n        setViewState({\n            ...viewState,\n            longitude: header.longitude,\n            latitude: header.latitude,\n            zoom: 15,\n            pitch: 0,\n            bearing: 360 - header.rotation,\n            orthographic: true,\n        });\n    };\n\n    // /**\n    //  * Description. fix deck issue\n    //  * with rotate right botton\n    //  */\n    const _rightClickViewRotate = () => {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    };\n\n    const layersKey = {\n        ABM: ABMLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n            zoomLevel: viewState.zoom,\n            sliders,\n        }),\n        AGGREGATED_TRIPS: AggregatedTripsLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n        }),\n        GRID: GridLayer({\n            data: GEOGRID,\n            editOn: menu.includes(\"EDIT\"),\n            state: {\n                selectedType,\n                keyDownState,\n                selectedCellsState,\n                pickingRadius,\n            },\n            updaters: {\n                setSelectedCellsState,\n                setDraggingWhileEditing,\n                setHoveredObj,\n            },\n            deckGL,\n        }),\n        ACCESS: AccessLayer({\n            data: access,\n            accessToggle,\n        }),\n    };\n\n    const layerOrder = [\"ABM\", \"AGGREGATED_TRIPS\", \"GRID\", \"ACCESS\"];\n\n    const _renderLayers = () => {\n        let layers = [];\n        for (var layer of layerOrder) {\n            if (menu.includes(layer)) {\n                layers.push(layersKey[layer]);\n            }\n        }\n        return layers;\n    };\n\n    return (\n        <div\n            className=\"baseMap\"\n            onKeyDown={(e) => {\n                setKeyDownState(e.nativeEvent.key);\n            }}\n            onKeyUp={() => setKeyDownState(null)}\n            onMouseMove={(e) => setMousePos(e.nativeEvent)}\n            onMouseUp={() => setMouseDown(false)}\n            onMouseDown={() => setMouseDown(true)}\n        >\n            <PaintBrush\n                editOn={editOn}\n                mousePos={mousePos}\n                selectedType={selectedType}\n                pickingRadius={pickingRadius}\n                mouseDown={mouseDown}\n                hoveredObj={hoveredObj}\n            />\n            <AnimationComponent\n                toggles={{ ABMOn, rotateOn }}\n                state={{ sliders, viewState }}\n                updaters={{\n                    listenToSlidersEvents,\n                    updateSunDirection,\n                    setViewState,\n                }}\n                dispatch={dispatch}\n            />\n\n            <DeckGL\n                ref={deckGL}\n                viewState={viewState}\n                onViewStateChange={onViewStateChange}\n                layers={_renderLayers()}\n                effects={effectsRef.current}\n                controller={{\n                    touchZoom: true,\n                    touchRotate: true,\n                    dragPan: !draggingWhileEditing,\n                    dragRotate: !draggingWhileEditing,\n                    keyboard: false,\n                }}\n            >\n                <StaticMap\n                    asyncRender={false}\n                    dragRotate={true}\n                    reuseMaps={true}\n                    mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                    mapStyle={settings.map.mapStyle.sat}\n                    preventStyleDiffing={true}\n                />\n            </DeckGL>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\n\nconst LoadingSpinner = () => {\n    const [loadingModules] = useSelector((state) => [state.LOADING_MODULES]);\n\n    return (\n        <>\n            {loadingModules.map((module, index) => {\n                return (\n                    <Box\n                        position=\"fixed\"\n                        bottom={index * 50}\n                        right=\"2vw\"\n                        width=\"10vw\"\n                        zIndex=\"9999\"\n                        margin=\"0\"\n                        key={module}\n                    >\n                        <LinearProgress color={'secondary'} />\n                        <Typography\n                            variant=\"h6\"\n                            color=\"primary\"\n                            style={{ marginRight: \"10px\" }}\n                        >\n                            {module}\n                        </Typography>\n                    </Box>\n                );\n            })}\n        </>\n    );\n};\n\nexport default LoadingSpinner;\n","import React from \"react\";\n\nimport { Box, Container, Typography } from \"@material-ui/core\";\n\nconst MissingTableInfo = () => {\n    return (\n        <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n            height=\"100%\"\n        >\n            <Container maxWidth=\"sm\">\n                <Typography align=\"center\" color=\"textPrimary\" variant=\"h1\">\n                    CityScopeJS\n                </Typography>\n                <Typography align=\"center\" color=\"textPrimary\" variant=\"h5\">\n                    Enter your CityScopeJS project name in the search bar:\n                </Typography>\n                <Typography align=\"center\" variant=\"h5\" color=\"textSecondary\">\n                    (this page URL)/csjs?cityscope=projectName\n                </Typography>\n            </Container>\n        </Box>\n    );\n};\n\nexport default MissingTableInfo;\n","import React, { useState, useEffect } from \"react\";\nimport { CircularGridLines, RadarChart, DiscreteColorLegend } from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport \"./Radar.css\";\n\nconst radarSize = 300;\nconst colorRange = [\"#ff5278\", \"#660016\"];\n\nexport default function Radar(props) {\n    const [radarData, setRadarData] = useState(null);\n\n    const createRadarData = (indicators) => {\n        let r = {};\n        let f = {};\n        let domains = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"radar\") {\n                r[indicators[i].name] = [indicators[i].value];\n                f[indicators[i].name] = [indicators[i].ref_value];\n                indicators[i].domain = [0, 1];\n                domains.push(indicators[i]);\n            }\n        }\n        return { radarData: [r, f], domains: domains };\n    };\n\n    useEffect(() => {\n        if (\n            props &&\n            props.cityioData &&\n            props.cityioData.indicators &&\n            props.cityioData.indicators.length > 0\n        ) {\n            const d = createRadarData(props.cityioData.indicators);\n            setRadarData(d);\n        }\n    }, [props]);\n\n    return (\n        <div>\n            {radarData && radarData.domains && (\n                <>\n                    <RadarChart\n                        className=\"Radar blur\"\n                        animation\n                        data={radarData.radarData}\n                        domains={radarData.domains}\n                        colorRange={colorRange}\n                        style={{\n                            polygons: {\n                                fillOpacity: 0.2,\n                                strokeWidth: 2,\n                            },\n                            axes: {\n                                text: {\n                                    opacity: 0,\n                                    fontWeight: 700,\n                                    fill: \"white\",\n                                    fontFamily: \"Roboto Mono\",\n                                },\n                                strokeWidth: 0,\n                            },\n                            labels: {\n                                fontFamily: \"Roboto Mono\",\n\n                                textAnchor: \"middle\",\n                                fontSize: 10,\n                                fill: \"white\",\n                            },\n                        }}\n                        margin={{\n                            left: radarSize / 6,\n                            top: radarSize / 6,\n                            bottom: radarSize / 6,\n                            right: radarSize / 6,\n                        }}\n                        width={radarSize}\n                        height={radarSize}\n                    >\n                        <CircularGridLines\n                            style={{\n                                fill: \"white\",\n                                fillOpacity: 0.1,\n                                backgroundColor: \"#FFF\",\n                                opacity: 0.5,\n                                stroke: \"white\",\n                                width: 0.1,\n                            }}\n                            tickValues={[...new Array(11)].map(\n                                (v, i) => i / 10 - 1\n                            )}\n                        />\n                    </RadarChart>\n                    <DiscreteColorLegend\n                        items={[\"Design\", \"Reference\"]}\n                        colors={colorRange}\n                        style={{\n                            fontFamily: \"Roboto Mono\",\n                        }}\n                    />\n                </>\n            )}\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalBarSeries,\n} from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport { Typography, Box } from \"@material-ui/core\";\n\nexport default function BarChart(props) {\n    const radarSize = 250;\n\n    /**\n   data format \n    [\n    { x: 2, y: 10 },\n    { x: 4, y: 5 },\n    { x: 12, y: 15 },\n    ]\n     */\n\n    const [barChartData, setBarChartData] = useState(null);\n    const [hoveredNode, setHoveredNode] = useState(null);\n\n    useEffect(() => {\n        if (\n            props &&\n            props.cityioData &&\n            props.cityioData.indicators &&\n            props.cityioData.indicators.length > 0\n        ) {\n            const d = generateData(props.cityioData.indicators);\n\n            setBarChartData(d.barChartData);\n        }\n    }, [props]);\n\n    const generateData = (indicators) => {\n        let dataArr = [];\n\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"bar\") {\n                dataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].value,\n                });\n            }\n        }\n\n        return {\n            barChartData: dataArr,\n        };\n    };\n\n    return (\n        <>\n            {barChartData && (\n                <>\n                    <Box flexDirection=\"column\">\n                        <Box alignContent=\"center\" p={3}>\n                            <FlexibleWidthXYPlot\n                                opacity={0.2}\n                                xType=\"ordinal\"\n                                width={radarSize}\n                                height={radarSize}\n                                stackBy=\"y\"\n                                yDomain={[0, 1]}\n                            >\n                                <XAxis\n                                    style={{\n                                        text: {\n                                            fill: \"#FFF\",\n                                            fontFamily: \"Roboto Mono\",\n                                        },\n                                    }}\n                                    tickLabelAngle={90}\n                                />\n                                <YAxis style={{ text: { fill: \"#FFF\" } }} />\n                                <VerticalBarSeries\n                                    animation={true}\n                                    onValueMouseOver={(d) => {\n                                        setHoveredNode(d);\n                                    }}\n                                    data={barChartData}\n                                />\n                            </FlexibleWidthXYPlot>\n                        </Box>\n                        <Box alignContent=\"center\">\n                            {hoveredNode && (\n                                <>\n                                    <Typography variant=\"caption\" gutterBottom>\n                                        {hoveredNode.x}\n                                    </Typography>\n                                    <Box m={3} />\n                                    <Typography gutterBottom>\n                                        {hoveredNode.y}\n                                    </Typography>\n                                </>\n                            )}\n                        </Box>\n                    </Box>\n                </>\n            )}\n        </>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { rgbToHex } from \"../../DeckglMap/utils/BaseMapUtils\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\n\nexport default function AreaCalc(props) {\n    const radialRadius = 250;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n    const [areaData, setAreaData] = useState(null);\n\n    useEffect(() => {\n        const calcArea = () => {\n            let gridProps = props.cityioData.GEOGRID.properties;\n            let cellSize = gridProps.header.cellSize;\n            let geoGridData = props.cityioData.GEOGRIDDATA;\n\n            let calcAreaObj = {};\n            geoGridData.forEach((gridCellData) => {\n                let typeName = gridCellData.name;\n                if (\n                    //    if this type is not null\n                    gridCellData.name !== \"None\"\n                ) {\n                    if (calcAreaObj.hasOwnProperty(typeName)) {\n                        calcAreaObj[typeName].count =\n                            calcAreaObj[typeName].count + 1;\n                        // avoid landuse with no height\n                        let height =\n                            gridCellData.height < 1 ? 1 : gridCellData.height;\n                        calcAreaObj[typeName].area =\n                            calcAreaObj[typeName].area + height * cellSize;\n                    } else {\n                        calcAreaObj[typeName] = {};\n                        calcAreaObj[typeName].area = 0;\n                        calcAreaObj[typeName].count = 0;\n                        calcAreaObj[typeName].name = typeName;\n                        calcAreaObj[typeName].color = rgbToHex(\n                            gridCellData.color[0],\n                            gridCellData.color[1],\n                            gridCellData.color[2]\n                        );\n                    }\n                }\n            });\n            //  convert to react-vis happy data format\n            let radialData = [];\n            for (const k in calcAreaObj) {\n                radialData.push(calcAreaObj[k]);\n            }\n\n            let data = {\n                children: radialData,\n                color: 1,\n            };\n\n            return data;\n        };\n        const d = calcArea();\n        setAreaData(d);\n    }, [props]);\n\n    return (\n        <List>\n            {areaData && areaData.children && (\n                <ListItem alignItems=\"center\">\n                    <RadialChart\n                        colorType=\"literal\"\n                        animation={true}\n                        className={\"donut-chart-example\"}\n                        innerRadius={radialRadius / 2 - radialRadius / 5}\n                        radius={radialRadius / 2}\n                        getLabel={(d) => d.name}\n                        labelsRadiusMultiplier={0.95}\n                        labelsStyle={{\n                            textAnchor: \"middle\",\n                            font: \"sans-serif\",\n                            fontSize: 11,\n                            fill: \"#FFF\",\n                            textShadow: \"2px 2px 2px #000\",\n                            fontFamily: \"Roboto Mono\",\n                        }}\n                        showLabels\n                        getAngle={(d) => d.area}\n                        data={areaData.children}\n                        onValueMouseOver={(evt) => setHoveredRadial(evt)}\n                        onSeriesMouseOut={() => setHoveredRadial(false)}\n                        width={radialRadius}\n                        height={radialRadius}\n                        padAngle={0.01}\n                    >\n                        {hoveredRadial !== false && (\n                            <Hint value={hoveredRadial}>\n                                <div\n                                    style={{\n                                        background: \"rgba(0,0,0,0.8)\",\n                                        fontSize: 14,\n                                    }}\n                                >\n                                    <Typography\n                                        variant={\"caption\"}\n                                        gutterBottom\n                                    >\n                                        Area: {hoveredRadial.area} sqm\n                                    </Typography>\n                                </div>\n                            </Hint>\n                        )}\n                    </RadialChart>\n                </ListItem>\n            )}\n\n            {hoveredRadial.name && (\n                <List>\n                    <ListItem>\n                        <Typography variant=\"caption\">\n                            {hoveredRadial.name}\n                        </Typography>\n                    </ListItem>\n                    <ListItem>\n                        <Typography>{hoveredRadial.area} sqm</Typography>\n                    </ListItem>\n                </List>\n            )}\n        </List>\n    );\n}\n","import React from \"react\";\nimport { List, ListItem, Divider } from \"@material-ui/core\";\nimport Radar from \"./Radar\";\nimport BarChart from \"./BarChart\";\nimport AreaCalc from \"./AreaCalc\";\n\nfunction VisContainer(props) {\n    return (\n        <>\n            {props.cityIOdata && (\n                <List>\n                    <ListItem alignItems=\"center\">\n                        <AreaCalc cityioData={props.cityIOdata} />\n                    </ListItem>\n\n                    <Divider />\n\n                    <ListItem>\n                        <Radar cityioData={props.cityIOdata} />\n                    </ListItem>\n\n                    <Divider />\n\n                    <ListItem>\n                        <BarChart cityioData={props.cityIOdata} />\n                    </ListItem>\n                </List>\n            )}\n        </>\n    );\n}\n\nexport default VisContainer;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n    _proccessAccessData,\n    _proccessGridData,\n} from \"../../DeckglMap/utils/BaseMapUtils\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport settings from \"../../../../settings/settings.json\";\nimport {\n    updateSunDirection,\n    _setupSunEffects,\n} from \"../../DeckglMap/utils/EffectsUtils\";\nimport {\n    AccessLayer,\n    AggregatedTripsLayer,\n    ABMLayer,\n    GridLayer,\n} from \"../../DeckglMap/deckglLayers\";\n\nexport default function PrjDeckGLMap() {\n    const [viewState, setViewState] = useState(settings.map.initialViewState);\n\n    const [access, setAccess] = useState(null);\n    const [GEOGRID, setGEOGRID] = useState(null);\n    const [ABM, setABM] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const effectsRef = useRef();\n    const deckGL = useRef();\n\n    const [\n        cityioData,\n        sliders,\n        menu,\n        accessToggle,\n        selectedType,\n        ABMmode,\n    ] = useSelector((state) => [\n        state.CITYIO,\n        state.SLIDERS,\n        state.MENU,\n        state.ACCESS_TOGGLE,\n        state.SELECTED_TYPE,\n        state.ABM_MODE,\n    ]);\n\n    useEffect(() => {\n        // fix deck view rotate\n        _rightClickViewRotate();\n        // setup sun effects\n        _setupSunEffects(effectsRef, cityioData.GEOGRID.properties.header);\n        // zoom map on CS table location\n        _setViewStateToTableHeader();\n        setLoaded(true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        effectsRef.current[0].shadowColor = [0, 0, 0, 1];\n    }, []);\n\n    useEffect(() => {\n        if (!loaded) return;\n        updateSunDirection(sliders.time[1], effectsRef);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sliders.time]);\n\n    useEffect(() => {\n        setGEOGRID(_proccessGridData(cityioData));\n\n        if (cityioData.access) {\n            setAccess(_proccessAccessData(cityioData));\n        }\n\n        if (cityioData.ABM2) {\n            setABM(cityioData.ABM2);\n        }\n    }, [cityioData]);\n\n    const onViewStateChange = ({ viewState }) => {\n        setViewState(viewState);\n    };\n\n    // /**\n    //  * resets the camera viewport\n    //  * to cityIO header data\n    //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n    //  */\n    const _setViewStateToTableHeader = () => {\n        const header = cityioData.GEOGRID.properties.header;\n\n        setViewState({\n            ...viewState,\n            longitude: header.longitude,\n            latitude: header.latitude,\n            zoom: 15,\n            pitch: 0,\n            bearing: 360 - header.rotation,\n            orthographic: true,\n        });\n    };\n\n    // /**\n    //  * Description. fix deck issue\n    //  * with rotate right botton\n    //  */\n    const _rightClickViewRotate = () => {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    };\n\n    const layersKey = {\n        ABM: ABMLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n            zoomLevel: viewState.zoom,\n            sliders,\n        }),\n        AGGREGATED_TRIPS: AggregatedTripsLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n        }),\n        GRID: GridLayer({\n            data: GEOGRID,\n            state: {\n                selectedType,\n            },\n            updaters: {\n                setSelectedCellsState: null,\n            },\n            deckGL,\n        }),\n        ACCESS: AccessLayer({\n            data: access,\n            accessToggle,\n        }),\n    };\n\n    const layerOrder = [\"ABM\", \"AGGREGATED_TRIPS\", \"GRID\", \"ACCESS\"];\n\n    const _renderLayers = () => {\n        let layers = [];\n        for (var layer of layerOrder) {\n            if (menu.includes(layer)) {\n                layers.push(layersKey[layer]);\n            }\n        }\n        return layers;\n    };\n\n    return (\n        <div className=\"baseMap\">\n            <DeckGL\n                ref={deckGL}\n                viewState={viewState}\n                onViewStateChange={onViewStateChange}\n                layers={_renderLayers()}\n                effects={effectsRef.current}\n                controller={{\n                    keyboard: false,\n                }}\n            >\n                <StaticMap\n                    asyncRender={false}\n                    dragRotate={true}\n                    reuseMaps={true}\n                    mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                    mapStyle={settings.map.mapStyle.sat}\n                    preventStyleDiffing={true}\n                />\n            </DeckGL>\n        </div>\n    );\n}\n","import { Matrix3d, RectPoints, Vector } from \"./Keystoner\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1,\n    ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./Keystoner\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 30;\nconst halfAnchor = anchorSize / 2;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"4px solid white\",\n        cursor: \"move\",\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor,\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor,\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor,\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor,\n    },\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {},\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={(evt) => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation),\n        }}\n    />\n);\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport default class Keystoner extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n\n      if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }  \n\n\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n\n            console.log(\"saving edited projMap...\", JSON.stringify(prevState));\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n      \n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n\n\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <>\n              \n         \n\n                <div\n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </>\n        );\n    }\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        top: \"1vh\",\n        zIndex: 5000,\n        maxWidth: \"50vw\",\n    },\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PrjDeckGLMap from \"./Components/PrjDeckGLMap\";\nimport Keystoner from \"./Components/Keystoner\";\nimport DeleteLocalStorage from \"./Components/deleteLocalStorage\";\n\nclass ProjectionMapping extends Component {\n    _clearLocalStraoge = () => {\n        if (localStorage.getItem(\"projMap\")) {\n            localStorage.removeItem(\"projMap\");\n        }\n        window.location.reload();\n    };\n    render() {\n        return (\n            <>\n                <div onClick={() => this._clearLocalStraoge()}>\n                    <DeleteLocalStorage />\n                </div>\n\n                <div\n                    style={{\n                        height: \"100vh\",\n                        width: \"100vw\",\n                        overflow: \"hidden\",\n                    }}\n                >\n                    <Keystoner\n                        style={{\n                            height: \"100vh\",\n                            width: \"100vw\",\n                        }}\n                        isEditMode={true}\n                    >\n                        <PrjDeckGLMap menu={this.props.menu} />\n                    </Keystoner>\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        menu: state.MENU,\n    };\n};\n\nexport default connect(mapStateToProps, null)(ProjectionMapping);\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CityIO from \"./CityIO/cityIO\";\nimport MenuContainer from \"./MenuContainer\";\nimport MapContainer from \"./DeckglMap\";\nimport LoadingSpinner from \"./CityIO/LoadingSpinner\";\nimport MissingTableInfo from \"../Errors/MissingTableInfo\";\nimport VisContainer from \"./VisContainer\";\nimport ProjectionMapping from \"./ProjectionMapping\";\n\nimport {\n    makeStyles,\n    Grid,\n    Card,\n    CardContent,\n    Container,\n} from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: \"auto\",\n        height: \"100%\",\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n}));\n\nexport default function CityScopeJS() {\n    const classes = useStyles();\n\n    // get the table name for cityIO comp\n    const [tableName, setTableName] = useState(null);\n    // on init, get the adress URL\n    // to search for  a table\n    useEffect(() => {\n        let url = window.location.toString();\n        let pre = \"cityscope=\";\n        let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length);\n        // check URL for proper CS project link\n        if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\n            setTableName(cityscopePrjName);\n        }\n    }, []);\n\n    // wait for 'ready' flag from cityIO when app is ready to start\n    const isReady = useSelector((state) => state.READY);\n    const cityIOdata = useSelector((state) => state.CITYIO);\n\n    return (\n        <Page className={classes.root} title=\"CitySCopeJS\">\n            <Container maxWidth={false}>\n                {!isReady && <MissingTableInfo />}\n                {tableName && <CityIO tableName={tableName} />}\n                {isReady && (\n                    <>\n                        {/* <ProjectionMapping /> */}\n                        <Grid container spacing={5}>\n                            <Grid item xs={6} l={3} md={3} xl={2} container>\n                                <Grid\n                                    item\n                                    container\n                                    direction=\"column\"\n                                    spacing={2}\n                                >\n                                    <Grid item xs={12} l={12} md={12} xl={12}>\n                                        <Card\n                                            elevation={15}\n                                            style={{\n                                                // allow scrolling\n                                                maxHeight: \"85vh\",\n                                                overflow: \"auto\",\n                                            }}\n                                        >\n                                            <CardContent>\n                                                <MenuContainer\n                                                    tableName={tableName}\n                                                />\n                                            </CardContent>\n                                        </Card>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item xs={6} l={6} md={6} xl={8}>\n                                <Card\n                                    elevation={15}\n                                    style={{\n                                        height: \"85vh\",\n                                        width: \"100%\",\n                                        position: \"relative\",\n                                    }}\n                                >\n                                    <MapContainer />\n                                </Card>\n                            </Grid>\n\n                            <Grid item xs={6} l={3} md={3} xl={2}>\n                                <Card\n                                    elevation={15}\n                                    style={{\n                                        maxHeight: \"85vh\",\n                                        overflow: \"auto\",\n                                    }}\n                                >\n                                    <VisContainer cityIOdata={cityIOdata} />\n                                </Card>\n                            </Grid>\n                        </Grid>\n                    </>\n                )}\n\n                <LoadingSpinner />\n            </Container>\n        </Page>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function GetGITdate() {\n    const [gitMeta, setGitMeta] = useState({\n        author: \"\",\n        branch: \"\",\n        date: \"\",\n        sha: \"\",\n        link: \"\",\n    });\n\n    const URL =\n        \"https://api.github.com/repos/CityScope/CS_cityscopeJS/branches/master\";\n\n    const fetchGitHub = () =>\n        fetch(URL)\n            .then((response) => {\n                response.json().then((json) => {\n                    setGitMeta({\n                        author: json.commit.commit.author.name,\n                        date: json.commit.commit.author.date,\n                        sha: json.commit.sha,\n                    });\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    // run only once\n    useEffect(() => {\n        fetchGitHub();\n    }, []);\n\n    const gitMetaComp = (\n        <>\n            <Typography color=\"textSecondary\" variant=\"caption\">\n                <h2>CityScopeJS Development Tracking</h2>\n                <h4>Last Commit</h4>\n                <div>Author: {JSON.parse(JSON.stringify(gitMeta.author))}</div>\n                <div>Date: {JSON.parse(JSON.stringify(gitMeta.date))}</div>\n                <div>Hash: {JSON.parse(JSON.stringify(gitMeta.sha))}</div>\n            </Typography>\n        </>\n    );\n\n    return gitMetaComp;\n}\n","import React from \"react\";\nimport {\n    Container,\n    Divider,\n    Typography,\n    makeStyles,\n    Box,\n    Fab,\n    Grid,\n} from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport GetGITdate from \"./GetGITdate\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: \"auto\",\n        height: \"100%\",\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    gridCell: { textAlign: \"center\" },\n    divider: {\n        margin: theme.spacing(3),\n    },\n}));\nexport default function SplashScreen() {\n    const classes = useStyles();\n\n    return (\n        <Page className={classes.root} title=\"Home\">\n            <Container maxWidth=\"sm\" className={classes.content}>\n                <Typography color=\"textPrimary\" variant=\"h1\">\n                    CityScopeJS\n                </Typography>\n                <Divider className={classes.divider} light />\n\n                <Typography color=\"textPrimary\" variant=\"h5\">\n                    CityScopeJS is a unified front-end for MIT CityScope\n                    project, an open-source urban modeling and simulation\n                    platform. CityScopeJS allows users to examine different\n                    urban-design alternatives, and observe their impact through\n                    multiple layers of urban analytics modules, such as economy,\n                    traffic and ABM simulation, urban access, storm-water, noise\n                    and more.\n                </Typography>\n                <Divider className={classes.divider} light />\n                <Grid container spacing={2}>\n                    <Grid item xs={12} l={6} md={6} xl={6}>\n                        <Typography\n                            color=\"textPrimary\"\n                            variant=\"h6\"\n                            gutterBottom\n                        >\n                            CityScopeJS is an open-source project, developed by\n                            MIT, the CityScope Network, and contributers from\n                            all over the world. Join us!\n                        </Typography>\n                    </Grid>\n\n                    <Grid\n                        item\n                        xs={12}\n                        l={6}\n                        md={6}\n                        xl={6}\n                        className={classes.gridCell}\n                    >\n                        <Fab\n                            href=\"http://github.com/CityScope/CS_cityscopeJS/\"\n                            color=\"default\"\n                        >\n                            <GitHubIcon />\n                        </Fab>\n                    </Grid>\n                </Grid>\n                <Divider className={classes.divider} light />\n                <Box flex={1}>\n                    <GetGITdate />\n                </Box>\n            </Container>\n        </Page>\n    );\n}\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport MainLayout from \"./layouts/MainLayout\";\nimport NotFoundView from \"./views/Errors/NotFoundView\";\nimport GridEditor from \"./views/GridEditor\";\nimport CityScopeJS from \"./views/CityScopeJS\";\nimport SplashScreen from \"./views/SplashScreen\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: <MainLayout />,\n        children: [\n            { path: \"/home\", element: <SplashScreen /> },\n            { path: \"CS_cityscopeJS\", element: <SplashScreen /> },\n\n            { path: \"/\", element: <CityScopeJS /> },\n            { path: \"/editor\", element: <GridEditor /> },\n            { path: \"*\", element: <Navigate to=\"/404\" /> },\n            { path: \"404\", element: <NotFoundView /> },\n        ],\n    },\n];\n\nexport default routes;\n","import React from \"react\";\nimport { useRoutes } from \"react-router-dom\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport GlobalStyles from \"./theme/GlobalStyles\";\nimport theme from \"./theme\";\nimport routes from \"./routes\";\n\nconst App = () => {\n    const routing = useRoutes(routes);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyles />\n            {routing}\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport Provider from \"./redux/Provider\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}