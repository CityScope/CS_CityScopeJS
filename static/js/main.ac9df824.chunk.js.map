{"version":3,"sources":["views/CityScopeJS/DeckglMap/deckglLayers/GridLayer.js","Components/LoadingModules/index.js","views/RenderedView/RenderedViewMap.js","settings/settings.js","utils/utils.js","redux/reducers/cityIOdataSlice.js","theme/typography.js","theme/index.js","Components/CityIO/index.js","redux/reducers/menuSlice.js","views/CityScopeJS/MenuContainer/TypesMenu/index.js","views/CityScopeJS/MenuContainer/LayersMenu/index.js","views/CityScopeJS/MenuContainer/ViewSettingsMenu/index.js","views/CityScopeJS/MenuContainer/ScenariosMenu/index.js","Components/ResizableDrawer.js","views/CityScopeJS/MenuContainer/EditMenu/index.js","views/CityScopeJS/MenuContainer/TableInfo/index.js","views/CityScopeJS/MenuContainer/index.js","views/CityScopeJS/DeckglMap/components/PaintBrush/PaintBrush.js","views/CityScopeJS/DeckglMap/components/CellMeta.js","views/CityScopeJS/DeckglMap/components/PaintBrush/index.js","views/CityScopeJS/DeckglMap/deckglLayers/AccessLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/AggregatedTripsLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/ABMLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/TextualLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GeojsonLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/MeshLayer.js","views/CityScopeJS/DeckglMap/index.js","views/CityScopeJS/VisContainer/RadarChart/index.js","views/CityScopeJS/VisContainer/BarChart/index.js","views/CityScopeJS/VisContainer/AreaCalc/index.js","Components/CollapsableCard.js","views/CityScopeJS/VisContainer/index.js","views/CityScopeJS/index.js","views/CityIOviewer/TableListLoading.js","views/CityIOviewer/CityIOlist.js","views/CityIOviewer/SelectedTable/index.js","views/CityIOviewer/SearchTablesList.js","views/CityIOviewer/CityIOdeckGLmap/legoio.png","views/CityIOviewer/CityIOdeckGLmap/index.js","views/CityIOviewer/index.js","views/RenderedView/index.js","views/ProjectionMapping/Keystone/Components/ViewStateInputs.js","views/ProjectionMapping/Keystone/ProjectionDeckMap/DeckMap.js","views/ProjectionMapping/Keystone/ProjectionDeckMap/index.js","views/ProjectionMapping/Keystone/Components/anchor.tsx","views/ProjectionMapping/Keystone/Components/Keystoner.tsx","views/ProjectionMapping/Keystone/Components/deleteLocalStorage.js","views/ProjectionMapping/Keystone/index.js","views/ProjectionMapping/index.js","views/GridEditor/EditorMap/EditorBrush.js","redux/reducers/editorMenuSlice.js","views/GridEditor/EditorMap/index.js","views/GridEditor/EditorMenu/GridPropsMenu/CenterMapButton/index.js","views/GridEditor/EditorMenu/GridPropsMenu/index.js","views/GridEditor/EditorMenu/GridMakerMenu/gridCreator.js","views/GridEditor/EditorMenu/GridMakerMenu/index.js","views/GridEditor/EditorMenu/TypesEditorMenu/index.js","views/GridEditor/EditorMenu/CommitGridMenu/index.js","views/GridEditor/EditorMenu/index.js","views/GridEditor/index.js","App.js","redux/reducers/index.js","index.js"],"names":["handleGridCellEditing","e","selectedType","setSelectedCellsState","pickingRadius","deckGLRef","height","color","name","multiSelectedObj","dim","x","y","current","pickObjects","width","multipleObjPicked","forEach","selected","thisCellProps","object","properties","interactive","testHex","hexToRgb","processGridData","cityIOdata","GEOGRID","newGEOGRID","JSON","parse","stringify","GEOGRIDDATA","length","features","i","id","GridLayer","data","editOn","state","keyDownState","selectedCellsState","opacity","updaters","setDraggingWhileEditing","setHoveredObj","deckGLref","GeoJsonLayer","pickable","extruded","wireframe","lineWidthScale","lineWidthMinPixels","getElevation","d","getFillColor","onClick","event","onDrag","onDragStart","onHover","onDragEnd","updateTriggers","transitions","LoadingModules","props","loadingModules","verticalPosition","barHeight","map","module","index","sx","bottom","zIndex","variant","style","marginRight","cube","CubeGeometry","type","xlen","ylen","zlen","RenderedViewMap","useEffect","document","addEventListener","evt","preventDefault","refMap","useRef","refDeckgl","renderDivRef","useState","renderedImage","setRenderedImage","isLoading","setIsLoading","prompt","setPrompt","userSeed","setUserSeed","useSelector","cityIOdataState","header","midGridCoordinates","lastCell","geometry","coordinates","firstCell","midGrid","longitude","latitude","zoom","bearing","rotation","pitch","viewState","setViewState","createElement","mergeCanvas","blobToDataUrl","Promise","r","a","FileReader","onload","readAsDataURL","then","target","result","p","container","spacing","item","xs","md","fullWidth","required","label","defaultValue","onChange","value","InputProps","inputProps","max","min","mapGL","getMap","deck","mapboxCanvas","getCanvas","redraw","deckglCanvas","canvas","context","getContext","globalAlpha","drawImage","jpegFile","toDataURL","scrollIntoView","behavior","toBlob","blob","formData","FormData","append","config","method","url","responseType","axios","res","buffer","Buffer","from","Blob","im","catch","error","console","log","disabled","size","flexDirection","display","direction","minHeight","position","ref","onViewStateChange","controller","touchZoom","touchRotate","keyboard","layers","SimpleMeshLayer","loaders","OBJLoader","mesh","getPosition","pntArr","first","last","getColor","getOrientation","getScale","cellSize","preserveDrawingBuffer","mapboxApiAccessToken","process","mapStyle","mapSettings","normal","maxWidth","maxHeight","minWidth","objectFit","filter","WebkitFilter","src","alt","generalSettings","csjsURL","location","window","csjsLocation","queryString","search","getCSJSLocation","cityIOSettings","docsURL","cityIO","baseURL","serverLocation","getServerLocation","ListOfTables","interval","cityIOmodules","expectUpdate","sat","blue","inverse","ABM","endTime","startTime","animationSpeed","initialViewState","maxZoom","expectedLayers","GRID_LAYER_CHECKBOX","displayName","cityIOmoduleName","initState","initSliderValue","ABM_LAYER_CHECKBOX","AGGREGATED_TRIPS_LAYER_CHECKBOX","ACCESS_LAYER_CHECKBOX","TEXTUAL_LAYER_CHECKBOX","GEOJSON_LAYER_CHECKBOX","MESH_LAYER_CHECKBOX","viewControlCheckboxes","ROTATE_CHECKBOX","ANIMATION_CHECKBOX","viewControlButtons","RESET_VIEW_BUTTON","ORTHO_VIEW_BUTTON","NORTH_VIEW_BUTTON","GridEditorSettings","dark","tableName","tz","ncols","nrows","projection","types","Office","LBCS","proportion","use","NAICS","Park","Residential","getAPICall","URL","get","response","hex","exec","parseInt","hexString","test","postToCityIO","endPoint","postURL","options","headers","Accept","status","cityIObaseURL","fetchJSON","fetch","json","getTableID","getModule","cityIOdataSlice","createSlice","initialState","cityIOisDone","cityIOtableName","reducers","updateCityIOdata","action","payload","toggleCityIOisDone","updateCityIOtableName","actions","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","h1","fontWeight","letterSpacing","h2","h3","h4","h5","h6","overline","theme","createTheme","palette","mode","primary","main","light","secondary","text","shape","borderRadius","overrides","MuiOutlinedInput","notchedOutline","borderColor","removeElement","array","elem","indexOf","splice","CityIO","settings","dispatch","useDispatch","mainHash","setMainHash","hashes","setHashes","listLoadingModules","setListLoadingModules","cityioURL","getCityIOmetaHash","newMainHash","setTimeout","newHashes","promises","modulesToUpdate","push","all","modulesFromCityIO","modulesData","reduce","obj","moduleName","m","timer","clearTimeout","getModules","menuSlice","editMenuState","typesMenuState","layersMenuState","viewSettingsMenuState","animationMenuState","toggleAnimationState","animationSpeedSliderValue","updateLayersMenuState","updateTypesMenuState","updateEditMenuState","updateViewSettingsMenuState","updateAnimationMenuState","TypesListMenu","landUseTypesList","setSelectedType","localTypesState","setLocalTypesState","SELECTED_TYPE","description","typesList","listMenuItemsArray","Object","keys","thisType","col","ListItem","Button","border","typeProps","thisTypeName","Typography","Math","random","Card","CardContent","Slider","valueLabelDisplay","val","update","newHeight","assign","onChangeCommitted","List","overflow","overflowY","createTypesIcons","LayersMenu","cityIOkeys","menuItem","isOn","slider","setLayersMenuState","sliderVal","setSliderVal","toggleListArr","Grid","includes","FormControlLabel","control","Checkbox","checked","_","updateSliderVal","makeLayerControlsMenu","ViewSettingsMenu","setViewSettingsMenuState","useLayoutEffect","buttonsArr","thisButton","VIEW_CONTROL_BUTTONS","handleButtonClicks","ButtonGroup","createViewControlButtons","menuItemList","hasSlider","createCheckboxes","ScenariosMenu","scenariosButtonsList","setScenariosButtonsList","scenarioToRestore","setScenariosToRestore","saveDialogState","setSaveDialogState","loadDialogState","setLoadDialogState","scenarioTextInput","setScenarioTextInput","handleClose","handleRestoreThisState","hash","finally","createScenariosButtons","scenarios","scenario","Tooltip","arrow","placement","title","handleOpenDialog","substring","IconButton","tempArr","scnToDelete","handleDeleteThisState","scenariosButtons","Badge","badgeContent","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","TextField","DialogActions","newScenario","autoFocus","maxDrawerWidth","documentElement","clientWidth","innerWidth","ResizableDrawer","children","defaultDrawerWidth","floor","drawerWidth","setDrawerWidth","handleMouseUp","removeEventListener","handleMouseMove","useCallback","newWidth","body","offsetLeft","offsetWidth","clientX","Box","onMouseDown","handleMouseDown","padding","dividerWidth","left","undefined","right","cursor","backgroundColor","Drawer","anchor","ModalProps","keepMounted","PaperProps","Paper","EditMenu","EDIT_BUTTON","editMenu","setEditMenu","endIcon","currentTarget","TableInfo","gutterBottom","MenuContainer","menuItemsArray","MenuItems","PaintBrush","mousePos","hoveredCells","isInteractiveCell","divSize","colorTrans","mouseX","mouseY","clientY","msg","mouseDown","pointerEvents","top","CellMeta","hoveredObj","PaintBrushContainer","BrushSelector","AccessLayer","accessData","access","HeatmapLayer","colorRange","threshold","getWeight","AggregatedTripsLayer","ABMmode","ABM2","PathLayer","shadowEnabled","trips","getPath","path","attr","getWidth","ABMLayer","zoomLevel","time","TripsLayer","getTimestamps","timestamps","widthScale","trailLength","currentTime","TextualLayer","textLayerData","infoIteam","info","TextLayer","getText","getSize","getAngle","getTextAnchor","getAlignmentBaseline","GeojsonLayer","geojson","stroked","filled","fill","getLineColor","stroke","MeshLayer","ceil","DeckGLMap","menuState","draggingWhileEditing","setKeyDownState","setMousePos","setMouseDown","setGEOGRIDDATA","editModeToggle","layersMenu","viewControlButton","toggleRotateCamera","animationTime","setAnimationTime","animation","animate","t","requestAnimationFrame","cancelAnimationFrame","setViewStateToTableHeader","orthographic","dataProps","layersKey","AGGREGATED_TRIPS","GRID","ACCESS","TEXTUAL","GEOJSON","MESH","layerOrder","onKeyDown","nativeEvent","key","onKeyUp","onMouseMove","onMouseUp","layerNameString","renderDeckLayers","dragPan","dragRotate","asyncRender","reuseMaps","preventStyleDiffing","scales","angleLines","suggestedMin","suggestedMax","grid","circular","pointLabels","ticks","optionsNoData","noData","labels","datasets","borderWidth","RadarChart","ChartJS","register","RadialLinearScale","PointElement","LineElement","Filler","Legend","radarData","setRadarData","indicators","viz_type","ref_value","createRadarData","CategoryScale","LinearScale","BarElement","Title","maintainAspectRatio","aspectRatio","responsive","BarChart","barChartData","setBarChartData","createBarChartData","AreaCalc","chartData","setChartData","ArcElement","geoGridData","gridCellData","typeName","createChartData","CollapsableCard","subheader","expand","setExpand","CardHeader","Divider","CardActions","ArrowDropDown","Collapse","in","VisContainer","lg","xl","CityScopeJS","TableListLoading","progress","setProgress","BorderLinearProgress","styled","LinearProgress","setInterval","oldProgress","diff","clearInterval","CityIOlist","getTablesList","tablesList","setTableList","fetchCityIOtables","cityIOlistURL","tablesArr","requestArr","oldArray","tableURL","tableHeader","toString","SelectedTable","selectedTable","clicked","cityscopeJSendpoint","projectionEndpoint","setOpen","component","Link","href","toLowerCase","SearchTablesList","setSelectedTable","defaultProps","getOptionLabel","option","Autocomplete","disablePortal","renderInput","params","newValue","CityIOdeckGLmap","markerInfo","setMarkerInfo","setClicked","setZoom","INIT_VIEW","zHeight","viewport","setViewport","setInitialViewState","isHovering","getElementById","markersArr","table","coord","to","TileLayer","minZoom","tileSize","renderSubLayers","tile","bbox","west","south","east","north","BitmapLayer","image","_imageCoordinateSystem","COORDINATE_SYSTEM","CARTESIAN","bounds","LineLayer","getSourcePosition","getTargetPosition","getPixelOffset","IconLayer","iconAtlas","icon","transitionDuration","transitionInterpolator","FlyToInterpolator","iconMapping","marker","mask","getIcon","sizeScale","views","GlobeView","Boolean","getCursor","isDragging","onViewportChange","ContextProvider","_MapContext","Provider","CityIOviewer","RenderedView","Container","mt","mb","ViewStateInputs","viewToggles","Number","isFinite","parseFloat","noValidate","autoComplete","DeckMap","TUIobject","tui","viewStateEditMode","editMode","active","MAP_STYLE","localStorage","getItem","vs","setItem","ProjectionDeckMap","layersVisibilityControl","setTime","visible","intensity","toggleArray","curr_active","TEXT","fadeTrail","halfAnchor","styles","AnchorComponent","vector","translation","onMouseEnter","className","transform","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","Keystoner","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","setState","onAnchorMouseUp","isEditMode","newVector","this","getBoundingClientRect","ls","prevProps","prevState","anchorStyle","anchorClassName","React","DeleteLocalStorage","alignItems","justify","startIcon","Keystone","tableRatio","setEditMode","setViewStateEditMode","removeItem","reload","ProjectionMapping","SelectionTarget","editorMenuSlice","editorMapCenter","gridMaker","gridProps","typesEditorState","updateEditorMapCenter","updateGridProps","updateGridMaker","updateTypesEditorState","EditorMap","setGrid","editorMenuState","selectedRow","createdGrid","pickedCellsState","latCenter","lonCenter","pickedObject","feature","cellInfo","rightButton","CenterMapButton","mapCenter","GridProps","formValues","setFormValues","handleFormUpdates","Stack","helperText","deg_to_rad","deg","PI","rad_to_deg","rad","randomProperty","GridMakerMenu","loading","setLoading","tableData","handleGridCreation","top_left_lon","top_left_lat","userPrj","cell_size","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","rndType","geojsonPolygon","polygon_xy","polygon_ll","v","ll","gridCreator","LoadingButton","resolve","loadingPosition","tableInitialState","columns","field","lookup","No","Web","TUI","LandUseTypesList","typesArray","createTypesArray","TypesEditorMenu","tableState","setTableState","setSelectedRow","rowColor","setRowColor","paging","selection","rowStyle","rowData","onRowClick","row","editable","onRowAdd","newData","onRowUpdate","oldData","CommitGridMenu","reqResponse","setReqResponse","generatedGrid","generatedGridBool","postGridToCityIO","DATA","GEOGRIDStructure","geoJsonFeatures","GEOGRIDObject","struct","newTypesList","oldType","element","makeGEOGRIDobject","GEOGRIDDATAObject","GEOGRIDDATA_object","makeGEOGRIDDATAobject","table_url","new_table_grid","reqResponseUI","EditorMenu","GridEditor","App","setTableName","viewSelectorState","setViewSelectorState","selectView","view","parsed","cityscope","render","ThemeProvider","CssBaseline","combineReducers","cityIOdataSliceReducer","menuSliceReducer","editorMenuSliceReducer","store","configureStore","reducer","rootReducer","ReactDOM"],"mappings":"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","file":"static/js/main.ac9df824.chunk.js","sourcesContent":["import { GeoJsonLayer } from \"deck.gl\";\nimport { hexToRgb, testHex } from \"../../../../utils/utils\";\n\n/**\n * Description. uses deck api to\n * collect objects in a region\n * @argument{object} e  picking event\n */\nexport const multipleObjPicked = (e, pickingRadius, deckGLRef) => {\n  const dim = pickingRadius;\n  const x = e.x - dim / 2;\n  const y = e.y - dim / 2;\n  let multipleObj = deckGLRef.current.pickObjects({\n    x: x,\n    y: y,\n    width: dim,\n    height: dim,\n  });\n  return multipleObj;\n};\n\n/**\n * Description. allow only to pick cells that are\n *  not of CityScope TUI & that are interactable\n * so to not overlap TUI activity\n */\nconst handleGridCellEditing = (\n  e,\n  selectedType,\n  setSelectedCellsState,\n  pickingRadius,\n  deckGLRef\n) => {\n  const { height, color, name } = selectedType;\n  const multiSelectedObj = multipleObjPicked(e, pickingRadius, deckGLRef);\n  multiSelectedObj.forEach((selected) => {\n    const thisCellProps = selected.object.properties;\n    if (thisCellProps && thisCellProps.interactive) {\n      thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n      thisCellProps.height = height;\n      thisCellProps.name = name;\n    }\n  });\n  setSelectedCellsState(multiSelectedObj);\n};\n\n/**\n * Description. gets `props` with geojson\n * and process the interactive area\n */\nexport const processGridData = (cityIOdata) => {\n  //  get the static grid\n  const GEOGRID = cityIOdata.GEOGRID;\n  // create a copy of the GEOGRID object\n  const newGEOGRID = JSON.parse(JSON.stringify(GEOGRID));\n\n  // if GEOGRRIDDATA exist and is the same length as our grid\n  if (\n    cityIOdata.GEOGRIDDATA &&\n    cityIOdata.GEOGRIDDATA.length === cityIOdata.GEOGRID.features.length\n  ) {\n    // get the grid data\n    const GEOGRIDDATA = cityIOdata.GEOGRIDDATA;\n    // update GEOGRID features from GEOGRIDDATA on cityio\n    for (let i = 0; i < GEOGRID.features.length; i++) {\n      newGEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n      // inject id with ES7 copy of the object\n      newGEOGRID.features[i].properties = {\n        ...newGEOGRID.features[i].properties,\n        id: i,\n      };\n    }\n  }\n  return newGEOGRID;\n};\n\nexport default function GridLayer({\n  data,\n  editOn,\n  state: {\n    selectedType,\n    keyDownState,\n    selectedCellsState,\n    pickingRadius,\n    opacity,\n  },\n  updaters: { setSelectedCellsState, setDraggingWhileEditing, setHoveredObj },\n  deckGLref,\n}) {\n  return new GeoJsonLayer({\n    opacity,\n    id: \"GRID\",\n    data,\n    pickable: true,\n    extruded: true,\n    wireframe: true,\n    lineWidthScale: 1,\n    lineWidthMinPixels: 2,\n    getElevation: (d) => d.properties.height[1],\n    getFillColor: (d) => d.properties.color,\n\n    onClick: (event) => {\n      if (selectedType && editOn && keyDownState !== \"Shift\")\n        handleGridCellEditing(\n          event,\n          selectedType,\n          setSelectedCellsState,\n          pickingRadius,\n          deckGLref\n        );\n    },\n\n    onDrag: (event) => {\n      if (selectedType && editOn && keyDownState !== \"Shift\")\n        handleGridCellEditing(\n          event,\n          selectedType,\n          setSelectedCellsState,\n          pickingRadius,\n          deckGLref\n        );\n    },\n\n    onDragStart: () => {\n      if (selectedType && editOn && keyDownState !== \"Shift\") {\n        setDraggingWhileEditing(true);\n      }\n    },\n\n    onHover: (e) => {\n      if (e.object) {\n        setHoveredObj(e);\n      }\n    },\n\n    onDragEnd: () => {\n      setDraggingWhileEditing(false);\n    },\n    updateTriggers: {\n      getFillColor: selectedCellsState,\n      getElevation: selectedCellsState,\n    },\n    transitions: {\n      getFillColor: 300,\n      getElevation: 300,\n    },\n  });\n}\n","import { Typography, Box } from \"@mui/material\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nconst LoadingModules = (props) => {\n  const { loadingModules, verticalPosition, barHeight } = props;\n  return (\n    <>\n      {loadingModules.map((module, index) => {\n        return (\n          <Box\n            key={\"box_\" + module}\n            sx={{\n              bottom: verticalPosition === \"bottom\" ? (index + 1) * 10 : \"auto\",\n              width: \"100%\",\n              zIndex: 100000,\n            }}\n          >\n            <LinearProgress\n              sx={{ height: barHeight || 10 }}\n              color={\"secondary\"}\n            />\n            <Typography\n              variant=\"caption\"\n              color=\"primary\"\n              style={{ marginRight: \"1vw\" }}\n            >\n              Loading {module}\n            </Typography>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n\nexport default LoadingModules;\n","/**\n * How to save a screenshot from deck.gl map to a file? \n // https://codesandbox.io/s/export-react-component-as-image-tgqmq?file=/src/App.js:169-175\n // https://github.com/xap5xap/image-export-deckgl-rect/blob/master/src/App.js\n//  https://gist.github.com/adamilyas/88445938af94b2d29723f92272123f43 \n * \n */\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport DeckGL from \"deck.gl\";\nimport { SimpleMeshLayer } from \"@deck.gl/mesh-layers\";\nimport { OBJLoader } from \"@loaders.gl/obj\";\nimport { processGridData } from \"../CityScopeJS/DeckglMap/deckglLayers/GridLayer\";\nimport { CubeGeometry } from \"@luma.gl/engine\";\nimport { mapSettings } from \"../../settings/settings\";\nimport Map from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport LoadingModules from \"../../Components/LoadingModules\";\nimport {\n  Button,\n  CircularProgress,\n  TextField,\n  Box,\n  Typography,\n  Grid,\n  Paper,\n  Stack,\n} from \"@mui/material\";\n\nimport axios from \"axios\";\n\nconst cube = new CubeGeometry({ type: \"x,z\", xlen: 0, ylen: 0, zlen: 0 });\n\nexport default function RenderedViewMap() {\n  // fix deck view rotate\n  useEffect(() => {\n    document.addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const refMap = useRef();\n  const refDeckgl = useRef();\n  const renderDivRef = useRef();\n\n  const [renderedImage, setRenderedImage] = useState(null);\n  const [isLoading, setIsLoading] = useState();\n  const [prompt, setPrompt] = useState(\n    \"Aerial view of the MIT Campus in Cambridge, Massachusetts. Realistic. Accurate. Sunset with long shadows. Beautiful.\"\n  );\n  const [userSeed, setUserSeed] = useState(1024);\n  const serverURL = \"https://virtualscope.media.mit.edu/\";\n\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const GEOGRID = processGridData(cityIOdata);\n  const header = GEOGRID.properties.header;\n\n  const midGrid = () => {\n    const lastCell =\n      cityIOdata.GEOGRID.features[cityIOdata.GEOGRID.features.length - 1]\n        .geometry.coordinates[0][0];\n    const firstCell = cityIOdata.GEOGRID.features[0].geometry.coordinates[0][0];\n    const midGrid = [\n      (firstCell[0] + lastCell[0]) / 2,\n      (firstCell[1] + lastCell[1]) / 2,\n    ];\n    return midGrid;\n  };\n\n  const midGridCoordinates = midGrid();\n  const [viewState, setViewState] = useState({\n    longitude: midGridCoordinates[0],\n    latitude: midGridCoordinates[1],\n    zoom: 15,\n    bearing: 360 - header.rotation,\n    pitch: 45,\n  });\n\n  const [mergeCanvas] = useState(document.createElement(\"canvas\"));\n\n  const handleCapture = () => {\n    if (!refMap.current || !refDeckgl.current) {\n      return;\n    }\n    setIsLoading(true);\n    const mapGL = refMap.current.getMap();\n    const deck = refDeckgl.current.deck;\n    const mapboxCanvas = mapGL.getCanvas();\n    deck.redraw(true);\n    const deckglCanvas = deck.canvas;\n    mergeCanvas.width = mapboxCanvas.width;\n    mergeCanvas.height = mapboxCanvas.height;\n    var context = mergeCanvas.getContext(\"2d\");\n    context.globalAlpha = 1.0;\n    context.drawImage(mapboxCanvas, 0, 0);\n    context.globalAlpha = 1.0;\n    context.drawImage(deckglCanvas, 0, 0);\n    const jpegFile = mergeCanvas.toDataURL(\"image/jpeg\");\n    setRenderedImage(jpegFile);\n    renderDivRef.current?.scrollIntoView({ behavior: \"smooth\" });\n\n    mergeCanvas.toBlob(async (blob) => {\n      var formData = new FormData();\n      formData.append(\"image\", blob, \"image.jpg\");\n      formData.append(\"prompt\", prompt);\n      formData.append(\"user_seed\", userSeed);\n      formData.append(\"from\", \"frontend\");\n\n      const config = {\n        method: \"POST\",\n        url: serverURL,\n        data: formData,\n        responseType: \"arraybuffer\",\n      };\n      await axios(config)\n        .then(async (res) => {\n          const buffer = Buffer.from(res.data, \"base64\");\n          const im = await blobToDataUrl(new Blob([buffer]));\n          setRenderedImage(im);\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          setIsLoading(false);\n          console.log(error);\n        });\n    });\n  };\n\n  const blobToDataUrl = (data) => {\n    return new Promise((r) => {\n      let a = new FileReader();\n      a.onload = r;\n      a.readAsDataURL(data);\n    }).then((e) => e.target.result);\n  };\n\n  return (\n    <>\n      {isLoading && <LoadingModules loadingModules={[\"...\"]} />}\n      <Box p={2}>\n        <Grid container spacing={2}>\n          {/* TEXT */}\n          <Grid item>\n            <Typography variant=\"caption\">\n              DeepScope uses a machine learning model to generate urban scenes\n              in real-time, based on designs preform in the CitySCcope platform.\n              By implementing 'Stable diffusion', an open-source Transformer\n              model, this tool allows for real-time prototyping and\n              visualizations of urban design proposals, bypassing the need for\n              expensive and time-consuming rendering.\n            </Typography>\n          </Grid>\n\n          <Grid item xs={12} md={10}>\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              required\n              label=\"Text Prompt Description of the Scene\"\n              defaultValue={prompt}\n              variant=\"outlined\"\n              onChange={(e) => setPrompt(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12} md={2}>\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              InputProps={{\n                inputProps: {\n                  max: 10000,\n                  min: 0,\n                },\n              }}\n              label=\"Random seed\"\n              defaultValue={userSeed}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(e) => setUserSeed(e.target.value)}\n            />\n          </Grid>\n\n          <Grid item xs={12} md={12}>\n            <Button\n              fullWidth\n              color=\"secondary\"\n              variant=\"outlined\"\n              onClick={handleCapture}\n              disabled={isLoading}\n            >\n              {!isLoading && \"Capture & Render\"}\n              {isLoading && (\n                <>\n                  <CircularProgress size={14} />\n                  <Typography>\n                    Rendering captured view... [can take ~15 seconds]\n                  </Typography>\n                </>\n              )}\n            </Button>\n          </Grid>\n          {/* Deck Map */}\n          <Grid item xs={12}>\n            <Paper\n              variant=\"outlined\"\n              sx={{\n                variant: \"outlined\",\n                p: 2,\n                flexDirection: \"column\",\n                display: \"flex\",\n              }}\n            >\n              <Stack spacing={2} direction=\"column\">\n                <Typography variant=\"h5\">CityScope Model View</Typography>\n                <Box\n                  sx={{\n                    height: \"576px\",\n                    minHeight: \"576px\",\n                    width: \"auto\",\n                    position: \"relative\",\n                  }}\n                >\n                  <DeckGL\n                    ref={refDeckgl}\n                    viewState={viewState}\n                    onViewStateChange={({ viewState }) =>\n                      setViewState(viewState)\n                    }\n                    controller={\n                      isLoading\n                        ? false\n                        : {\n                            touchZoom: true,\n                            touchRotate: true,\n                            keyboard: false,\n                          }\n                    }\n                    layers={[\n                      new SimpleMeshLayer({\n                        id: \"mesh-layer\",\n                        data: GEOGRID.features,\n                        loaders: [OBJLoader],\n                        mesh: cube,\n\n                        getPosition: (d) => {\n                          const pntArr = d.geometry.coordinates[0];\n                          const first = pntArr[1];\n                          const last = pntArr[pntArr.length - 2];\n                          const center = [\n                            (first[0] + last[0]) / 2,\n                            (first[1] + last[1]) / 2,\n                            // add the height of the grid cell\n                            d.properties.height.length > 1\n                              ? d.properties.height[1] > 1\n                                ? d.properties.height[1] / 2\n                                : 1\n                              : d.properties.height > 1\n                              ? d.properties.height / 2\n                              : 1,\n                          ];\n                          return center;\n                        },\n                        getColor: (d) =>\n                          d.properties.interactive\n                            ? d.properties.color\n                            : [0, 0, 0, 0],\n                        opacity: 0.75,\n                        getOrientation: (d) => [-180, header.rotation, -90],\n                        getScale: (d) => [\n                          GEOGRID.properties.header.cellSize / 2,\n                          d.properties.height.length > 1\n                            ? d.properties.height[1] > 1\n                              ? d.properties.height[1] / 2\n                              : 1\n                            : d.properties.height > 1\n                            ? d.properties.height / 2\n                            : 1,\n                          GEOGRID.properties.header.cellSize / 2,\n                        ],\n\n                        updateTriggers: {\n                          getScale: GEOGRID,\n                        },\n                      }),\n                    ]}\n                  >\n                    <Map\n                      ref={refMap}\n                      preserveDrawingBuffer={true} //! This is critical to preserve the WebGL drawing buffer\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                      mapStyle={mapSettings.map.mapStyle.normal}\n                    />\n                  </DeckGL>\n                </Box>\n              </Stack>\n            </Paper>\n          </Grid>\n          {/* Result IMG */}\n          <Grid item xs={12}>\n            <Paper\n              variant=\"outlined\"\n              sx={{\n                p: 2,\n                display: \"flex\",\n                flexDirection: \"column\",\n                height: \"auto\",\n                width: \"auto\",\n              }}\n            >\n              <Stack spacing={2} direction=\"column\">\n                <Typography variant=\"h5\">Captured & Rendered View</Typography>\n\n                {renderedImage && (\n                  <div ref={renderDivRef}>\n                    <img\n                      style={{\n                        maxWidth: \"100%\",\n                        maxHeight: \"100%\",\n                        minWidth: \"100%\",\n                        objectFit: \"contain\",\n                        filter: isLoading ? \"blur(3px)\" : \"none\",\n                        WebkitFilter: isLoading ? \"blur(3px)\" : \"none\",\n                      }}\n                      src={renderedImage}\n                      alt=\"screenshot\"\n                    />\n                  </div>\n                )}\n              </Stack>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n","// import { cityIOModeBool } from \"../utils/utils\";\nimport queryString from \"query-string\";\n\nconst getServerLocation = () => {\n  const location = window.location;\n  const parsed = queryString.parse(location.search);\n\n  const serverLocation =\n    \"cityio_local\" in parsed\n      ? \"http://127.0.0.1:5000/api/\"\n      : \"https://cityio.media.mit.edu/api/\";\n  console.log(\"cityIO server location: \", serverLocation);\n  return serverLocation;\n};\n// get the location of the app (local or remote)\nconst getCSJSLocation = () => {\n  const location = window.location;\n  const parsed = queryString.parse(location.search);\n  const csjsLocation =\n    \"csjs_local\" in parsed\n      ? \"http://localhost:3000/CS_cityscopeJS/\"\n      : \"https://cityscope.media.mit.edu/CS_cityscopeJS/\";\n  console.log(\"cityScopeJS location: \", csjsLocation);\n  return csjsLocation;\n};\n\nexport const generalSettings = {\n  csjsURL: getCSJSLocation(),\n};\n\nexport const cityIOSettings = {\n  docsURL:\n    \"https://raw.githubusercontent.com/CityScope/CS_cityscopeJS/master/docs/\",\n  cityIO: {\n    baseURL: getServerLocation(),\n\n    ListOfTables: \"tables/list/\",\n    interval: 500,\n    cityIOmodules: [\n      { name: \"header\", expectUpdate: false },\n      { name: \"GEOGRID\", expectUpdate: false },\n      { name: \"ABM2\", expectUpdate: true },\n      { name: \"geojson\", expectUpdate: true },\n      { name: \"grid\", expectUpdate: false },\n      { name: \"access\", expectUpdate: true },\n      { name: \"GEOGRIDDATA\", expectUpdate: false },\n      { name: \"indicators\", expectUpdate: true },\n      { name: \"textual\", expectUpdate: true },\n      { name: \"scenarios\", expectUpdate: true },\n      { name: \"tui\", expectUpdate: true },\n    ],\n  },\n};\nexport const mapSettings = {\n  map: {\n    mapStyle: {\n      sat: \"mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd?fresh=true\",\n      blue: \"mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq?fresh=true\",\n      inverse: \"mapbox://styles/relnox/cjlu6w5sc1dy12rmn4kl2zljn?fresh=true\",\n      normal: \"mapbox://styles/relnox/cl8dv36nv000t14qik9yg4ys6?fresh=true\"\n    },\n    layers: {\n      ABM: {\n        endTime: 86400,\n        startTime: 43200,\n        animationSpeed: 10,\n      },\n    },\n    initialViewState: {\n      maxZoom: 22,\n      zoom: 15,\n      pitch: 0,\n      bearing: 0,\n    },\n  },\n};\n\nexport const expectedLayers = {\n  GRID_LAYER_CHECKBOX: {\n    displayName: \"CS Grid\",\n    cityIOmoduleName: \"GEOGRID\",\n    initState: true,\n    initSliderValue: 50,\n  },\n  ABM_LAYER_CHECKBOX: {\n    displayName: \"Animated Trips\",\n    cityIOmoduleName: \"ABM2\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  AGGREGATED_TRIPS_LAYER_CHECKBOX: {\n    displayName: \"Aggregated Trips\",\n    cityIOmoduleName: \"ABM2\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  ACCESS_LAYER_CHECKBOX: {\n    displayName: \"Heatmap\",\n    cityIOmoduleName: \"access\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  TEXTUAL_LAYER_CHECKBOX: {\n    displayName: \"Text\",\n    cityIOmoduleName: \"text\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  GEOJSON_LAYER_CHECKBOX: {\n    displayName: \"GeoJson\",\n    cityIOmoduleName: \"geojson\",\n    initState: false,\n    initSliderValue: 50,\n  },\n  MESH_LAYER_CHECKBOX: {\n    displayName: \"Mesh <beta>\",\n    cityIOmoduleName: \"GEOGRID\",\n    initState: false,\n    initSliderValue: 100,\n  },\n};\n\nexport const viewControlCheckboxes = {\n  ROTATE_CHECKBOX: {\n    displayName: \"Rotate Camera\",\n    initState: false,\n    initSliderValue: 100,\n  },\n\n  ANIMATION_CHECKBOX: {\n    displayName: \"Toggle Animation\",\n    initState: false,\n    initSliderValue: 100,\n  },\n};\n\nexport const viewControlButtons = {\n  RESET_VIEW_BUTTON: {\n    displayName: \"Reset View\",\n    initState: false,\n  },\n  ORTHO_VIEW_BUTTON: {\n    displayName: \"Ortho View\",\n    initState: false,\n  },\n  NORTH_VIEW_BUTTON: {\n    displayName: \"North View\",\n    initState: false,\n  },\n};\n\nexport const GridEditorSettings = {\n  map: {\n    mapStyle: {\n      sat: \"mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd?fresh=true\",\n      dark: \"mapbox://styles/relnox/cjl58dpkq2jjp2rmzyrdvfsds?fresh=true\",\n      blue: \"mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq?fresh=true\",\n    },\n  },\n\n  GEOGRIDDATA: {\n    color: [0, 0, 0],\n    height: [0, 50, 100],\n    id: 0,\n    interactive: \"Web\",\n    name: \"name\",\n  },\n\n  GEOGRID: {\n    features: [],\n    properties: {\n      header: {\n        tableName: \"test\",\n        cellSize: 50,\n        latitude: 42.3664655,\n        longitude: -71.0854323,\n        tz: -5,\n        ncols: 20,\n        nrows: 20,\n        rotation: 0,\n        projection:\n          \"+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000 +y_0=750000 +ellps=GRS80 +datum=NAD83 +units=m +no_def\",\n      },\n\n      types: {\n        Office: {\n          LBCS: [\n            {\n              proportion: 1,\n              use: {\n                \"2310\": 1,\n              },\n            },\n          ],\n          NAICS: [\n            {\n              proportion: 1,\n              use: {\n                \"5400\": 1,\n              },\n            },\n          ],\n          interactive: \"Web\",\n          color: \"#FF5277\",\n          height: [0, 50, 100],\n        },\n        Park: {\n          LBCS: [\n            {\n              proportion: 1,\n              use: {\n                \"7240\": 1,\n              },\n            },\n          ],\n          NAICS: null,\n          interactive: \"Web\",\n          color: \"#38C9FF\",\n        },\n        Residential: {\n          LBCS: [\n            {\n              proportion: 1,\n              use: {\n                \"1100\": 1,\n              },\n            },\n          ],\n          NAICS: null,\n          interactive: \"Web\",\n          color: \"#FFFF33\",\n          height: [0, 50, 100],\n        },\n      },\n    },\n    type: \"FeatureCollection\",\n  },\n};\n","import axios from \"axios\";\nimport {cityIOSettings} from \"../settings/settings\";\n\n/**\n * Get API call using axios\n */\n\nexport const getAPICall = async (URL) => {\n  try {\n    const response = await axios.get(URL);\n    return response.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n/**\n * convert rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n  function valToHex(c) {\n    var hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n  }\n  return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n\n\n\n/**\n * convert hex to rgb array\n */\nexport function hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n      ]\n    : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n  let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n  return isHex;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const postToCityIO = (data, tableName, endPoint) => {\n  let postURL = cityIOSettings.cityIO.baseURL + \"table/\" + tableName + endPoint;\n\n  const options = {\n    method: \"post\",\n    url: postURL,\n    data: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n  axios(options)\n    .then((res) => {\n      if (res.data.status === \"ok\") {\n        console.log(`--> cityIO endpoint ${postURL} was updated <--`);\n      }\n    })\n    .catch((error) => {\n      console.log(\"ERROR:\", error);\n    });\n};\n\nconst cityIObaseURL = cityIOSettings.cityIO.baseURL;\n\nexport const fetchJSON = async (url, options) => {\n  const response = await fetch(url, options);\n  const data = await response.json();\n  return data;\n};\n\nexport const getTablePrevCommitHash = async (id) =>\n  await fetchJSON(`${cityIObaseURL}commit/${id}/`).then((c) => {\n    return { parent: c.parent, meta: c };\n  });\n\nexport const getTableID = async (tableName) =>\n  await fetchJSON(\n    `${cityIObaseURL}table/${tableName}/meta/hashes/GEOGRIDDATA/`\n  );\n\nexport const getCommit = async (id) =>\n  await fetchJSON(`${cityIObaseURL}commit/${id}/`);\n\nexport const getModule = async (id) =>\n  await fetchJSON(`${cityIObaseURL}module/${id}/`);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const cityIOdataSlice = createSlice({\n  name: \"cityIOdataState\",\n  initialState: {},\n  cityIOisDone: false,\n  cityIOtableName: \"\",\n  reducers: {\n    updateCityIOdata: (state, action) => {\n      state.cityIOdata = action.payload;\n    },\n    toggleCityIOisDone: (state, action) => {\n      state.cityIOisDone = action.payload;\n    },\n    updateCityIOtableName: (state, action) => {\n      state.cityIOtableName = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateCityIOdata,\n  toggleCityIOisDone,\n  updateCityIOtableName,\n} = cityIOdataSlice.actions;\nexport default cityIOdataSlice.reducer;\n","const typography = {\n    fontFamily: `\"Roboto Mono\", sans-serif`,\n    fontSize: 11,\n    fontWeightLight: 100,\n    fontWeightRegular: 500,\n    fontWeightMedium: 700,\n\n    h1: {\n        fontWeight: 700,\n        fontSize: 45,\n        letterSpacing: \"-1px\",\n    },\n    h2: {\n        fontWeight: 800,\n        fontSize: 29,\n        letterSpacing: \"-0.24px\",\n    },\n    h3: {\n        fontWeight: 700,\n        fontSize: 24,\n        letterSpacing: \"-0.06px\",\n    },\n    h4: {\n        fontWeight: 500,\n        fontSize: 20,\n        letterSpacing: \"-0.06px\",\n    },\n    h5: {\n        fontWeight: 500,\n        fontSize: 16,\n        letterSpacing: \"-0.05px\",\n    },\n    h6: {\n        fontWeight: 500,\n        fontSize: 14,\n        letterSpacing: \"-0.05px\",\n    },\n    overline: {\n        fontWeight: 500,\n    },\n};\n\nexport default typography;\n","import typography from \"./typography\";\nimport { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  typography,\n  palette: {\n\n    mode: \"dark\",\n    primary: {\n      main: \"#FFF\",\n      light: \"#ff5278\",\n    },\n    secondary: {\n      main: \"#ff5278\",\n    },\n    text: {\n      primary: \"#fff\",\n      secondary: \"#ff5278\",\n    },\n  },\n  shape: {\n    borderRadius: 10,\n  },\n  overrides: {\n    MuiOutlinedInput: {\n      notchedOutline: {\n        borderColor: \"#ff5278\",\n      },\n    },\n  },\n});\n\nexport default theme;\n","import { useEffect, useState } from \"react\";\nimport { cityIOSettings } from \"../../settings/settings\";\nimport {\n  updateCityIOdata,\n  toggleCityIOisDone,\n} from \"../../redux/reducers/cityIOdataSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getAPICall } from \"../../utils/utils\";\nimport LoadingModules from \"../../Components/LoadingModules\";\n\nconst removeElement = (array, elem) => {\n  var index = array.indexOf(elem);\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n  return array;\n};\n\nconst CityIO = (props) => {\n  const settings = cityIOSettings;\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const { tableName } = props;\n\n  const [mainHash, setMainHash] = useState(null);\n  const [hashes, setHashes] = useState({});\n  const [listLoadingModules, setListLoadingModules] = useState([]);\n  const cityioURL = `${settings.cityIO.baseURL}table/${tableName}/`;\n\n  /**\n   * start fetching API hashes to check for new data\n   */\n  useEffect(() => {\n    const timer = setTimeout(getCityIOmetaHash, settings.cityIO.interval);\n    console.log(\"reading cityIO every \" + settings.cityIO.interval + \"ms\");\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * gets the main hash of this cityIO table\n   * on a constant loop to check for updates\n   */\n  async function getCityIOmetaHash() {\n    // recursively get hashes\n    const newMainHash = await getAPICall(cityioURL + \"meta/id/\");\n    // is it a new hash?\n    if (mainHash !== newMainHash) {\n      setMainHash(newMainHash);\n    }\n    // do it forever\n    setTimeout(getCityIOmetaHash, settings.cityIO.interval);\n  }\n\n  useEffect(() => {\n    //! only update if hashId changes\n    if (!mainHash) {\n      return;\n    }\n    // if we have a new hash, start getting submodules\n    getModules();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mainHash]);\n\n  async function getModules() {\n    console.log(\"--- starting update ---\");\n    // wait to get all of this table's hashes\n    const newHashes = await getAPICall(cityioURL + \"meta/hashes/\");\n    // init array of GET promises\n    const promises = [];\n    // init array of modules names\n    const loadingModules = [];\n    // get an array of modules to update\n    const modulesToUpdate = settings.cityIO.cityIOmodules.map((x) => x.name);\n    // for each of the modules in settings, add api call to promises\n    modulesToUpdate.forEach((module) => {\n      // if this module has an old hash\n      // we assume it is about to be updated\n      if (hashes[module] !== newHashes[module]) {\n        // add this module URL to an array of GET requests\n        promises.push(getAPICall(`${cityioURL}${module}/`));\n        // and also add this module name to array\n        // of modules that we await for\n        loadingModules.push(module);\n      } else {\n        promises.push(null);\n      }\n      setListLoadingModules(loadingModules);\n    });\n\n    // GET all modules data\n    const modulesFromCityIO = await Promise.all(promises);\n    setHashes(newHashes);\n\n    // update cityio object with modules data\n    let modulesData = modulesToUpdate.reduce((obj, moduleName, index) => {\n      // if this module has data\n      if (modulesFromCityIO[index]) {\n        setListLoadingModules(removeElement(listLoadingModules, moduleName));\n\n        return { ...obj, [moduleName]: modulesFromCityIO[index] };\n      } else {\n        return obj;\n      }\n    }, cityIOdata);\n    let m = { ...modulesData, tableName: tableName };\n    dispatch(updateCityIOdata(m));\n    console.log(\"--- done updating from cityIO ---\");\n    dispatch(toggleCityIOisDone(true));\n  }\n\n  return <LoadingModules loadingModules={listLoadingModules} />;\n};\n\nexport default CityIO;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const menuSlice = createSlice({\n  name: \"menuState\",\n  initialState: {\n    editMenuState: {},\n    typesMenuState: {},\n    layersMenuState: {},\n    viewSettingsMenuState: {},\n    animationMenuState: {\n      toggleAnimationState: false,\n      animationSpeedSliderValue: 10,\n    },\n  },\n  reducers: {\n    updateLayersMenuState: (state, action) => {\n      state.layersMenuState = action.payload;\n    },\n\n    updateTypesMenuState: (state, action) => {\n      state.typesMenuState = action.payload;\n    },\n\n    updateEditMenuState: (state, action) => {\n      state.editMenuState = action.payload;\n    },\n\n    updateViewSettingsMenuState: (state, action) => {\n      state.viewSettingsMenuState = action.payload;\n    },\n\n    updateAnimationMenuState: (state, action) => {\n      state.animationMenuState = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateLayersMenuState,\n  updateTypesMenuState,\n  updateEditMenuState,\n  updateViewSettingsMenuState,\n  updateAnimationMenuState,\n} = menuSlice.actions;\nexport default menuSlice.reducer;\n","import { useEffect, useState } from \"react\";\nimport {\n  Slider,\n  Card,\n  Typography,\n  ListItem,\n  CardContent,\n  Button,\n  List,\n} from \"@mui/material\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateTypesMenuState } from \"../../../../redux/reducers/menuSlice\";\n\nexport default function TypesListMenu() {\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const landUseTypesList = cityIOdata.GEOGRID.properties.types;\n  const [selectedType, setSelectedType] = useState();\n  const [localTypesState, setLocalTypesState] = useState();\n  // handle selected type\n  const handleListItemClick = (typeProps, thisTypeName) => {\n    typeProps = { ...typeProps, thisTypeName: thisTypeName };\n    setSelectedType(typeProps);\n  };\n\n  useEffect(() => {\n    dispatch(\n      updateTypesMenuState({\n        SELECTED_TYPE: selectedType,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedType]);\n\n  // get the LBCS/NAICS types info\n  const LBCS = selectedType && selectedType.LBCS;\n  const NAICS = selectedType && selectedType.NAICS;\n  // get type description text if exist\n  let description =\n    selectedType && selectedType.description ? selectedType.description : null;\n\n  // create the types themselves\n  const createTypesIcons = (typesList) => {\n    let listMenuItemsArray = [];\n    Object.keys(typesList).forEach((thisType, index) => {\n      // get color\n      let col = typesList[thisType].color;\n\n      if (typeof col !== \"string\") {\n        col =\n          \"rgb(\" +\n          typesList[thisType].color[0] +\n          \",\" +\n          typesList[thisType].color[1] +\n          \",\" +\n          typesList[thisType].color[2] +\n          \")\";\n      }\n      // check if this type has height prop\n      listMenuItemsArray.push(\n        <div key={`li_types_top_div_${index}`}>\n          <ListItem key={`li_menu_${index}`}>\n            <Button\n              fullWidth\n              size=\"small\"\n              key={Math.random()}\n              variant=\"outlined\"\n              sx={{\n                \"&.MuiButton-text\": { color: { col } },\n                border: \"solid 1px \" + col,\n              }}\n              onClick={() => handleListItemClick(typesList[thisType], thisType)}\n            >\n              <Typography color={col} variant=\"caption\">\n                {thisType}\n              </Typography>\n            </Button>\n          </ListItem>\n\n          {selectedType && selectedType.thisTypeName === thisType && (\n            <ListItem key={`li_types_${index}`}>\n              <Card\n                variant=\"outlined\"\n                key={`li_types_card_${index}`}\n                sx={{ width: \"100%\" }}\n              >\n                <CardContent>\n                  {description && (\n                    <Typography variant=\"caption\">{description}</Typography>\n                  )}\n\n                  {selectedType &&\n                    selectedType.thisTypeName &&\n                    selectedType.height && (\n                      <div key={`li_types_div_${index}`}>\n                        <Typography>Set Height</Typography>\n\n                        <Slider\n                          key={`li_types_slider_${selectedType.thisTypeName}`}\n                          valueLabelDisplay=\"auto\"\n                          size=\"small\"\n                          // on change update the local state\n                          onChange={(e, val) =>\n                            setLocalTypesState((localTypesState) => {\n                              const update = { ...localTypesState };\n                              const newHeight = [\n                                selectedType.height[0],\n                                val,\n                                selectedType.height[2],\n                              ];\n                              Object.assign(update, { height: newHeight });\n                              return update;\n                            })\n                          }\n                          // on change committed update the redux state\n                          onChangeCommitted={(e, val) => {\n                            setSelectedType({\n                              ...selectedType,\n                              height: [\n                                selectedType.height[0],\n                                val,\n                                selectedType.height[2],\n                              ],\n                            });\n                          }}\n                          min={selectedType.height[0]}\n                          value={\n                            localTypesState &&\n                            localTypesState[selectedType] &&\n                            localTypesState[selectedType].height[1]\n                          }\n                          max={selectedType.height[2]}\n                        />\n                      </div>\n                    )}\n                  {LBCS && (\n                    <div>\n                      <Typography>LBCS</Typography>\n                      <Typography variant=\"caption\">\n                        {JSON.stringify(LBCS, null, \"\\t\")}\n                      </Typography>\n                    </div>\n                  )}\n                  {NAICS && (\n                    <div>\n                      <Typography>NAICS</Typography>\n                      <Typography variant=\"caption\">\n                        {JSON.stringify(NAICS, null, \"\\t\")}\n                      </Typography>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </ListItem>\n          )}\n        </div>\n      );\n    });\n\n    return (\n      <List\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          maxHeight: 400,\n          overflow: \"hidden\",\n          overflowY: \"scroll\",\n        }}\n      >\n        {listMenuItemsArray}\n      </List>\n    );\n  };\n\n  return <>{createTypesIcons(landUseTypesList)}</>;\n}\n","import {\n  Slider,\n  Checkbox,\n  Typography,\n  FormControlLabel,\n  Grid,\n} from \"@mui/material\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { expectedLayers } from \"../../../../settings/settings\";\nimport { updateLayersMenuState } from \"../../../../redux/reducers/menuSlice\";\n\nfunction LayersMenu() {\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n\n  // get the keys from cityIOdata\n  const cityIOkeys = Object.keys(cityIOdata);\n\n  // initial layer menu state\n  let initState = {};\n  const [layersMenuState, setLayersMenuState] = useState(() => {\n    for (const menuItem in expectedLayers) {\n      initState[menuItem] = {\n        isOn: expectedLayers[menuItem].initState,\n        slider: expectedLayers[menuItem].initSliderValue,\n      };\n    }\n    return initState;\n  });\n\n  useEffect(() => {\n    dispatch(updateLayersMenuState(layersMenuState));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [layersMenuState]);\n\n  // update the layer slider value\n  const [sliderVal, setSliderVal] = useState({});\n  const updateSliderVal = (menuItem, val) => {\n    setSliderVal({ ...sliderVal, [menuItem]: val });\n\n    setLayersMenuState({\n      ...layersMenuState,\n      [menuItem]: {\n        ...layersMenuState[menuItem],\n        slider: val,\n      },\n    });\n  };\n\n  const toggleListArr = [];\n  const makeLayerControlsMenu = () => {\n    // loop through the keys in cityIOdata and make a list of keys\n    for (const menuItem in expectedLayers) {\n      const moduleName = expectedLayers[menuItem].cityIOmoduleName;\n      // if the module name is in the data for this CS instance, make a checkbox\n      if (cityIOkeys.includes(moduleName)) {\n        toggleListArr.push(\n          <Grid container key={`grid_con_` + menuItem}>\n            <Grid item xs={4} key={`grid_i_1_` + menuItem}>\n              <FormControlLabel\n                key={\"formControl_\" + menuItem}\n                control={\n                  <Checkbox\n                    checked={\n                      layersMenuState[menuItem] &&\n                      layersMenuState[menuItem].isOn\n                    }\n                    key={\"checkbox_\" + menuItem}\n                    color=\"primary\"\n                    onChange={(e) => {\n                      setLayersMenuState({\n                        ...layersMenuState,\n                        [menuItem]: {\n                          ...layersMenuState[menuItem],\n                          isOn: e.target.checked,\n                        },\n                      });\n                    }}\n                  />\n                }\n                label={\n                  <Typography variant=\"caption\" key={\"label_\" + menuItem}>\n                    {expectedLayers[menuItem].displayName}\n                  </Typography>\n                }\n              />\n            </Grid>\n            {layersMenuState[menuItem] && layersMenuState[menuItem].isOn && (\n              <Grid item xs={8} key={`grid_i_2_` + menuItem}>\n                <Slider\n                  size=\"small\"\n                  key={\"slider_\" + menuItem}\n                  valueLabelDisplay=\"auto\"\n                  onChangeCommitted={(_, val) => updateSliderVal(menuItem, val)}\n                />\n              </Grid>\n            )}\n          </Grid>\n        );\n      }\n    }\n    return toggleListArr;\n  };\n\n  return <Grid container>{makeLayerControlsMenu()}</Grid>;\n}\n\nexport default LayersMenu;\n","import { useLayoutEffect, useState } from \"react\";\nimport {\n  ButtonGroup,\n  Button,\n  Typography,\n  Slider,\n  Checkbox,\n  List,\n  ListItem,\n} from \"@mui/material\";\nimport {\n  viewControlCheckboxes,\n  viewControlButtons,\n} from \"../../../../settings/settings\";\nimport { updateViewSettingsMenuState } from \"../../../../redux/reducers/menuSlice\";\nimport { useDispatch } from \"react-redux\";\n\nfunction ViewSettingsMenu() {\n  const dispatch = useDispatch();\n\n  const [viewSettingsMenuState, setViewSettingsMenuState] = useState(() => {\n    let initState = {};\n    for (const menuItem in viewControlCheckboxes) {\n      initState[menuItem] = {\n        isOn: viewControlCheckboxes[menuItem].initState,\n        slider:\n          viewControlCheckboxes[menuItem].initSliderValue &&\n          viewControlCheckboxes[menuItem].initSliderValue,\n      };\n    }\n    return initState;\n  });\n\n  // return the menu state to parent component\n  useLayoutEffect(() => {\n    //  dispatch this menu state to the redux store\n    dispatch(updateViewSettingsMenuState(viewSettingsMenuState));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewSettingsMenuState]);\n\n  const [sliderVal, setSliderVal] = useState({});\n  const updateSliderVal = (menuItem, val) => {\n    setSliderVal({ ...sliderVal, [menuItem]: val });\n\n    setViewSettingsMenuState({\n      ...viewSettingsMenuState,\n      [menuItem]: {\n        ...viewSettingsMenuState[menuItem],\n        slider: val,\n      },\n    });\n  };\n\n  const handleButtonClicks = (thisButton) => {\n    setViewSettingsMenuState({\n      ...viewSettingsMenuState,\n      VIEW_CONTROL_BUTTONS: thisButton,\n    });\n  };\n\n  // create a button group for the view control buttons\n  const createViewControlButtons = (viewControlButtons) => {\n    const buttonsArr = [];\n    for (const thisButton in viewControlButtons) {\n      buttonsArr.push(\n        <Button\n          key={Math.random()}\n          size=\"small\"\n          \n          onClick={() => handleButtonClicks(thisButton)}\n        >\n          {viewControlButtons[thisButton].displayName}\n        </Button>\n      );\n    }\n    return <ButtonGroup fullWidth\n    sx={{width: \"100%\"}} color=\"primary\">{buttonsArr}</ButtonGroup>;\n  };\n\n  const createCheckboxes = (menuItemList) => {\n    const toggleListArr = [];\n    for (const menuItem in menuItemList) {\n      // check if we add slider to this menuItem\n      const hasSlider = menuItemList[menuItem].initSliderValue;\n\n      toggleListArr.push(\n        <div key={\"viewSettingDiv_\" + menuItem}>\n          <ListItem key={\"viewSettingListItem_\" + menuItem}>\n            <Checkbox\n              key={\"viewSettingCheckBox_\" + menuItem}\n              checked={\n                viewSettingsMenuState[menuItem] &&\n                viewSettingsMenuState[menuItem].isOn\n              }\n              name={menuItem}\n              onChange={(e) =>\n                setViewSettingsMenuState({\n                  ...viewSettingsMenuState,\n                  [menuItem]: {\n                    ...viewSettingsMenuState[menuItem],\n                    isOn: e.target.checked,\n                  },\n                })\n              }\n            />\n\n            <Typography\n              variant={\"caption\"}\n              key={\"viewSettingCaption_\" + menuItem}\n            >\n              {menuItemList[menuItem].displayName}\n            </Typography>\n          </ListItem>\n          {hasSlider &&\n            viewSettingsMenuState[menuItem] &&\n            viewSettingsMenuState[menuItem].isOn && (\n              <ListItem key={\"viewSettingListItemSlider_\" + menuItem}>\n                <Slider\n                  size=\"small\"\n                  key={\"viewSettingSlider_\" + menuItem}\n                  valueLabelDisplay=\"auto\"\n                  onChangeCommitted={(_, val) => updateSliderVal(menuItem, val)}\n                />\n              </ListItem>\n            )}\n        </div>\n      );\n    }\n    return toggleListArr;\n  };\n\n  return (\n    <List>\n      {createViewControlButtons(viewControlButtons)}\n      {createCheckboxes(viewControlCheckboxes)}\n    </List>\n  );\n}\n\nexport default ViewSettingsMenu;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Typography,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  ListItem,\n  Button,\n  List,\n  Dialog,\n  IconButton,\n  Tooltip,\n  Badge,\n  TextField,\n} from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { postToCityIO, getModule, getTableID } from \"../../../../utils/utils\";\n\nexport default function ScenariosMenu() {\n  const [scenariosButtonsList, setScenariosButtonsList] = useState([]);\n  const [scenarioToRestore, setScenariosToRestore] = useState();\n  const [saveDialogState, setSaveDialogState] = useState(false);\n  const [loadDialogState, setLoadDialogState] = useState(false);\n  const [scenarioTextInput, setScenarioTextInput] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  // get cityIO data from redux store\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  // get cityio name from redux store\n  const cityIOtableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  const handleSaveThisState = () => {\n    handleClose();\n    getTableID(cityIOtableName).then((id) => {\n      const newScenario = {\n        // ! to be updated from dynamic ui element\n        name: scenarioTextInput.name || `${id}`,\n        hash: id,\n        description:\n          scenarioTextInput.description || `no description for ${id} yet.`,\n      };\n      const tempArr = cityIOdata.scenarios ? [...cityIOdata.scenarios] : [];\n      tempArr.push(newScenario);\n      postToCityIO(tempArr, cityIOtableName, `/scenarios/`);\n    });\n  };\n\n  const handleClose = () => {\n    setLoadDialogState(false);\n    setSaveDialogState(false);\n  };\n\n  const handleOpenDialog = (scenario) => {\n    // store to state the scenario to be restored\n    setScenariosToRestore(scenario);\n    // open dialog\n    setLoadDialogState(true);\n  };\n\n  const handleRestoreThisState = async () => {\n    if (!scenarioToRestore) return;\n    await getModule(scenarioToRestore.hash)\n      .then((module) => {\n        postToCityIO(module, cityIOtableName, `/GEOGRIDDATA/`);\n      })\n      .finally(() => {\n        handleClose();\n      });\n  };\n\n  const handleDeleteThisState = (scenario) => {\n    // copy the scenarios array\n    const tempArr = [...cityIOdata.scenarios];\n    // find the clicked scenario in the array\n    var scnToDelete = tempArr.filter((obj) => {\n      return obj.hash === scenario.hash;\n    });\n    // find the index of the scenario to delete\n    var index = tempArr.indexOf(scnToDelete[0]);\n    if (index !== -1) {\n      // remove the scenario from the array\n      tempArr.splice(index, 1);\n    }\n    // post the new array to the server\n    postToCityIO(tempArr, cityIOtableName, `/scenarios/`);\n  };\n\n  const createScenariosButtons = () => {\n    const scenariosButtons = cityIOdata.scenarios.map((scenario, i) => {\n      return (\n        <ListItem key={`scenario_grid_item_${i}`}>\n          <Tooltip\n            sx={{ width: \"100%\" }}\n            key={\"scenario_tt_\" + i}\n            arrow\n            placement=\"right\"\n            title={scenario.description || `No description`}\n          >\n            <Button\n              fullWidth={true}\n              key={\"scenario_button_\" + i}\n              sx={{ width: \"100%\" }}\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={() => handleOpenDialog(scenario)}\n            >\n              <List>\n                <ListItem>\n                  <Typography>\n                    {scenario.name.substring(0, 15) + `...`}\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"caption\">\n                    {scenario.description.substring(0, 20) + `...`}\n                  </Typography>\n                </ListItem>\n              </List>\n            </Button>\n          </Tooltip>\n\n          <IconButton\n            key={\"scenario_ib_\" + i}\n            onClick={(e) => {\n              handleDeleteThisState(scenario);\n            }}\n            aria-label=\"delete\"\n            size=\"small\"\n          >\n            <DeleteIcon\n              color=\"primary\"\n              key={\"scenario_delicon_\" + i}\n              fontSize=\"inherit\"\n            />\n          </IconButton>\n        </ListItem>\n      );\n    });\n    return scenariosButtons;\n  };\n\n  useEffect(() => {\n    // check if there are any scenarios in the cityIOdata\n    if (!cityIOdata.scenarios) return;\n    const scenariosButtons = createScenariosButtons();\n    setScenariosButtonsList(scenariosButtons);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  return (\n    <>\n      <Badge\n        sx={{ width: \"100%\" }}\n        badgeContent={\n          (cityIOdata.scenarios && cityIOdata.scenarios.length) || 0\n        }\n        color=\"primary\"\n      >\n        <Button\n          fullWidth={true}\n          key={\"save_state_button\"}\n          variant=\"outlined\"\n          onClick={() => setSaveDialogState(true)}\n        >\n          <Typography>Save This Scenario</Typography>\n        </Button>\n      </Badge>\n\n      <List>{scenariosButtonsList}</List>\n\n      <Dialog open={saveDialogState} onClose={handleClose}>\n        <DialogTitle id=\"save-dialog-title\">{\"Save this Scenario\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Give your scenario a name and a description to help you remember\n            what it is about.\n          </DialogContentText>\n          <List>\n            <ListItem>\n              <TextField\n                id=\"name-basic\"\n                label=\"Scenario Name\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={(e) =>\n                  setScenarioTextInput({\n                    ...scenarioTextInput,\n                    name: e.target.value,\n                  })\n                }\n              />\n            </ListItem>\n            <ListItem>\n              <TextField\n                id=\"desc-basic\"\n                label=\"Description (optional)\"\n                fullWidth\n                variant=\"outlined\"\n                onChange={(e) =>\n                  setScenarioTextInput({\n                    ...scenarioTextInput,\n                    description: e.target.value,\n                  })\n                }\n              />\n            </ListItem>\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleSaveThisState} autoFocus>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={loadDialogState} onClose={handleClose}>\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Revert to saved scenario?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            You can revert to this saved scenario by clicking the button below.\n            Reverting will delete all changes made since the last commit.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleRestoreThisState} autoFocus>\n            Revert\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { useState, useCallback } from \"react\";\nimport { Drawer, Box } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\n\nconst dividerWidth = 5;\nconst maxDrawerWidth =\n  Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0) -\n  1;\n\nconst minDrawerWidth = 50;\n\nexport default function ResizableDrawer({ children, direction, width }) {\n  const defaultDrawerWidth = Math.floor(maxDrawerWidth / 4);\n  const [drawerWidth, setDrawerWidth] = useState(width || defaultDrawerWidth);\n\n  const handleMouseDown = (e) => {\n    document.addEventListener(\"mouseup\", handleMouseUp, true);\n    document.addEventListener(\"mousemove\", handleMouseMove, true);\n    e.preventDefault();\n  };\n\n  const handleMouseUp = (e) => {\n    document.removeEventListener(\"mouseup\", handleMouseUp, true);\n    document.removeEventListener(\"mousemove\", handleMouseMove, true);\n    e.preventDefault();\n  };\n\n  const handleMouseMove = useCallback((e) => {\n    let newWidth = null;\n\n    if (direction === \"right\") {\n      newWidth =\n        document.body.offsetLeft + document.body.offsetWidth - e.clientX + 20;\n    } else {\n      newWidth = document.body.offsetLeft + e.clientX + 20;\n    }\n    if (newWidth > minDrawerWidth && newWidth < maxDrawerWidth) {\n      setDrawerWidth(newWidth);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <Box\n        onMouseDown={(e) => handleMouseDown(e)}\n        sx={{\n          width: `${dividerWidth}px`,\n          padding: dividerWidth + \"px 0 0\",\n          position: \"fixed\",\n          height: \"1000vh\",\n          left: direction === \"left\" ? drawerWidth + \"px\" : undefined,\n          right: direction === \"right\" ? drawerWidth + \"px\" : undefined,\n          zIndex: 1,\n          cursor: \"ew-resize\",\n          backgroundColor: \"gray\",\n        }}\n      />\n      <Drawer\n        anchor={direction}\n        open={true}\n        variant=\"persistent\"\n        ModalProps={{\n          keepMounted: true,\n        }}\n        PaperProps={{ style: { width: drawerWidth } }}\n        sx={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        <Paper>{children}</Paper>\n      </Drawer>\n    </>\n  );\n}\n","import { Button, Typography } from \"@mui/material\";\nimport { updateEditMenuState } from \"../../../../redux/reducers/menuSlice\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function EditMenu() {\n  const dispatch = useDispatch();\n  const [editMenu, setEditMenu] = useState({ EDIT_BUTTON: false });\n\n  // controls the menu state for the edit button\n  const handleEditButtonClicks = (event) => {\n    setEditMenu({\n      ...editMenu,\n      [event.currentTarget.id]: !editMenu[event.currentTarget.id],\n    });\n  };\n\n  useEffect(() => {\n    // dispatch the edit menu state to the redux store\n    dispatch(updateEditMenuState(editMenu));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editMenu]);\n\n  return (\n    <Button\n      fullWidth\n      id={\"EDIT_BUTTON\"}\n      variant=\"outlined\"\n      endIcon={editMenu.EDIT_BUTTON ? <CloudUploadIcon /> : <EditIcon />}\n      onClick={(e) => handleEditButtonClicks(e)}\n    >\n      <Typography>\n        {editMenu.EDIT_BUTTON ? \"submit edits\" : \"start editing\"}\n      </Typography>\n    </Button>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { Typography } from \"@mui/material\";\n\nfunction TableInfo() {\n  const cityIOtableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      <Typography gutterBottom>CityScope</Typography>\n      <Typography variant=\"h3\">{cityIOtableName}</Typography>\n    </>\n  );\n}\n\nexport default TableInfo;\n","import { List, ListItem, CardContent, Card } from \"@mui/material\";\nimport TypesMenu from \"./TypesMenu\";\nimport LayersMenu from \"./LayersMenu\";\nimport ViewSettingsMenu from \"./ViewSettingsMenu\";\nimport ScenariosMenu from \"./ScenariosMenu\";\nimport ResizableDrawer from \"../../../Components/ResizableDrawer\";\nimport EditMenu from \"./EditMenu\";\nimport TableInfo from \"./TableInfo\";\n\nfunction MenuContainer() {\n  const menuItemsArray = [\n    <TableInfo />,\n    <EditMenu />,\n    <TypesMenu />,\n    <ScenariosMenu />,\n    <LayersMenu />,\n    <ViewSettingsMenu />,\n  ];\n\n  const MenuItems = () => {\n    const m = [];\n\n    menuItemsArray.forEach((item, index) => {\n      m.push(\n        <ListItem key={index}>\n          <Card variant=\"outlined\" sx={{ width: \"100%\" }}>\n            <CardContent>{item}</CardContent>\n          </Card>\n        </ListItem>\n      );\n    });\n    return m;\n  };\n\n  return (\n    <ResizableDrawer direction=\"left\" width={300}>\n      <List>\n        <MenuItems />\n      </List>\n    </ResizableDrawer>\n  );\n}\n\nexport default MenuContainer;\n","import { testHex, hexToRgb } from \"../../../../../utils/utils\";\nimport ErrorOutlineIcon from \"@mui/icons-material/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \": Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 10,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n                fontFamily: \"Roboto Mono\",\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}\n            </div>\n        </div>\n    );\n};\n","import { Typography } from \"@mui/material\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n  if (!props.mousePos) return null;\n  const mousePos = props.mousePos;\n  const hoveredObj = props.hoveredObj;\n\n  return (\n    <div\n      style={{\n        borderRadius: \"10%\",\n        position: \"fixed\",\n        pointerEvents: \"none\",\n        backgroundColor: \"rgba(0,0,0,0.5)\",\n        padding: \"1vw\",\n        color: \"rgba(255,255,255,0.9)\",\n        zIndex: 10,\n        left: mousePos.clientX,\n        top: mousePos.clientY,\n        //\n      }}\n    >\n      <Typography>Type: {hoveredObj.object.properties.name}</Typography>\n      <Typography>Height: {hoveredObj.object.properties.height}</Typography>\n      <Typography>ID: {hoveredObj.object.properties.id}</Typography>\n    </div>\n  );\n};\n","import { PaintBrush } from \"./PaintBrush\";\nimport { CellMeta } from \"../CellMeta\";\n\nexport default function PaintBrushContainer({\n  editOn,\n  mousePos,\n  selectedType,\n  pickingRadius,\n  mouseDown,\n  hoveredObj,\n}) {\n  const BrushSelector = () => {\n    if (\n      editOn &&\n      selectedType &&\n      Object.keys(selectedType).length &&\n      hoveredObj\n    ) {\n      return (\n        <PaintBrush\n          mousePos={mousePos}\n          selectedType={selectedType}\n          divSize={pickingRadius}\n          mouseDown={mouseDown}\n          hoveredCells={hoveredObj}\n        />\n      );\n    } else if (hoveredObj) {\n      return <CellMeta mousePos={mousePos} hoveredObj={hoveredObj} />;\n    } else {\n      return null;\n    }\n  };\n  return <BrushSelector />;\n}\n","import { HeatmapLayer } from \"deck.gl\";\n\nexport default function AccessLayer({ data, opacity }) {\n  const accessData = data.access && data.access.features;\n  const colors = [\n    [233, 62, 58],\n    [237, 104, 60],\n    [243, 144, 63],\n    [253, 199, 12],\n    [255, 243, 59],\n  ];\n  return new HeatmapLayer({\n    id: \"ACCESS\",\n    colorRange: colors,\n    // intensity:  opacity,\n    threshold: 0.5,\n    data: accessData && accessData,\n    getPosition: (d) => d.geometry.coordinates,\n    getWeight: (d) =>\n      d.properties[Math.floor(opacity * 100) % data.access.properties.length],\n    updateTriggers: {\n      getWeight: opacity,\n    },\n  });\n}\n","import { PathLayer } from \"@deck.gl/layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nexport default function AggregatedTripsLayer({ data, ABMmode, opacity }) {\n  if (data.ABM2) {\n    return new PathLayer({\n      id: \"AGGREGATED_TRIPS\",\n      shadowEnabled: false,\n      data: data.ABM2.trips,\n      getPath: (d) => d.path,\n      getColor: (d) => hexToRgb(data.ABM2.attr.mode[d.mode].color),\n\n      opacity,\n      getWidth: 5,\n\n      updateTriggers: {\n        getColor: ABMmode,\n      },\n      transitions: {\n        getColor: 500,\n      },\n    });\n  }\n}\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\n//  * remap line width\nconst _remapValues = (value) => {\n  let remap = value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n  return remap;\n};\n\nexport default function ABMLayer({ data, ABMmode, zoomLevel, time, opacity }) {\n  if (data.ABM2) {\n    return new TripsLayer({\n      opacity,\n      id: \"ABM\",\n      data: data.ABM2.trips,\n      getPath: (d) => d.path,\n      getTimestamps: (d) => d.timestamps,\n      getColor: (d) => hexToRgb(data.ABM2.attr.mode[d.mode].color),\n      shadowEnabled: false,\n      getWidth: 1,\n      widthScale: _remapValues(zoomLevel),\n      trailLength: 500,\n      currentTime: time,\n\n      updateTriggers: {\n        getColor: ABMmode,\n      },\n      transitions: {\n        getColor: 500,\n      },\n    });\n  }\n}\n","import { TextLayer } from \"@deck.gl/layers\";\n\nexport default function TextualLayer({ data, coordinates, opacity }) {\n  if (!data || !data.text) return;\n  /*\n     * this layer takes textual layer procured by a 3rd party\n     * module, and renders a text message near the grid cell\n     * defined in the data id attribute.\n     *\n     * data format:\n      [\n      {\"id\": 0, \"info\": \"yes!\" },   {\"id\": 10, \"info\": \"I'm on ID 10!\" }\n      ]\n     *\n     * coordinates format:\n     [\n       {\"info\": \"yes!\", coordinates: [-122.466233, 37.684638]},\n     ]\n     */\n\n  let textLayerData = [];\n\n  data.text.forEach((infoIteam) => {\n    textLayerData.push({\n      coordinates: [\n        coordinates.features[infoIteam.id].geometry.coordinates[0][0][0],\n        coordinates.features[infoIteam.id].geometry.coordinates[0][0][1],\n        100,\n      ],\n      info: infoIteam.info,\n    });\n  });\n\n  return new TextLayer({\n    opacity,\n    id: \"text-layer\",\n    data: textLayerData,\n    pickable: true,\n    getPosition: (d) => d.coordinates,\n    getText: (d) => d.info,\n    getColor: [255, 255, 255],\n    getSize: 30,\n    getAngle: 0,\n    getTextAnchor: \"middle\",\n    getAlignmentBaseline: \"center\",\n  });\n}\n\n// new TextLayer({\n//   id: \"text\",\n//   data: cityIOdata.GEOGRID && cityIOdata.GEOGRID.features,\n//   getPosition: (d) => {\n//     const pntArr = d.geometry.coordinates[0];\n//     const first = pntArr[1];\n//     const last = pntArr[pntArr.length - 2];\n//     const center = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n//     return center;\n//   },\n\n//   getText: (d) => {\n//     var length = 10;\n//     return d.properties.name.length > length\n//       ? d.properties.name.substring(0, length - 3) + \"...\"\n//       : d.properties.name;\n//   },\n//   getColor: (d) => [0, 0, 0],\n//   getSize: 8,\n// }),\n","import { GeoJsonLayer } from \"@deck.gl/layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nexport default function GeojsonLayer({ data: cityIOdata, opacity }) {\n  if (cityIOdata.geojson) {\n    return new GeoJsonLayer({\n      id: \"GeojsonLayer\",\n      data: cityIOdata.geojson,\n      opacity: opacity,\n      pickable: true,\n      wireframe: false,\n      stroked: true,\n      filled: true,\n      extruded: true,\n      lineWidthScale: 1,\n      getFillColor: (d) => hexToRgb(d.properties.fill),\n      getLineColor: (d) => hexToRgb(d.properties.stroke),\n      lineWidthMinPixels: 2,\n      getElevation: (d) => d.properties.height,\n      updateTriggers: {\n        getFillColor: cityIOdata,\n        getElevation: cityIOdata,\n      },\n      transitions: {\n        getFillColor: 500,\n        getElevation: 500,\n      },\n    });\n  }\n}\n","import { SimpleMeshLayer } from \"@deck.gl/mesh-layers\";\nimport { OBJLoader } from \"@loaders.gl/obj\";\n\nexport default function MeshLayer({ data, opacity }) {\n  if (data && data.features) {\n    return new SimpleMeshLayer({\n      id: \"mesh-layer\",\n      data: data.features,\n      loaders: [OBJLoader],\n      mesh: \"./obj/model.obj\",\n      getPosition: (d) => {\n        const pntArr = d.geometry.coordinates[0];\n        const first = pntArr[1];\n        const last = pntArr[pntArr.length - 2];\n        const center = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n        return center;\n      },\n      getColor: (d) =>\n        // d.properties.color,\n        [255, 255, 255, 255],\n\n      getOrientation: (d) => [-180, Math.ceil(Math.random() * 4) * 90, -90],\n      getScale: (d) =>\n        d.properties.height > 0\n          ? [\n              data.properties.header.cellSize / 2,\n              opacity * d.properties.height ,\n              data.properties.header.cellSize / 2,\n            ]\n          : [0, 0, 0],\n      updateTriggers: {\n        getScale: opacity,\n      },\n    });\n  }\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport PaintBrush from \"./components/PaintBrush\";\nimport { postToCityIO } from \"../../../utils/utils\";\nimport Map from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { mapSettings } from \"../../../settings/settings\";\nimport {\n  AccessLayer,\n  AggregatedTripsLayer,\n  ABMLayer,\n  GridLayer,\n  TextualLayer,\n  GeojsonLayer,\n  MeshLayer,\n} from \"./deckglLayers\";\nimport { processGridData } from \"./deckglLayers/GridLayer\";\n\nexport default function DeckGLMap() {\n  // get cityio data from redux store\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  // get menu state from redux store\n  const menuState = useSelector((state) => state.menuState);\n  const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n  const [selectedCellsState, setSelectedCellsState] = useState();\n  const [viewState, setViewState] = useState(mapSettings.map.initialViewState);\n  const [keyDownState, setKeyDownState] = useState();\n  const [mousePos, setMousePos] = useState();\n  const [mouseDown, setMouseDown] = useState();\n  const [hoveredObj, setHoveredObj] = useState();\n  const [GEOGRIDDATA, setGEOGRIDDATA] = useState();\n  const deckGLref = useRef();\n  const pickingRadius = 40;\n  const editModeToggle = menuState.editMenuState.EDIT_BUTTON;\n  const selectedType = menuState.typesMenuState.SELECTED_TYPE;\n  const layersMenu = menuState.layersMenuState;\n  const viewControlButton =\n    menuState.viewSettingsMenuState.VIEW_CONTROL_BUTTONS;\n\n  // ! constant animation speed for now - will be updated with slider\n\n  const toggleAnimationState =\n    menuState.viewSettingsMenuState.ANIMATION_CHECKBOX;\n  const toggleRotateCamera = menuState.viewSettingsMenuState.ROTATE_CHECKBOX;\n\n  const [animationTime, setAnimationTime] = useState(0);\n  const [animation] = useState({});\n  const animate = () => {\n    if (toggleAnimationState && toggleAnimationState.isOn) {\n      // use variable outside of closure to allow toggle\n      setAnimationTime((t) => {\n        return t > mapSettings.map.layers.ABM.endTime\n          ? mapSettings.map.layers.ABM.startTime\n          : t + toggleAnimationState.slider;\n      });\n      animation.id = window.requestAnimationFrame(animate); // draw next frame\n    }\n  };\n  // ! self executing function to toggle animation state\n  (function () {\n    if (toggleAnimationState && !toggleAnimationState.isOn) {\n      window.cancelAnimationFrame(animation.id);\n      return;\n    }\n  })();\n\n  useEffect(() => {\n    animation.id = window.requestAnimationFrame(animate); // start animation\n    return () => {\n      window.cancelAnimationFrame(animation.id);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toggleAnimationState]);\n\n  // toggle camera rotation on and off\n  useEffect(() => {\n    if (toggleRotateCamera && toggleRotateCamera.isOn) {\n      let bearing = viewState.bearing || 0;\n      bearing < 360\n        ? (bearing += (animationTime / 100000000) * toggleRotateCamera.slider)\n        : (bearing = 0);\n      setViewState({\n        ...viewState,\n        bearing: bearing,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toggleRotateCamera, animationTime]);\n\n  // **\n  //  * resets the camera viewport\n  //  * to cityIO header data\n  //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n  //  *\n  const setViewStateToTableHeader = (viewControlButton) => {\n    const lastCell =\n      cityIOdata.GEOGRID.features[cityIOdata.GEOGRID.features.length - 1]\n        .geometry.coordinates[0][0];\n    const firstCell = cityIOdata.GEOGRID.features[0].geometry.coordinates[0][0];\n    const midGrid = [\n      (firstCell[0] + lastCell[0]) / 2,\n      (firstCell[1] + lastCell[1]) / 2,\n    ];\n\n    const header = cityIOdata.GEOGRID.properties.header;\n\n    setViewState({\n      ...viewState,\n      longitude: midGrid[0],\n      latitude: midGrid[1],\n      zoom: viewControlButton === \"RESET_VIEW_BUTTON\" ? 15 : viewState.zoom,\n      pitch: viewControlButton === \"RESET_VIEW_BUTTON\" ? 0 : viewState.pitch,\n      bearing:\n        viewControlButton === \"NORTH_VIEW_BUTTON\" ? 0 : 360 - header.rotation,\n      orthographic: viewControlButton === \"ORTHO_VIEW_BUTTON\" ? true : false,\n    });\n  };\n\n  useEffect(() => {\n    setViewStateToTableHeader(viewControlButton);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewControlButton]);\n\n  // fix deck view rotate\n  useEffect(() => {\n    document\n      // ! a more aggressive method which prevents all right click context menu\n      // .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // zoom map on CS table location\n    setViewStateToTableHeader();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // update the grid layer with every change to GEOGRIDDATA\n  useEffect(() => {\n    setGEOGRIDDATA(processGridData(cityIOdata));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata.GEOGRIDDATA]);\n\n  // post GEOGRIDDATA changes to cityIO\n  useEffect(() => {\n    if (!editModeToggle && GEOGRIDDATA) {\n      let dataProps = [];\n      for (let i = 0; i < GEOGRIDDATA.features.length; i++) {\n        dataProps[i] = GEOGRIDDATA.features[i].properties;\n      }\n      postToCityIO(dataProps, cityIOdata.tableName, \"/GEOGRIDDATA/\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editModeToggle]);\n\n  const onViewStateChange = ({ viewState }) => {\n    viewState.orthographic =\n      viewControlButton === \"ORTHO_VIEW_BUTTON\" ? true : false;\n    setViewState(viewState);\n  };\n\n  const layersKey = {\n    ABM: ABMLayer({\n      data: cityIOdata,\n      ABMmode: 0,\n      zoomLevel: viewState.zoom,\n      time: animationTime,\n      opacity:\n        layersMenu &&\n        layersMenu.ABM_LAYER_CHECKBOX &&\n        layersMenu.ABM_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    AGGREGATED_TRIPS: AggregatedTripsLayer({\n      data: cityIOdata,\n      ABMmode: 0,\n      opacity:\n        layersMenu &&\n        layersMenu.AGGREGATED_TRIPS_LAYER_CHECKBOX &&\n        layersMenu.AGGREGATED_TRIPS_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    GRID: GridLayer({\n      data: GEOGRIDDATA,\n      editOn: editModeToggle,\n      state: {\n        selectedType,\n        keyDownState,\n        selectedCellsState,\n        pickingRadius,\n        opacity:\n          layersMenu &&\n          layersMenu.GRID_LAYER_CHECKBOX &&\n          layersMenu.GRID_LAYER_CHECKBOX.slider * 0.01,\n      },\n      updaters: {\n        setSelectedCellsState,\n        setDraggingWhileEditing,\n        setHoveredObj,\n      },\n      deckGLref,\n    }),\n\n    ACCESS: AccessLayer({\n      data: cityIOdata,\n      opacity:\n        layersMenu &&\n        layersMenu.ACCESS_LAYER_CHECKBOX &&\n        layersMenu.ACCESS_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    TEXTUAL: TextualLayer({\n      data: cityIOdata,\n      coordinates: GEOGRIDDATA && GEOGRIDDATA,\n      opacity:\n        layersMenu &&\n        layersMenu.TEXTUAL_LAYER_CHECKBOX &&\n        layersMenu.TEXTUAL_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    GEOJSON: GeojsonLayer({\n      data: cityIOdata,\n      opacity:\n        layersMenu &&\n        layersMenu.GEOJSON_LAYER_CHECKBOX &&\n        layersMenu.GEOJSON_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    MESH: MeshLayer({\n      data: GEOGRIDDATA,\n      opacity:\n        layersMenu &&\n        layersMenu.MESH_LAYER_CHECKBOX &&\n        layersMenu.MESH_LAYER_CHECKBOX.slider * 0.01,\n    }),\n  };\n\n  const layerOrder = [\n    \"GRID\",\n    \"TEXTUAL\",\n    \"MESH\",\n    \"GEOJSON\",\n    \"ACCESS\",\n    \"AGGREGATED_TRIPS\",\n    \"ABM\",\n  ];\n\n  const renderDeckLayers = () => {\n    let layers = [];\n    for (var layerNameString of layerOrder) {\n      // toggle layers on and off\n      if (\n        layersMenu &&\n        layersMenu[layerNameString + \"_LAYER_CHECKBOX\"] &&\n        layersMenu[layerNameString + \"_LAYER_CHECKBOX\"].isOn\n      ) {\n        layers.push(layersKey[layerNameString]);\n      }\n    }\n    return layers;\n  };\n\n  return (\n    <>\n      <div\n        onKeyDown={(e) => {\n          setKeyDownState(e.nativeEvent.key);\n        }}\n        onKeyUp={() => setKeyDownState(null)}\n        onMouseMove={(e) => setMousePos(e.nativeEvent)}\n        onMouseUp={() => setMouseDown(false)}\n        onMouseDown={() => setMouseDown(true)}\n      >\n        <PaintBrush\n          editOn={editModeToggle}\n          mousePos={mousePos}\n          selectedType={selectedType}\n          pickingRadius={pickingRadius}\n          mouseDown={mouseDown}\n          hoveredObj={hoveredObj}\n        />\n\n        <DeckGL\n          ref={deckGLref}\n          viewState={viewState}\n          onViewStateChange={onViewStateChange}\n          layers={renderDeckLayers()}\n          controller={{\n            touchZoom: true,\n            touchRotate: true,\n            dragPan: !draggingWhileEditing,\n            dragRotate: !draggingWhileEditing,\n            keyboard: false,\n          }}\n        >\n          <Map\n            asyncRender={false}\n            dragRotate={true}\n            reuseMaps={true}\n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n            mapStyle={mapSettings.map.mapStyle.sat}\n            preventStyleDiffing={true}\n          />\n        </DeckGL>\n      </div>\n    </>\n  );\n}\n","import {\n  Chart as ChartJS,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Radar } from \"react-chartjs-2\";\nimport { useSelector } from \"react-redux\";\nimport { useState, useEffect } from \"react\";\n\nconst options = {\n  scales: {\n    r: {\n      angleLines: {\n        color: \"#696969\",\n      },\n      suggestedMin: 0,\n            suggestedMax: 1,\n      grid: {\n        color: \"#696969\",\n        circular: true,\n      },\n      pointLabels: {\n        color: \"#C0C0C0\",\n      },\n      ticks: {\n        color: \"#696969\",\n      },\n    },\n  },\n};\n\nconst optionsNoData = {\n  scales: {\n    r: {\n      angleLines: {\n        color: \"#363636\",\n      },\n      grid: {\n        color: \"#363636\",\n        circular: true,\n      },\n      pointLabels: {\n        color: \"#363636\",\n      },\n      ticks: {\n        color: \"#363636\",\n      },\n    },\n  },\n};\n\nconst noData = {\n  labels: [null, null, null],\n  datasets: [\n    {\n      label: \"No indicator data...\",\n      data: [null, null, null],\n      backgroundColor: \"#363636\",\n      borderColor: \"#363636\",\n      borderWidth: 1,\n    },\n  ],\n};\n\nexport default function RadarChart() {\n  ChartJS.register(\n    RadialLinearScale,\n    PointElement,\n    LineElement,\n    Filler,\n    Tooltip,\n    Legend\n  );\n\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const [radarData, setRadarData] = useState();\n\n  const createRadarData = (indicators) => {\n    let radarData = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Project Values\",\n          data: [],\n          backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderWidth: 1,\n        },\n        {\n          label: \"Reference Values\",\n          data: [],\n          backgroundColor: \"rgba(0, 33, 132, 0.2)\",\n          borderColor: \"rgba(0, 99, 255, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    for (let i = 0; i < indicators.length; i++) {\n      if (indicators[i].viz_type === \"radar\") {\n        radarData.labels.push(indicators[i].name);\n        radarData.datasets[0].data.push(indicators[i].value);\n        radarData.datasets[1].data.push(indicators[i].ref_value);\n      }\n    }\n    return radarData;\n  };\n\n  useEffect(() => {\n    if (!cityIOdata.indicators) {\n      setRadarData(noData);\n    } else {\n      const d = createRadarData(cityIOdata.indicators);\n      setRadarData(d);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  return (\n    <>\n      {radarData && (\n        <Radar\n          data={radarData}\n          options={cityIOdata.indicators ? options : optionsNoData}\n        />\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  maintainAspectRatio: true,\n  aspectRatio: 1, \n\n  scales: {\n    r: {\n      angleLines: {\n        color: \"#696969\",\n      },\n      grid: {\n        color: \"#696969\",\n        circular: true,\n      },\n      pointLabels: {\n        color: \"#C0C0C0\",\n      },\n      ticks: {\n        color: \"#696969\",\n      },\n    },\n  },\n  responsive: true,\n};\n\nexport const noData = {\n  labels: [\"no data...\"],\n  datasets: [\n    {\n      label: \"No indicator data...\",\n      data: [0],\n      backgroundColor: \"#696969\",\n    },\n  ],\n};\n\nexport default function BarChart() {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const [barChartData, setBarChartData] = useState();\n\n  useEffect(() => {\n    if (!cityIOdata.indicators) {\n      setBarChartData(noData);\n    } else {\n      const d = createBarChartData(cityIOdata.indicators);\n      setBarChartData(d);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  const createBarChartData = (indicators) => {\n    let barChartData = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Chart Data\",\n          data: [],\n          backgroundColor: \"rgba(255, 99, 132, 0.3)\",\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    for (let i = 0; i < indicators.length; i++) {\n      if (indicators[i].viz_type === \"bar\") {\n        barChartData.labels.push(indicators[i].name);\n        barChartData.datasets[0].data.push(indicators[i].value);\n      }\n    }\n    return barChartData;\n  };\n\n  return (\n    <>\n      {barChartData && (\n        <Bar options={options} data={barChartData ? barChartData : noData} />\n      )}\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nexport default function AreaCalc() {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [],\n  });\n\n  ChartJS.register(ArcElement, Tooltip, Legend);\n\n  let geoGridData = cityIOdata.GEOGRIDDATA;\n\n  const createChartData = () => {\n    const data = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Area Calculation\",\n          data: [],\n          backgroundColor: [],\n          borderColor: [],\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    geoGridData.forEach((gridCellData) => {\n      let typeName = gridCellData.name;\n      if (!typeName || typeName === \"None\" || typeName === \"\") {\n        typeName = \"Unknown type...\";\n      }\n      // check if this type is already in the array of labels (if not, add it)\n      if (data.labels.includes(typeName)) {\n        const index = data.labels.indexOf(typeName);\n        // add the value to the data array at existing label\n        data.datasets[0].data[index] =\n          gridCellData.height && gridCellData.height !== 0\n            ? data.datasets[0].data[index] + 1\n            : data.datasets[0].data[index] + 1;\n      } else {\n        data.labels.push(typeName);\n        data.datasets[0].data.push(0);\n        data.datasets[0].backgroundColor.push(\n          `rgba(${gridCellData.color[0]}, ${gridCellData.color[1]}, ${gridCellData.color[2]}, 0.2)`\n        );\n        data.datasets[0].borderColor.push(\n          `rgba(${gridCellData.color[0]}, ${gridCellData.color[1]}, ${gridCellData.color[2]}, 0.8)`\n        );\n      }\n    });\n    setChartData(data);\n  };\n\n  useEffect(() => {\n    if (!cityIOdata.GEOGRID.properties) return;\n    createChartData(cityIOdata);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  return <>{geoGridData && <Doughnut data={chartData} />}</>;\n}\n","import {\n  Card,\n  CardActions,\n  CardHeader,\n  CardContent,\n  Collapse,\n  IconButton,\n  Paper,\n  Divider,\n} from \"@mui/material\";\nimport { ArrowDropDown } from \"@mui/icons-material\";\n\nimport { useState } from \"react\";\n\nexport default function CollapsableCard({\n  children,\n  variant,\n  title,\n  subheader,\n}) {\n  const [expand, setExpand] = useState(true);\n\n  return (\n    <>\n      <Paper>\n        <Card variant={variant ? variant : \"outlined\"}>\n          <CardContent>\n            <CardHeader\n              title={title ? title : \"\"}\n              subheader={subheader ? subheader : \"\"}\n            />\n            <Divider variant=\"middle\" />\n            <CardActions>\n              <IconButton onClick={() => setExpand(!expand)}>\n                <ArrowDropDown />\n              </IconButton>\n            </CardActions>\n            <Collapse in={expand}>{children}</Collapse>\n          </CardContent>\n        </Card>\n      </Paper>\n    </>\n  );\n}\n","import { Grid, Box } from \"@mui/material\";\nimport RadarChart from \"./RadarChart\";\nimport BarChart from \"./BarChart\";\nimport AreaCalc from \"./AreaCalc\";\nimport ResizableDrawer from \"../../../Components/ResizableDrawer\";\nimport RenderedViewMap from \"../../RenderedView/RenderedViewMap\";\nimport CollapsableCard from \"../../../Components/CollapsableCard\";\n\nfunction VisContainer() {\n  return (\n    <ResizableDrawer direction=\"right\" width={window.innerWidth / 3}>\n      <Box p={2}>\n        <Grid container spacing={1}>\n          <Grid item xs={12} md={12} lg={12} xl={12}>\n            <CollapsableCard\n              variant=\"outlined\"\n              title=\"Radar Chart\"\n              subheader=\"Metrics and KPIs\"\n            >\n              <RadarChart />\n            </CollapsableCard>\n          </Grid>\n          <Grid item xs={12} md={12} lg={6} xl={6}>\n            <CollapsableCard\n              variant=\"outlined\"\n              title=\"Land-use\"\n              subheader=\"Distribution of Land-uses\"\n            >\n              <AreaCalc />\n            </CollapsableCard>\n          </Grid>\n          <Grid item xs={12} md={12} lg={6} xl={6}>\n            <CollapsableCard\n              variant=\"outlined\"\n              title=\"Bar Chart\"\n              subheader=\"Metrics and KPIs\"\n            >\n              <BarChart />\n            </CollapsableCard>\n          </Grid>\n          <Grid item xs={12} md={12} lg={12} xl={12}>\n            <CollapsableCard\n              variant=\"outlined\"\n              title=\"DeepScope\"\n              subheader=\"Visualize the Design Space\"\n            >\n              <RenderedViewMap />\n            </CollapsableCard>\n          </Grid>\n        </Grid>\n      </Box>\n    </ResizableDrawer>\n  );\n}\n\nexport default VisContainer;\n","import CityIO from \"../../Components/CityIO\";\nimport { useSelector } from \"react-redux\";\nimport MenuContainer from \"./MenuContainer\";\nimport DeckGLMap from \"./DeckglMap/index\";\nimport VisContainer from \"./VisContainer\";\nimport LoadingModules from \"../../Components/LoadingModules\";\n\nexport default function CityScopeJS() {\n  const cityIOisDone = useSelector(\n    (state) => state.cityIOdataState.cityIOisDone\n  );\n  const tableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      {!cityIOisDone && <LoadingModules loadingModules={[tableName]} />}\n      {/* if we got a cityIO table name, start cityIO module */}\n      {tableName && <CityIO tableName={tableName} />}\n      {/* if cityIO module is done loading, start the CSjs app */}\n      {cityIOisDone && (\n        <>\n          <DeckGLMap />\n          <MenuContainer />\n          <VisContainer />\n        </>\n      )}\n    </>\n  );\n}\n","import Box from \"@mui/material/Box\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport { styled } from \"@mui/material/styles\";\nimport { useEffect, useState } from \"react\";\n\nexport default function TableListLoading() {\n  const [progress, setProgress] = useState(0);\n\n  const BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\n    height: 10,\n  }));\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((oldProgress) => {\n        if (oldProgress === 100) {\n          return 0;\n        }\n        const diff = Math.random() * 10;\n        return Math.min(oldProgress + diff, 100);\n      });\n    }, 500);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <Box sx={{ width: \"100%\", position: \"fixed\", bottom: \"0px\" }}>\n      <BorderLinearProgress variant=\"determinate\" value={progress} />\n    </Box>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport TableListLoading from \"./TableListLoading\";\nimport axios from \"axios\";\nimport { cityIOSettings } from \"../../settings/settings\";\n\nexport default function CityIOlist(props) {\n  const getTablesList = props.getTablesList;\n  const [tablesList, setTableList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    tablesList && getTablesList(tablesList);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tablesList]);\n\n  const fetchCityIOtables = async () => {\n    // ! https://stackoverflow.com/questions/37213783/waiting-for-all-promises-called-in-a-loop-to-finish\n    const cityIOlistURL =\n      cityIOSettings.cityIO.baseURL + cityIOSettings.cityIO.ListOfTables;\n    // get all URLs\n    const tablesArr = await axios.get(cityIOlistURL);\n    // create array of all requests\n    const requestArr = tablesArr.data.map(async (tableName) => {\n      // const tableName = urlStr.split('/').pop()\n      const url = `${cityIOSettings.cityIO.baseURL}table/${tableName}/`;\n      return axios\n        .get(`${url}GEOGRID/properties/header/`)\n        .then((res) =>\n          setTableList((oldArray) => [\n            ...oldArray,\n            { tableURL: url, tableName: tableName, tableHeader: res.data },\n          ])\n        )\n        .catch((error) => console.log(error.toString()));\n    });\n\n    Promise.all(requestArr).then(() => {\n      setIsLoading(false);\n      return tablesList;\n    });\n  };\n\n  useEffect(() => {\n    fetchCityIOtables();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <>{isLoading && <TableListLoading />}</>;\n}\n","import { Typography, Link } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport {generalSettings} from \"../../../settings/settings\";\n\nexport default function SelectedTable(props) {\n  const selectedTable = props.clicked;\n\n  const cityscopeJSendpoint = generalSettings.csjsURL + \"?cityscope=\";\n  const projectionEndpoint = generalSettings.csjsURL + \"?projection=\";\n\n  const [open, setOpen] = useState(false);\n\n  // open dialog when table info has been changed\n  useEffect(() => {\n    setOpen(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedTable]);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"table-select-dialog-title\"\n      aria-describedby=\"table-select-dialog-description\"\n    >\n      <DialogTitle id=\"table-select-dialog-title\">\n        CityScope {selectedTable.tableName}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"table-select-dialog-description\">\n          <Typography component={\"span\"}>\n            <Link\n              href={cityscopeJSendpoint + selectedTable.tableName.toLowerCase()}\n            >\n              Go to project\n            </Link>\n            {\", \"}\n            <Link\n              href={projectionEndpoint + selectedTable.tableName.toLowerCase()}\n            >\n              project this table to TUI\n            </Link>{\" \"}\n            or{\" \"}\n            <Link target={\"blank\"} href={selectedTable.tableURL}>\n              view raw data on cityIO.\n            </Link>\n          </Typography>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>(x) Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport SelectedTable from \"./SelectedTable\";\nimport { useState } from \"react\";\nexport default function SearchTablesList(props) {\n  const tablesList = props.tablesList;\n  const [selectedTable, setSelectedTable] = useState(null);\n  const defaultProps = {\n    options: tablesList,\n    getOptionLabel: (option) => option.tableName,\n  };\n\n  return (\n    <>\n      {selectedTable && <SelectedTable clicked={selectedTable} />}\n      <Autocomplete\n        {...defaultProps}\n        disablePortal\n        id=\"combo-box-demo\"\n        options={tablesList}\n        sx={{ width: 300 }}\n        renderInput={(params) => <TextField {...params} label=\"Search CityScope Project...\" />}\n        onChange={(event, newValue) => {\n          setSelectedTable(newValue);\n        }}\n      />\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/legoio.148c5ab6.png\";","import { useEffect, useState } from \"react\";\nimport { _MapContext } from \"react-map-gl\";\nimport { DeckGL } from \"@deck.gl/react\";\nimport { _GlobeView as GlobeView, COORDINATE_SYSTEM } from \"@deck.gl/core\";\nimport { TileLayer } from \"@deck.gl/geo-layers\";\nimport { FlyToInterpolator } from \"deck.gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { LineLayer, IconLayer, TextLayer, BitmapLayer } from \"@deck.gl/layers\";\nimport icon from \"./legoio.png\";\n\nimport SelectedTable from \"../SelectedTable\";\n\n// * draggable pin https://github.com/visgl/react-map-gl/tree/6.1-release/examples/draggable-markers\n\nexport default function CityIOdeckGLmap(props) {\n  const [markerInfo, setMarkerInfo] = useState([]);\n  const [clicked, setClicked] = useState();\n  const [zoom, setZoom] = useState();\n  const INIT_VIEW = {\n    longitude: -71.060929,\n    latitude: 42.3545259,\n    zoom: 1,\n    pitch: 0,\n    bearing: 0,\n    zHeight: 2000000,\n  };\n\n  const [viewport, setViewport] = useState(INIT_VIEW);\n  const [initialViewState, setInitialViewState] = useState(viewport);\n  // boolean for hovering flag\n  let isHovering = false;\n\n  useEffect(() => {\n    // set initial zoom level to refelct layers appearance\n    setZoom(INIT_VIEW.zoom);\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n  }, [INIT_VIEW.zoom]);\n\n  useEffect(() => {\n    let markersArr = [];\n   \n      props.cityIOdata.forEach((table, index) => {\n      \n        markersArr.push({\n          tableURL: table.tableURL,\n          tableName: table.tableName,\n          index: index,\n          tableHeader: table.tableHeader,\n          coord: {\n            from: [table.tableHeader.longitude, table.tableHeader.latitude],\n            to: [\n              table.tableHeader.longitude + index/10,\n              table.tableHeader.latitude + index/10,\n              INIT_VIEW.zHeight,\n            ],\n          },\n        });\n      });\n    \n    setMarkerInfo(markersArr);\n  }, [props, INIT_VIEW.zHeight]);\n\n  const layers = [\n    new TileLayer({\n      data:\n        \"https://basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png\",\n\n      /**\n       * \n       * TESTS WITH OTHER TILESETS  \n       * 'https://api.mapbox.com/v4/mapbox.mapbox-streets-v8/{z}/{x}/{y}.png' +\n      '?style=' +\n      'mapbox://styles/mapbox/dark-v10' +\n      'mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq' +\n      'mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd' +\n      '&access_token=' +\n      process.env.REACT_APP_MAPBOX_TOKEN,\n\n     settings.map.mapStyle.sat,\n       'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\n       */\n\n      minZoom: 0,\n      maxZoom: 19,\n      tileSize: 96,\n\n      renderSubLayers: (props) => {\n        const {\n          bbox: { west, south, east, north },\n        } = props.tile;\n\n        return new BitmapLayer(props, {\n          data: null,\n          image: props.data,\n          _imageCoordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n          bounds: [west, south, east, north],\n        });\n      },\n    }),\n\n    new LineLayer({\n      id: \"LineLayer\",\n      data: markerInfo,\n      pickable: true,\n      getWidth: zoom < 2 ? 0.5 : 0,\n      getSourcePosition: (d) => d.coord.from,\n      getTargetPosition: (d) => d.coord.to,\n      getColor: (d) => [255, 82, 120],\n    }),\n    new TextLayer({\n      id: \"text-layer\",\n      data: markerInfo,\n      pickable: true,\n      getPosition: (d) => d.coord.to,\n      getText: (d) => d.tableName,\n      getColor: [255, 82, 120],\n      getSize: zoom < 2 ? 0 : 10,\n      getAngle: 0,\n      getPixelOffset: [10, 5],\n      getTextAnchor: \"start\",\n      getAlignmentBaseline: \"center\",\n    }),\n    new IconLayer({\n      id: \"icon-layer\",\n      data: markerInfo,\n      pickable: true,\n      iconAtlas: icon,\n      onClick: (d) => {\n        setInitialViewState({\n          longitude: d.object.coord.to[0],\n          latitude: d.object.coord.to[1],\n          zoom: 3,\n          pitch: 0,\n          bearing: 0,\n          transitionDuration: 1000,\n          transitionInterpolator: new FlyToInterpolator(),\n        });\n\n        setClicked(d);\n      },\n      iconMapping: {\n        marker: { x: 0, y: 0, width: 768, height: 768, mask: false },\n      },\n      getIcon: (d) => \"marker\",\n      sizeScale: 1,\n      getSize: zoom < 5 ? 20 : 10,\n      getPosition: (d) => [d.coord.to[0], d.coord.to[1], INIT_VIEW.zHeight],\n    }),\n  ];\n\n  return (\n    <>\n      {clicked && clicked.object && <SelectedTable clicked={clicked.object} />}\n\n      <DeckGL\n        views={new GlobeView()}\n        onHover={({ object }) => (isHovering = Boolean(object))}\n        getCursor={({ isDragging }) =>\n          isDragging ? \"grabbing\" : isHovering ? \"crosshair\" : \"grab\"\n        }\n        layers={layers}\n        controller={true}\n        initialViewState={initialViewState}\n        onViewportChange={setViewport}\n        onViewStateChange={(d) => setZoom(d.viewState.zoom)}\n        ContextProvider={_MapContext.Provider}\n      ></DeckGL>\n    </>\n  );\n}\n","import CityIOlist from \"./CityIOlist\";\nimport SearchTablesList from \"./SearchTablesList\";\nimport { useState } from \"react\";\nimport { Typography, Link, Grid, Box } from \"@mui/material\";\nimport GitHubIcon from \"@mui/icons-material/GitHub\";\nimport CityIOdeckGLmap from \"./CityIOdeckGLmap/index\";\n\nexport default function CityIOviewer() {\n  // get the list of tables from CityIOlist component and pass it to SearchTablesList component\n  const [tablesList, getTablesList] = useState([]);\n  return (\n    <>\n      <CityIOdeckGLmap cityIOdata={tablesList} />\n\n      <Box sx={{ width: \"100%\", padding: 5 }}>\n        <CityIOlist getTablesList={getTablesList} />\n\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <SearchTablesList tablesList={tablesList} />\n          </Grid>\n          <Grid item xs={12} lg={6} zIndex={10}>\n            <Typography variant=\"h1\">MIT CityScope</Typography>\n            <Typography variant=\"h4\">\n              MIT CityScope is an open-source urban modeling and simulation\n              platform. CityScope allows users to examine different design\n              alternatives, and observe their impact through multiple layers of\n              urban analytics.\n              <Link href={\"https://github.com/CityScope\"} target={\"blank\"}>\n                Join the CityScope open-source development\n              </Link>  <GitHubIcon fontSize={\"small\"} /> \n            </Typography>\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport CityIO from \"../../Components/CityIO\";\nimport RenderedViewMap from \"./RenderedViewMap\";\nimport { Container } from \"@mui/material\";\n\nexport default function RenderedView() {\n  const cityIOisDone = useSelector(\n    (state) => state.cityIOdataState.cityIOisDone\n  );\n  const tableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      {tableName && <CityIO tableName={tableName} />}\n      <Container maxWidth=\"md\" sx={{ mt: 5, mb: 5 }}>\n        {cityIOisDone && <RenderedViewMap />}\n      </Container>\n    </>\n  );\n}\n","import { TextField, Box } from \"@mui/material\";\n// convert every item in viewState to an input field\n// that can be edited and update the viewState with the new values\nfunction ViewStateInputs(props) {\n  const viewState = props.viewState;\n  const setViewState = props.setViewState;\n  const viewToggles = Object.keys(viewState).map((key) => {\n    if (Number.isFinite(viewState[key])) {\n      return (\n        <TextField\n          key={key}\n          id=\"outlined-number\"\n          label={key}\n          type=\"number\"\n          value={viewState[key]}\n          onChange={(e) => {\n            setViewState({\n              ...viewState,\n              [key]: parseFloat(e.target.value),\n            });\n          }}\n        />\n      );\n    } else {\n      return null;\n    }\n  });\n  return (\n    <Box\n      sx={{\n        component: \"form\",\n        backgroundColor: \"rgba(0,0,0,0.95)\",\n        \"& .MuiTextField-root\": { m: 2, width: \"90%\" },\n        bottom: \"1vh\",\n        left: \"1vw\",\n        maxWidth: \"30%\",\n        position: \"fixed\",\n        zIndex: \"tooltip\",\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>Changes are saved automatically. Press [ z ] again to hide.</div>\n\n      <div>{viewToggles}</div>\n    </Box>\n  );\n}\n\nexport default ViewStateInputs;\n","import { useRef, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Map from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { mapSettings as settings } from \"../../../../settings/settings\";\nimport ViewStateInputs from \"../Components/ViewStateInputs\";\n\nexport default function DeckMap(props) {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const TUIobject = cityIOdata && cityIOdata.tui;\n  const header = cityIOdata.GEOGRID.properties.header;\n  const viewStateEditMode = props.viewStateEditMode;\n  const layers = props.layers;\n  const editMode = props.editMode;\n\n  const mapStyle = {\n    active: TUIobject && TUIobject.MAP_STYLE && TUIobject.MAP_STYLE.active,\n    style:\n      settings.map.mapStyle[\n        TUIobject && TUIobject.MAP_STYLE && TUIobject.MAP_STYLE.style\n      ] || settings.map.mapStyle.blue,\n  };\n\n  const [viewState, setViewState] = useState();\n\n  const setViewStateToTableHeader = () => {\n    setViewState({\n      ...viewState,\n      longitude: header.longitude,\n      latitude: header.latitude,\n      zoom: 15,\n      pitch: 0,\n      bearing: 360 - header.rotation,\n      orthographic: true,\n    });\n  };\n\n  const deckGLref = useRef(null);\n\n  useEffect(() => {\n    // fix deck view rotate\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // on init, check if prev. local storage with\n    // view state exist. If so, load it.\n    if (localStorage.getItem(\"projectionViewStateStorage\")) {\n      console.log(\"loading prev. projectionViewStateStorage...\");\n      const vs = localStorage.getItem(\"projectionViewStateStorage\");\n      setViewState(JSON.parse(vs));\n    } else {\n      // zoom map on CS table location\n      setViewStateToTableHeader();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onViewStateChange = ({ viewState }) => {\n    //    save current view state to local storage\n    localStorage.setItem(\n      \"projectionViewStateStorage\",\n      JSON.stringify(viewState)\n    );\n    // ! lock bearing to avoid odd rotation\n    setViewState({ ...viewState, pitch: 0, orthographic: true });\n  };\n\n  return (\n    <>\n      <DeckGL\n        ref={deckGLref}\n        viewState={viewState}\n        onViewStateChange={onViewStateChange}\n        layers={layers}\n        controller={{}}\n      >\n        {!editMode && (\n          <Map\n            active={mapStyle.active}\n            width=\"100%\"\n            height=\"100%\"\n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n            mapStyle={mapStyle.style}\n          />\n        )}\n      </DeckGL>\n      {viewStateEditMode && viewState && (\n        <ViewStateInputs setViewState={setViewState} viewState={viewState} />\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { mapSettings as settings } from \"../../../../settings/settings\";\nimport { GeoJsonLayer, TripsLayer, HeatmapLayer, TextLayer } from \"deck.gl\";\nimport { processGridData } from \"../../../CityScopeJS/DeckglMap/deckglLayers/GridLayer\";\nimport { hexToRgb } from \"../../../../utils/utils\";\nimport DeckMap from \"./DeckMap\";\n\nexport default function ProjectionDeckMap(props) {\n  const editMode = props.editMode;\n  const viewStateEditMode = props.viewStateEditMode;\n  const layersVisibilityControl = props.layersVisibilityControl;\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const TUIobject = cityIOdata && cityIOdata.tui;\n\n  const [time, setTime] = useState(settings.map.layers.ABM.startTime);\n  const [animation] = useState({});\n\n  const animate = () => {\n    setTime((t) => {\n      return t > settings.map.layers.ABM.endTime\n        ? settings.map.layers.ABM.startTime\n        : t + settings.map.layers.ABM.animationSpeed;\n    });\n    animation.id = window.requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    animation.id = window.requestAnimationFrame(animate);\n    return () => window.cancelAnimationFrame(animation.id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animation]);\n\n  const layersArray = () => {\n    if (!TUIobject) return [];\n    return [\n      new GeoJsonLayer({\n        id: \"GRID\",\n        visible: TUIobject.GRID && TUIobject.GRID.active,\n        data: processGridData(cityIOdata),\n        opacity: 0.5,\n        extruded: false,\n        wireframe: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 1,\n        getFillColor: (d) => d.properties.color,\n        transitions: {\n          getFillColor: 500,\n        },\n      }),\n\n      new HeatmapLayer({\n        id: \"ACCESS\",\n        visible: TUIobject.ACCESS && TUIobject.ACCESS.active,\n        colorRange: [\n          [233, 62, 58],\n          [237, 104, 60],\n          [243, 144, 63],\n        ],\n        intensity: 1,\n        threshold: 0.5,\n        data: cityIOdata.access && cityIOdata.access.features,\n        getPosition: (d) => d.geometry.coordinates,\n        getWeight: (d) =>\n          d.properties[TUIobject.ACCESS.toggleArray.curr_active] || 0,\n        updateTriggers: {\n          getWeight: TUIobject.ACCESS.toggleArray.curr_active,\n        },\n      }),\n\n      // text layer in the center of each grid cell from the cityIOdata.GEOGRID.features\n      new TextLayer({\n        id: \"text\",\n        visible: TUIobject.TEXT && TUIobject.TEXT.active,\n        data: cityIOdata.GEOGRID && cityIOdata.GEOGRID.features,\n        getPosition: (d) => {\n          const pntArr = d.geometry.coordinates[0];\n          const first = pntArr[1];\n          const last = pntArr[pntArr.length - 2];\n          const center = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n          return center;\n        },\n        getText: (d) => {\n          var length = 5;\n          return d.properties.name.length > length\n            ? d.properties.name.substring(0, length - 3) + \"...\"\n            : d.properties.name;\n        },\n        getColor: (d) => [0, 0, 0],\n        getSize: 8,\n      }),\n\n      new TripsLayer({\n        id: \"ABM\",\n        visible: TUIobject.ABM && TUIobject.ABM.active,\n        data: cityIOdata.ABM2 && cityIOdata.ABM2.trips,\n        getColor: (d) => {\n          let col = hexToRgb(cityIOdata.ABM2.attr.mode[d.mode].color);\n          return col;\n        },\n        getPath: (d) => d.path,\n        getTimestamps: (d) => d.timestamps,\n        fadeTrail: true,\n        getWidth: 10,\n        trailLength: 200,\n        currentTime: time,\n      }),\n    ];\n  };\n\n  return (\n    <DeckMap\n      editMode={editMode}\n      viewStateEditMode={viewStateEditMode}\n      layers={layersArray(layersVisibilityControl)}\n    />\n  );\n}\n","import React from 'react'\nimport { Anchor, Vector } from \"./Keystoner\";\n\nconst anchorSize = 20;\nconst halfAnchor = anchorSize / 1.5;\nconst vectorToTransform = (vector: Vector) =>\n  `translate(${vector[0]}px, ${vector[1]}px)`;\nconst styles = {\n  container: {\n    width: anchorSize,\n    height: anchorSize,\n    borderRadius: \"50%\",\n    position: \"absolute\" as \"absolute\",\n    border: \"1px solid white\",\n    cursor: \"move\",\n  },\n  \"top-left\": {\n    left: -halfAnchor,\n    top: -halfAnchor,\n  },\n  \"bottom-left\": {\n    left: -halfAnchor,\n    bottom: -halfAnchor,\n  },\n  \"top-right\": {\n    top: -halfAnchor,\n    right: -halfAnchor,\n  },\n  \"bottom-right\": {\n    bottom: -halfAnchor,\n    right: -halfAnchor,\n  },\n};\n\nexport interface Props {\n  position: Anchor;\n  onMouseEnter?: (position: Anchor) => void;\n  // tslint:disable-next-line:no-any\n  onMouseDown: (evt: any, position: Anchor) => void;\n  onMouseUp: (position: Anchor) => void;\n  translation: Vector;\n  style?: React.CSSProperties;\n  className?: string;\n}\n\nexport const AnchorComponent = ({\n  position,\n  translation,\n  onMouseEnter,\n  onMouseDown,\n  onMouseUp,\n  className = \"\",\n  style = {},\n}: any) => (\n  <div\n    onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n    onMouseDown={(evt) => onMouseDown(evt, position)}\n    onMouseUp={() => onMouseUp(position)}\n    className={className}\n    style={{\n      ...styles.container,\n      ...styles[position],\n      ...style,\n      transform: vectorToTransform(translation),\n    }}\n  />\n);\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n  var factor = Math.pow(10, precision);\n  var tempNumber = num * factor;\n  var roundedTempNumber = Math.round(tempNumber);\n  return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n  (Array as any)(num)\n    .fill()\n    .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n  sourcePoints: RectPoints,\n  targetPoints: RectPoints\n): Matrix3d => {\n  const a: number[][] = [];\n  const b: number[] = [];\n\n  for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n    const [fromX, fromY] = sourcePoints[i];\n    const [toX, toY] = targetPoints[i];\n\n    a.push(\n      [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n      [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n    );\n\n    b.push(toX, toY);\n  }\n\n  const h = solve(a, b, true);\n\n  return [\n    h[0],\n    h[3],\n    0,\n    h[6],\n    h[1],\n    h[4],\n    0,\n    h[7],\n    0,\n    0,\n    1,\n    0,\n    h[2],\n    h[5],\n    0,\n    1,\n  ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n  `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n  `translate(${vector[0]}px, ${vector[1]}px)`;\n\n// Component interfaces\nexport interface Props {\n  style?: React.CSSProperties;\n  className?: string;\n  isEditMode?: boolean;\n  x?: number;\n  y?: number;\n  anchorStyle?: React.CSSProperties;\n  anchorClassName?: string;\n  children?: React.ReactNode;\n}\n\nexport interface Context {\n  isEditMode: boolean;\n}\n\nexport interface State {\n  matrix: Matrix3d;\n  translateDelta: { [key: string]: Vector };\n  sourcePoints?: RectPoints;\n  transformOrigin: Vector;\n  containerTranslate: Vector;\n}\n\nconst styles = {\n  container: {\n    position: \"relative\" as \"relative\",\n  },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n  \"top-left\",\n  \"top-right\",\n  \"bottom-right\",\n  \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n  let deltaInitVals: any = {};\n  anchors.forEach((e) => {\n    deltaInitVals[e] = [0, 0];\n  });\n  return deltaInitVals;\n};\n\nexport default class Keystoner extends React.Component<Props, State> {\n  container: HTMLElement | undefined | null;\n  layerTranslateDelta: Vector | undefined;\n  anchorTranslateDelta: Vector | undefined;\n  isAnchorDragging = false;\n  targetPoints: RectPoints | any;\n  anchorMoving: Anchor | undefined;\n  state: State = {\n    matrix: defaultMatrix,\n    translateDelta: _setDeltaVal(),\n    sourcePoints: undefined,\n    transformOrigin: [0, 0],\n    containerTranslate: [this.props.x || 0, this.props.y || 0],\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    if (this.container) {\n      const { width, height } = this.container.getBoundingClientRect();\n      const marginInitialView = 0;\n      const sourcePoints = [\n        [marginInitialView, marginInitialView],\n        [width - marginInitialView, marginInitialView],\n        [width - marginInitialView, height - marginInitialView],\n        [marginInitialView, height - marginInitialView],\n      ] as RectPoints;\n      this.targetPoints = [...sourcePoints] as RectPoints;\n      this.setState({ sourcePoints });\n\n      if (localStorage.getItem(\"projMap\")) {\n        console.log(\"loading prev. projMap...\");\n        let ls: any = localStorage.getItem(\"projMap\");\n        this.setState(JSON.parse(ls));\n      }\n    }\n  }\n  componentDidUpdate(prevProps: any, prevState: State) {\n    // save whatever keystone was in state\n    localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n    window.removeEventListener(\"mousemove\", this.onMouseMove);\n  }\n\n  onAnchorMouseDown = (evt: any, position: any) => {\n    evt.stopPropagation();\n    this.anchorTranslateDelta = [\n      evt.pageX - this.state.translateDelta[position][0],\n      evt.pageY - this.state.translateDelta[position][1],\n    ];\n\n    this.anchorMoving = position;\n  };\n\n  onAnchorMouseMove = (evt: any) => {\n    if (\n      !this.anchorTranslateDelta ||\n      !this.state.sourcePoints ||\n      !this.anchorMoving\n    ) {\n      return;\n    }\n    evt.preventDefault();\n    evt.stopPropagation();\n    const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n    const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n    const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n    this.targetPoints[vectorIndexToModify] = [\n      this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n      this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n    ];\n\n    this.setState({\n      matrix: transformPointsToMatrix(\n        this.state.sourcePoints,\n        this.targetPoints!\n      ),\n      translateDelta: {\n        ...this.state.translateDelta,\n        [this.anchorMoving]: [deltaX, deltaY],\n      },\n    });\n  };\n\n  onAnchorMouseUp = (position: any) => {\n    this.anchorTranslateDelta = undefined;\n    this.anchorMoving = undefined;\n  };\n\n  onMouseUp = () => {\n    this.layerTranslateDelta = undefined;\n  };\n\n  onMouseMove = (evt: any) => {\n    if (!this.layerTranslateDelta || !this.props.isEditMode) {\n      return;\n    }\n\n    const newVector: Vector = [\n      evt.pageX - this.layerTranslateDelta[0],\n      evt.pageY - this.layerTranslateDelta[1],\n    ];\n\n    this.setState({\n      containerTranslate: newVector,\n    });\n  };\n\n  onMouseDown = (evt: any) => {\n    const { containerTranslate } = this.state;\n    this.layerTranslateDelta = [\n      evt.pageX - containerTranslate[0],\n      evt.pageY - containerTranslate[1],\n    ];\n  };\n\n  render() {\n    const {\n      style,\n      isEditMode,\n      className,\n      anchorStyle,\n      anchorClassName,\n    } = this.props;\n    const {\n      translateDelta,\n      matrix,\n      containerTranslate,\n      transformOrigin,\n    } = this.state;\n\n    return (\n      <>\n        <div\n          onMouseDown={this.onMouseDown}\n          onMouseUp={this.onMouseUp}\n          style={{\n            cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n            position: \"relative\",\n            display: \"inline-block\",\n            transform: vectorToTransform(containerTranslate),\n          }}\n        >\n          <div\n            ref={(ref) => {\n              this.container = ref;\n            }}\n            style={{\n              ...styles.container,\n              ...style,\n              pointerEvents: isEditMode ? \"none\" : \"all\",\n              transform: matrixToTransform(matrix),\n              transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n            }}\n            className={className}\n          >\n            {this.props.children}\n          </div>\n          {isEditMode && (\n            <div>\n              {anchors.map((anchor, index) => (\n                <AnchorComponent\n                  style={anchorStyle}\n                  className={anchorClassName}\n                  key={anchor}\n                  translation={translateDelta[anchor]}\n                  position={anchor}\n                  onMouseDown={this.onAnchorMouseDown}\n                  onMouseUp={this.onAnchorMouseUp}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport default function DeleteLocalStorage() {\n  return (\n    <Grid container alignItems=\"center\" justify=\"center\">\n      <Button\n        sx={{ zIndex: \"tooltip\", top: \"50vh\", left: \"50vw\" }}\n        variant=\"contained\"\n        startIcon={<DeleteIcon />}\n      >\n        Reset Projection Mapping\n      </Button>\n    </Grid>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport ProjectionDeckMap from \"./ProjectionDeckMap\";\nimport Keystoner from \"./Components/Keystoner\";\nimport DeleteLocalStorage from \"./Components/deleteLocalStorage\";\nimport { useSelector } from \"react-redux\";\n\nexport default function Keystone() {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const numCols = cityIOdata.GEOGRID.properties.header.ncols;\n  const numRows = cityIOdata.GEOGRID.properties.header.nrows;\n  const tableRatio = numCols / numRows;\n\n  const [editMode, setEditMode] = useState(false);\n  const [viewStateEditMode, setViewStateEditMode] = useState(false);\n\n\n  const clearLocalStorage = () => {\n    if (localStorage.getItem(\"projMap\")) {\n      localStorage.removeItem(\"projMap\");\n    }\n    if (localStorage.getItem(\"projectionViewStateStorage\")) {\n      localStorage.removeItem(\"projectionViewStateStorage\");\n    }\n    window.location.reload();\n  };\n\n  useEffect(() => {\n    console.log(\"Keystone starting...\");\n    const onKeyDown = ({ key }) => {\n      if (key === \" \") {\n        setEditMode((editMode) => !editMode);\n      }\n      // if the key is 'z', display the viewState editor\n      if (key === \"z\") {\n        setViewStateEditMode((viewStateEditMode) => !viewStateEditMode);\n      }\n    };\n    document.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, []);\n\n  return (\n    <>\n      {editMode && (\n        <div onClick={() => clearLocalStorage()}>\n          <DeleteLocalStorage />\n        </div>\n      )}\n\n      <div\n        // ! this div's props are\n        // ! controling the projection z-index\n        // ! on top of the menus\n\n        style={{\n          height: \"100vh\",\n          width: \"100vw\",\n          overflow: \"hidden\",\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          zIndex: 1000,\n        }}\n      >\n        <div>\n          <Keystoner\n            style={{\n              height: \"100vh\",\n              width: `${tableRatio * 100}vh`,\n              backgroundColor: editMode ? \"rgba(255,0,0)\" : null,\n            }}\n            isEditMode={editMode}\n          >\n            <ProjectionDeckMap\n              editMode={editMode}\n              viewStateEditMode={viewStateEditMode}\n             \n            />\n          </Keystoner>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport CityIO from \"../../Components/CityIO\";\nimport Keystone from \"./Keystone\";\n\nexport default function ProjectionMapping() {\n  const cityIOisDone = useSelector(\n    (state) => state.cityIOdataState.cityIOisDone\n  );\n  const tableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      {tableName && <CityIO tableName={tableName} />}\n      {cityIOisDone && <Keystone />}\n    </>\n  );\n}\n","export default function SelectionTarget(props) {\n  if (!props.mousePos) return null;\n  const mousePos = props.mousePos;\n  const mouseDown = props.mouseDown;\n  const selectedType = props.selectedType;\n  const divSize = props.divSize;\n  let mouseX = mousePos.x - divSize / 2;\n  let mouseY = mousePos.y - divSize / 2;\n  return (\n    <div\n      style={{\n        border: \"2px solid\",\n        backgroundColor: mouseDown ? selectedType.color : \"rgba(0,0,0,0)\",\n        borderColor: selectedType.color,\n        color: selectedType.color,\n        borderRadius: \"15%\",\n        position: \"fixed\",\n        zIndex: 1,\n        pointerEvents: \"none\",\n        width: divSize,\n        height: divSize,\n        left: mouseX || 0,\n        top: mouseY || 0,\n      }}\n    >\n      <div\n        style={{\n          position: \"relative\",\n          left: divSize + 10,\n          fontSize: \"0.5em\",\n        }}\n      >\n        {selectedType.name}\n      </div>\n    </div>\n  );\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { GridEditorSettings } from \"../../settings/settings\";\n\nexport const editorMenuSlice = createSlice({\n  name: \"menuState\",\n  initialState: {\n    editorMapCenter: {\n      latitude: GridEditorSettings.GEOGRID.properties.header.latitude,\n      longitude: GridEditorSettings.GEOGRID.properties.header.longitude,\n    },\n    gridMaker: {},\n    gridProps: {},\n    typesEditorState: {},\n  },\n  reducers: {\n    updateEditorMapCenter: (state, action) => {\n      state.editorMapCenter = action.payload;\n    },\n    updateGridProps: (state, action) => {\n      state.gridProps = action.payload;\n    },\n    updateGridMaker: (state, action) => {\n      state.gridMaker = action.payload;\n    },\n    updateTypesEditorState: (state, action) => {\n      state.typesEditorState = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateEditorMapCenter,\n  updateGridProps,\n  updateGridMaker,\n  updateTypesEditorState,\n} = editorMenuSlice.actions;\nexport default editorMenuSlice.reducer;\n","import EditorBrush from \"./EditorBrush\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { hexToRgb, testHex } from \"../../../utils/utils\";\nimport { updateGridMaker } from \"../../../redux/reducers/editorMenuSlice\";\nimport { GridEditorSettings } from \"../../../settings/settings\";\n\nexport default function EditorMap() {\n  const dispatch = useDispatch();\n  const [grid, setGrid] = useState();\n  // get the selected type from the store\n  const selectedType = useSelector(\n    (state) => state.editorMenuState.typesEditorState.selectedRow\n  );\n\n  // redux grid\n  const createdGrid = useSelector((state) => state.editorMenuState.gridMaker);\n  // create grid from redux store\n  useEffect(() => {\n    setGrid(createdGrid);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [createdGrid]);\n\n  // redux map center\n  const editorMapCenter = useSelector(\n    (state) => state.editorMenuState.editorMapCenter\n  );\n\n  const deckGLref = useRef(null);\n  const pickingRadius = 40;\n\n  useEffect(() => {\n    // zoom map on CS table location\n    setViewStateToTableHeader(editorMapCenter);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editorMapCenter]);\n\n  const [viewState, setViewState] = useState(\n    GridEditorSettings.map.initialViewState\n  );\n  // const [hoveredObj, setHoveredObj] = useState();\n  const [keyDownState, setKeyDownState] = useState();\n  const [mousePos, setMousePos] = useState();\n  const [mouseDown, setMouseDown] = useState();\n  const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n  const [pickedCellsState] = useState();\n  const onViewStateChange = ({ viewState }) => {\n    setViewState(viewState);\n  };\n\n  /**\n   * resets the camera viewport\n   * to cityIO header data\n   * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n   */\n  const setViewStateToTableHeader = (editorMapCenter) => {\n    setViewState({\n      ...viewState,\n      latitude:\n        (editorMapCenter && editorMapCenter.latCenter) ||\n        GridEditorSettings.GEOGRID.properties.header.latitude,\n      longitude:\n        (editorMapCenter && editorMapCenter.lonCenter) ||\n        GridEditorSettings.GEOGRID.properties.header.longitude,\n      zoom: 15,\n      pitch: 0,\n      bearing: 0,\n      orthographic: true,\n    });\n  };\n\n  // fix deck view rotate\n  useEffect(() => {\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // zoom map on CS table location\n    setViewStateToTableHeader();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Description. uses deck api to\n   * collect objects in a region\n   * @argument{object} event picking event\n   */\n  const multipleObjPicked = (event) => {\n    const dim = pickingRadius;\n    const x = event.x - dim / 2;\n    const y = event.y - dim / 2;\n    let multipleObj = deckGLref.current.pickObjects({\n      x: x,\n      y: y,\n      width: dim,\n      height: dim,\n    });\n    return multipleObj;\n  };\n\n  /**\n   * Description. allow only to pick cells that are\n   *  not of CityScope TUI & that are intractable\n   * so to not overlap TUI activity\n   */\n  const handleGridCellEditing = (event) => {\n    if (!selectedType) return;\n    const { height, name, color, interactive } = selectedType;\n    const multiSelectedObj = multipleObjPicked(event);\n\n    multiSelectedObj.forEach((pickedObject, index) => {\n      // create a copy of the object\n      const thisCellProps = { ...pickedObject.object.properties };\n      // modify the copy properties to match the selected type\n      thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n      thisCellProps.height = height;\n      thisCellProps.name = name;\n      if (interactive !== \"No\") {\n        thisCellProps.interactive = interactive;\n      } else {\n        delete thisCellProps.interactive;\n      }\n      //  assign the modified copy to the grid object\n      setGrid((grid) => ({\n        ...grid,\n        features: grid.features.map((feature) => {\n          if (pickedObject.index === feature.properties.id) {\n            return {\n              ...feature,\n              properties: thisCellProps,\n            };\n          }\n          return feature;\n        }),\n      }));\n    });\n  };\n\n  /**\n   * Description.\n   * draw target area around mouse\n   */\n  const renderEditorBrush = () => {\n    return (\n      selectedType && (\n        <EditorBrush\n          mousePos={mousePos}\n          selectedType={selectedType}\n          divSize={pickingRadius}\n          mouseDown={mouseDown}\n          // hoveredObj={hoveredObj}\n        />\n      )\n    );\n  };\n\n  const handleKeyUp = () => {\n    setKeyDownState(null);\n  };\n\n  const handleKeyDown = (e) => {\n    // avoid common clicks\n    setKeyDownState(e.nativeEvent.key);\n  };\n\n  /**\n   * renders deck gl layers\n   */\n  const renderLayers = () => {\n    const layers = [\n      new GeoJsonLayer({\n        id: \"GRID\",\n        opacity: 0.5,\n        stroked: false,\n        filled: true,\n        wireframe: true,\n        visible: true,\n        pickable: true,\n        data: grid,\n        extruded: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 1,\n        getElevation: (d) => d.properties.height[1],\n        getFillColor: (d) => d.properties.color,\n\n        onClick: (event, cellInfo) => {\n          if (!cellInfo.rightButton && keyDownState !== \"Shift\")\n            handleGridCellEditing(event);\n        },\n        onDrag: (event, cellInfo) => {\n          if (!cellInfo.rightButton && keyDownState !== \"Shift\")\n            handleGridCellEditing(event);\n        },\n        onDragStart: (event, cellInfo) => {\n          if (!cellInfo.rightButton && keyDownState !== \"Shift\") {\n            setDraggingWhileEditing(true);\n          }\n        },\n        onDragEnd: () => {\n          setDraggingWhileEditing(false);\n        },\n        updateTriggers: {\n          getFillColor: pickedCellsState,\n          getElevation: pickedCellsState,\n        },\n      }),\n    ];\n    return layers;\n  };\n\n  return (\n    <div\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onMouseMove={(e) => setMousePos(e.nativeEvent)}\n      onMouseUp={() => {\n        // ! when mouse is up, dispatch the grid to the store\n        //! so it will be sent to the server when committing\n        dispatch(updateGridMaker(grid));\n        setMouseDown(false);\n      }}\n      onMouseDown={() => setMouseDown(true)}\n    >\n      {renderEditorBrush()}\n\n      <DeckGL\n        ref={deckGLref}\n        viewState={viewState}\n        onViewStateChange={onViewStateChange}\n        layers={renderLayers()}\n        controller={{\n          touchZoom: true,\n          touchRotate: true,\n          dragPan: !draggingWhileEditing,\n          dragRotate: !draggingWhileEditing,\n          keyboard: false,\n        }}\n      >\n        <StaticMap\n          asyncRender={false}\n          dragRotate={true}\n          reuseMaps={true}\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n          mapStyle={GridEditorSettings.map.mapStyle.sat}\n          preventStyleDiffing={true}\n        />\n      </DeckGL>\n    </div>\n  );\n}\n","import Button from \"@mui/material/Button\";\nimport CenterFocusStrongIcon from \"@mui/icons-material/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\nimport { updateEditorMapCenter } from \"../../../../../redux/reducers/editorMenuSlice\";\n\nexport default function CenterMapButton(props) {\n  const dispatch = useDispatch();\n\n  return (\n    <Button\n      onClick={() => {\n        dispatch(\n          updateEditorMapCenter({\n            latCenter: parseFloat(props.mapCenter[0]),\n            lonCenter: parseFloat(props.mapCenter[1]),\n          })\n        );\n      }}\n      variant=\"outlined\"\n      startIcon={<CenterFocusStrongIcon />}\n    >\n      Center Map to Grid\n    </Button>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { updateGridProps } from \"../../../../redux/reducers/editorMenuSlice\";\nimport { TextField, Typography, List, ListItem, Stack } from \"@mui/material\";\nimport CenterMapButton from \"./CenterMapButton\";\nimport { GridEditorSettings } from \"../../../../settings/settings\";\n\nexport default function GridProps() {\n  const settings = GridEditorSettings;\n  const dispatch = useDispatch();\n  const [formValues, setFormValues] = useState({\n    tableName: settings.GEOGRID.properties.header.tableName,\n    latitude: settings.GEOGRID.properties.header.latitude,\n    longitude: settings.GEOGRID.properties.header.longitude,\n    tz: settings.GEOGRID.properties.header.tz,\n    nrows: settings.GEOGRID.properties.header.nrows,\n    ncols: settings.GEOGRID.properties.header.nrows,\n    rotation: settings.GEOGRID.properties.header.rotation,\n    cellSize: settings.GEOGRID.properties.header.cellSize,\n    projection: settings.GEOGRID.properties.header.projection,\n  });\n\n  const handleFormUpdates = (event) => {\n    const { id, value } = event.target;\n    setFormValues({ ...formValues, [id]: value });\n  };\n\n  useEffect(() => {\n    // dispatch form values to redux store\n    dispatch(updateGridProps(formValues));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formValues]);\n\n  //  get all data\n  // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n  return (\n    <List>\n      <ListItem>\n        <Typography variant=\"h4\">Project Properties</Typography>\n      </ListItem>\n      <ListItem>\n        <TextField\n          onChange={(event) => handleFormUpdates(event)}\n          variant=\"outlined\"\n          id=\"tableName\"\n          label=\"CityScope Project Name\"\n          defaultValue={formValues.tableName}\n        />\n      </ListItem>\n      <ListItem>\n        <Stack direction=\"row\" spacing={1}>\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"latitude\"\n            label=\"Latitude\"\n            defaultValue={formValues.latitude}\n            type=\"number\"\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"longitude\"\n            label=\"Longitude\"\n            defaultValue={formValues.longitude}\n            type=\"number\"\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"tz\"\n            label=\"Time Zone (GMT)\"\n            defaultValue={formValues.tz}\n            type=\"number\"\n          />\n        </Stack>\n      </ListItem>\n      <ListItem>\n        <CenterMapButton\n          mapCenter={[formValues.latitude, formValues.longitude]}\n        />\n      </ListItem>\n\n      <ListItem>\n        <Stack direction=\"row\" spacing={1}>\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"nrows\"\n            label=\"Rows\"\n            defaultValue={formValues.nrows}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 100,\n                min: 0,\n              },\n            }}\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"ncols\"\n            label=\"Columns\"\n            defaultValue={formValues.ncols}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 100,\n                min: 0,\n              },\n            }}\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"rotation\"\n            label=\"Rotation (deg)\"\n            defaultValue={formValues.rotation}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 360,\n                min: 0,\n              },\n            }}\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"cellSize\"\n            label=\"Cell Size (m^2)\"\n            defaultValue={formValues.cellSize}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 1000,\n                min: 1,\n              },\n            }}\n          />\n        </Stack>\n      </ListItem>\n      <ListItem>\n        <TextField\n          size=\"small\"\n          onChange={(event) => handleFormUpdates(event)}\n          variant=\"outlined\"\n          id=\"projection\"\n          label=\"Projection\"\n          defaultValue={formValues.projection}\n          type=\"string\"\n          helperText=\"Default projection should work for most CityScope cases. Find specific projections at: https://epsg.io/\"\n        />\n      </ListItem>\n    </List>\n  );\n}\n","import proj4 from \"proj4\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nfunction deg_to_rad(deg) {\n  return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n  return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n  var keys = Object.keys(obj);\n  return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps, typesList) => {\n  let top_left_lon = parseFloat(gridProps.longitude);\n  let top_left_lat = parseFloat(gridProps.latitude);\n  let rotation = parseFloat(gridProps.rotation);\n  let userPrj = gridProps.projection;\n  let cell_size = parseFloat(gridProps.cellSize);\n  let nrows = parseFloat(gridProps.nrows);\n  let ncols = parseFloat(gridProps.ncols);\n\n  const webMercator = proj4.defs(\"EPSG:4326\");\n  let EARTH_RADIUS_M = 6.371e6;\n  let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n  let bearing = (90 - rotation + 360) % 360;\n  let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n  let la1 = deg_to_rad(top_left_lon_lat.lat);\n  let lo1 = deg_to_rad(top_left_lon_lat.lon);\n  let bearing_rad = deg_to_rad(bearing);\n  let la2 = Math.asin(\n    Math.sin(la1) * Math.cos(Ad) +\n      Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n  );\n  let lo2 =\n    lo1 +\n    Math.atan2(\n      Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n      Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n    );\n  let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n  let top_left_xy = proj4(webMercator, userPrj, [\n    top_left_lon_lat.lon,\n    top_left_lon_lat.lat,\n  ]);\n\n  let top_right_xy = proj4(webMercator, userPrj, [\n    top_right_lon_lat.lon,\n    top_right_lon_lat.lat,\n  ]);\n\n  let dydx =\n    (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n  let theta = Math.atan(dydx);\n  let cosTheta = Math.cos(theta);\n  let sinTheta = Math.sin(theta);\n  // create rotate matrix\n  let x_unRot = [];\n  let y_unRot = [];\n  for (let i = 0; i < nrows; i++) {\n    for (let j = 0; j < ncols; j++) {\n      x_unRot.push(j * cell_size);\n      y_unRot.push(-i * cell_size);\n    }\n  }\n\n  let x_rot = [];\n  let y_rot = [];\n  for (let i = 0; i < x_unRot.length; i++) {\n    x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n    y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n  }\n\n  let x_rot_trans = [];\n  let y_rot_trans = [];\n  for (let i = 0; i < x_rot.length; i++) {\n    x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n    y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n  }\n\n  var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n  var dydCol = y_rot_trans[1] - y_rot_trans[0];\n  var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n  var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n  let gridPnts = [];\n  let geojsonFeatureCollection = {\n    type: \"FeatureCollection\",\n    // polygons go here\n    features: [],\n  };\n\n  // get a list of types that is updated based on\n  // the current redux state of the types list table\n  let types = typesList;\n\n  for (let i = 0; i < x_rot_trans.length; i++) {\n    let rndType = randomProperty(types);\n\n    let geojsonPolygon = {\n      type: \"Feature\",\n      geometry: {\n        type: \"Polygon\",\n        coordinates: null,\n      },\n      properties: {\n        color: hexToRgb(rndType.color),\n        height: rndType.height,\n        name: rndType.name,\n        interactive: rndType.interactive,\n        id: i,\n      },\n    };\n\n    var polygon_xy = [\n      [x_rot_trans[i], y_rot_trans[i]],\n      [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n      [x_rot_trans[i] + dxdRow + dxdCol, y_rot_trans[i] + dydRow + dydCol],\n      [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n      [x_rot_trans[i], y_rot_trans[i]],\n    ];\n\n    var polygon_ll = [];\n    for (var v = 0; v < 5; v++) {\n      let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n      polygon_ll.push(ll);\n    }\n\n    geojsonPolygon.geometry.coordinates = [polygon_ll];\n    gridPnts.push(geojsonPolygon);\n  }\n  geojsonFeatureCollection.features = gridPnts;\n  return geojsonFeatureCollection;\n};\n","import { useState, useEffect } from \"react\";\nimport AutoAwesomeIcon from \"@mui/icons-material/AutoAwesome\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { gridCreator } from \"./gridCreator\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateGridMaker } from \"../../../../redux/reducers/editorMenuSlice\";\n\nexport default function GridMakerMenu() {\n  const dispatch = useDispatch();\n  const [grid, setGrid] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const gridProps = useSelector((state) => state.editorMenuState.gridProps);\n  const typesList = useSelector(\n    (state) => state.editorMenuState.typesEditorState.tableData\n  );\n\n  useEffect(() => {\n    dispatch(updateGridMaker(grid));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [grid]);\n\n  const handleGridCreation = () => {\n    setGrid(gridCreator(gridProps, typesList));\n  };\n\n  return (\n    <>\n      {gridProps && typesList && (\n        <LoadingButton\n          onClick={() => {\n            setLoading(true);\n            new Promise((resolve) => {\n              setTimeout(() => {\n                setLoading(false);\n                handleGridCreation();\n              }, 100);\n              resolve();\n            });\n          }}\n          loading={loading}\n          loadingPosition=\"start\"\n          variant=\"outlined\"\n          startIcon={<AutoAwesomeIcon />}\n        >\n          Generate Grid\n        </LoadingButton>\n      )}\n    </>\n  );\n}\n","import MaterialTable from \"@material-table/core\";\nimport { useState, useEffect } from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nimport { GridEditorSettings } from \"../../../../settings/settings\";\nimport { updateTypesEditorState } from \"../../../../redux/reducers/editorMenuSlice\";\n\nconst settings = GridEditorSettings;\n\nexport const createTypesArray = (LandUseTypesList) => {\n  let typesArray = [];\n  Object.keys(LandUseTypesList).forEach((type, index) => {\n    typesArray.push({\n      id: index,\n      name: type,\n      description: \"[edit info for type: \" + type + \"]\",\n      color: LandUseTypesList[type].color,\n      height: LandUseTypesList[type].height ? LandUseTypesList[type].height : [0,0,0],\n\n      LBCS: LandUseTypesList[type].LBCS\n        ? JSON.stringify(LandUseTypesList[type].LBCS)\n        : null,\n      NAICS: LandUseTypesList[type].NAICS\n        ? JSON.stringify(LandUseTypesList[type].NAICS)\n        : null,\n      interactive: LandUseTypesList[type].interactive,\n    });\n  });\n  return typesArray;\n};\n\nexport const tableInitialState = {\n  columns: [\n    {\n      title: \"Type\",\n      field: \"name\",\n    },\n    {\n      title: \"Description\",\n      field: \"description\",\n    },\n\n    {\n      title: \"Height Min.\",\n      field: \"height[0]\",\n      type: \"numeric\",\n    },\n    {\n      title: \"Height Default\",\n      field: \"height[1]\",\n      type: \"numeric\",\n    },\n    {\n      title: \"Height Max.\",\n      field: \"height[2]\",\n      type: \"numeric\",\n    },\n    {\n      title: \"Interactive\",\n      field: \"interactive\",\n      lookup: { No: \"No\", Web: \"Web\", TUI: \"TUI\" },\n    },\n    {\n      title: \"Color\",\n      field: \"color\",\n      type: \"string\",\n    },\n    {\n      title: \"LBCS\",\n      field: \"LBCS\",\n      type: \"string\",\n    },\n    {\n      title: \"NAICS\",\n      field: \"NAICS\",\n      type: \"string\",\n    },\n  ],\n  data: createTypesArray(settings.GEOGRID.properties.types),\n};\n\nexport default function TypesEditorMenu() {\n  const [tableState, setTableState] = useState(tableInitialState);\n  const dispatch = useDispatch();\n  const [selectedRow, setSelectedRow] = useState();\n  const [rowColor, setRowColor] = useState();\n\n  // redux the type list on every change\n  useEffect(() => {\n    dispatch(\n      updateTypesEditorState({\n        tableData: tableState.data,\n        selectedRow: selectedRow,\n        rowColor: rowColor,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableState, selectedRow, rowColor]);\n\n  return (\n    <MaterialTable\n      title={<Typography variant=\"h4\">Types Editor</Typography>}\n      columns={tableState.columns}\n      data={tableState.data}\n      options={{\n        paging: false,\n        search: true,\n        selection: false,\n        rowStyle: (rowData) => ({\n          backgroundColor:\n            selectedRow && selectedRow.tableData.id === rowData.tableData.id\n              ? rowColor\n              : null,\n\n          color:\n            selectedRow && selectedRow.tableData.id === rowData.tableData.id\n              ? \"black\"\n              : \"white\",\n        }),\n      }}\n      onRowClick={(evt, row) => {\n        setSelectedRow(row);\n        setRowColor(row.color);\n      }}\n      editable={{\n        // ! new row is added to the end of the table\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            resolve();\n            setTimeout(() => {\n              setTableState((prevState) => {\n                const data = [...prevState.data];\n                newData.id = data.length;\n                data.push(newData);\n                return { ...prevState, data };\n              });\n            }, 50);\n          }),\n        // ! row edit is done by clicking on the row\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            resolve();\n            setTimeout(() => {\n              if (oldData) {\n                setTableState((prevState) => {\n                  const tableData = [...prevState.data];\n                  const index = tableData\n                    .map((object) => object.id)\n                    .indexOf(oldData.id);\n                  tableData[index] = newData;\n                  return { ...prevState, data: tableData };\n                });\n              }\n            }, 50);\n          }),\n        // ! row delete is done by clicking on the icon\n        // onRowDelete: (oldData) => {\n        //   new Promise((resolve) => {\n        //     resolve();\n        //     setTimeout(() => {\n        //       if (oldData) {\n        //         setTableState((prevState) => {\n        //           const tableData = [...prevState.data];\n        //           const index = tableData\n        //             .map((object) => object.id)\n        //             .indexOf(oldData.id);\n        //           tableData.splice(index, 1);\n        //           return { ...prevState, data: tableData };\n        //         });\n        //       }\n        //     }, 1000);\n        //   });\n        // },\n      }}\n    />\n  );\n}\n","import { useState } from \"react\";\nimport axios from \"axios\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport { GridEditorSettings } from \"../../../../settings/settings\";\nimport {cityIOSettings} from \"../../../../settings/settings\";\nimport Typography from \"@mui/material/Typography\";\nimport { useSelector } from \"react-redux\";\nimport Link from \"@mui/material/Link\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\n\nconst reqResponseUI = (response, tableName) => {\n  let cityscopeJSendpoint =\n    \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" + tableName;\n  // create the feedback text\n  let resText = (\n    <Typography color=\"textPrimary\" variant=\"caption\">\n      CityIO is {response.data.status}. Grid deployed to{\" \"}\n      <Link color=\"textSecondary\" href={cityscopeJSendpoint}>\n        {cityscopeJSendpoint}\n      </Link>\n    </Typography>\n  );\n  return resText;\n};\n\nconst makeGEOGRIDobject = (struct, typesList, geoJsonFeatures, gridProps) => {\n  let GEOGRIDObject = { ...struct };\n\n  // take types list and prepare to csJS format\n  let newTypesList = {};\n  typesList.forEach((oldType) => {\n    newTypesList[oldType.name] = { ...oldType };\n    //material-table creates strings for these items\n    // so in first \"Commit to cityIO\", these must be turned into\n    // Json objects. On Second commit, these are already objects,\n    // hence the two conditions below\n    newTypesList[oldType.name].LBCS =\n      typeof oldType.LBCS === \"string\"\n        ? JSON.parse(oldType.LBCS)\n        : oldType.LBCS;\n    newTypesList[oldType.name].NAICS =\n      typeof oldType.NAICS === \"string\"\n        ? JSON.parse(oldType.NAICS)\n        : oldType.NAICS;\n  });\n\n  GEOGRIDObject.properties.types = newTypesList;\n  // inject table props to grid\n  GEOGRIDObject.properties.header = { ...gridProps };\n\n  const toFloatArray = [\n    \"longitude\",\n    \"latitude\",\n    \"rotation\",\n    \"nrows\",\n    \"ncols\",\n    \"cellSize\",\n  ];\n  toFloatArray.forEach((element) => {\n    GEOGRIDObject.properties.header[element] = parseFloat(\n      GEOGRIDObject.properties.header[element]\n    );\n  });\n\n  // lastly get the grid features\n  GEOGRIDObject.features = geoJsonFeatures;\n  return GEOGRIDObject;\n};\n\nconst makeGEOGRIDDATAobject = (geoJsonFeatures) => {\n  let GEOGRIDDATA_object = [];\n  geoJsonFeatures.forEach((element) => {\n    GEOGRIDDATA_object.push(element.properties);\n  });\n  return GEOGRIDDATA_object;\n};\n\nexport default function CommitGridMenu() {\n  const [loading, setLoading] = useState(false);\n  const [reqResponse, setReqResponse] = useState();\n  const gridProps = useSelector((state) => state.editorMenuState.gridProps);\n  const typesList = useSelector(\n    (state) => state.editorMenuState.typesEditorState.tableData\n  );\n\n  const generatedGrid = useSelector((state) => state.editorMenuState.gridMaker);\n  const generatedGridBool =\n    generatedGrid &&\n    generatedGrid.features &&\n    generatedGrid.features.length > 0;\n\n  const postGridToCityIO = () => {\n    let GEOGRIDStructure = GridEditorSettings.GEOGRID;\n    let geoJsonFeatures = generatedGrid.features;\n    // take grid struct from settings\n    let GEOGRIDObject = makeGEOGRIDobject(\n      GEOGRIDStructure,\n      typesList,\n      geoJsonFeatures,\n      gridProps\n    );\n\n    let GEOGRIDDATAObject = makeGEOGRIDDATAobject(geoJsonFeatures);\n    let tableName = GEOGRIDObject.properties.header.tableName.toLowerCase();\n\n    // post to cityIO server \n    const gridPOSToptions = (URL, DATA) => {\n      return {\n        method: \"post\",\n        url: URL,\n        data: DATA,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      };\n    };\n  \n    const table_url = `${cityIOSettings.cityIO.baseURL}table/${tableName}/`;\n    const new_table_grid = {\n      GEOGRID: GEOGRIDObject,\n      GEOGRIDDATA: GEOGRIDDATAObject,\n    };\n\n    axios(gridPOSToptions(table_url, new_table_grid))\n      .then(function (response) {\n        setReqResponse(reqResponseUI(response, tableName));\n      })\n      .catch((error) => console.log(`ERROR: ${error}`));\n  };\n\n  return (\n    <>\n      {generatedGridBool && (\n        <>\n          <LoadingButton\n            onClick={() => {\n              setLoading(true);\n              new Promise((resolve) => {\n                setTimeout(() => {\n                  setLoading(false);\n                  postGridToCityIO();\n                }, 1500);\n                resolve();\n              });\n            }}\n            loading={loading}\n            loadingPosition=\"start\"\n            variant=\"outlined\"\n            startIcon={<CloudUploadIcon />}\n          >\n            Commit Grid to cityIO\n          </LoadingButton>\n\n          <div style={{ width: \"100%\" }}> {reqResponse}</div>\n        </>\n      )}\n    </>\n  );\n}\n","import { List, Grid, ListItem, Typography, Card, CardContent } from \"@mui/material\";\nimport ResizableDrawer from \"../../../Components/ResizableDrawer\";\nimport GridPropsMenu from \"./GridPropsMenu\";\nimport GridMakerMenu from \"./GridMakerMenu\";\nimport TypesEditorMenu from \"./TypesEditorMenu\";\nimport CommitGridMenu from \"./CommitGridMenu\";\n\nexport default function EditorMenu() {\n  const menuItemsArray = [\n    <Typography variant=\"h2\">CityScope Grid Editor</Typography>,\n    <Typography>\n      This editor can create and `commit` spatial layouts (`grids`) as a\n      baseline for CityScope projects. Use the menus and map to edit girds,\n      types, and props, and commit them to cityIO.\n    </Typography>,\n    <GridPropsMenu />,\n    <Grid container spacing={2}>\n      <Grid item>\n        <GridMakerMenu />\n      </Grid>\n      <Grid item>\n        <CommitGridMenu />\n      </Grid>\n    </Grid>,\n\n    <TypesEditorMenu />,\n  ];\n\n  const MenuItems = () => {\n    const m = [];\n\n    menuItemsArray.forEach((item, index) => {\n      m.push(\n        <ListItem key={index}>\n          <Card variant=\"outlined\" sx={{ width: \"100%\" }}>\n            <CardContent>{item}</CardContent>\n          </Card>\n        </ListItem>\n      );\n    });\n    return m;\n  };\n\n  return (\n    <ResizableDrawer direction={\"left\"} width={500}>\n      <List>\n        <MenuItems />\n      </List>\n    </ResizableDrawer>\n  );\n}\n","import EditorMap from \"./EditorMap\";\nimport EditorMenu from \"./EditorMenu\";\n\nexport default function GridEditor() {\n  return (\n    <>\n      <EditorMenu />\n      <EditorMap />\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { CssBaseline } from \"@mui/material/\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { useDispatch } from \"react-redux\";\nimport { updateCityIOtableName } from \"./redux/reducers/cityIOdataSlice\";\nimport queryString from \"query-string\";\nimport theme from \"./theme\";\n// views\nimport CityScopeJS from \"./views/CityScopeJS\";\nimport CityIOviewer from \"./views/CityIOviewer\";\nimport RenderedView from \"./views/RenderedView\";\nimport ProjectionMapping from \"./views/ProjectionMapping\";\nimport GridEditor from \"./views/GridEditor\";\n\n/**\nget this tab URL and parse as a simple router to show the correct view\n **/\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const [tableName, setTableName] = useState();\n\n  // change the document title to the table name\n  useEffect(() => {\n    document.title = tableName ? `CityScopeJS | ${tableName}` : \"CityScopeJS\";\n  }, [tableName]);\n\n  const [viewSelectorState, setViewSelectorState] = useState();\n\n  const selectView = (view, tableName) => {\n    const cityIOtableName = tableName && tableName.toLowerCase();\n    // check if tableName is a valid tableName\n    if (cityIOtableName && cityIOtableName !== \"\") {\n      setTableName(cityIOtableName);\n      dispatch(updateCityIOtableName(cityIOtableName));\n      setViewSelectorState(view);\n    } else {\n      setViewSelectorState(\"cityio\");\n    }\n  };\n\n  // on init, get the adress URL to search for  a table\n  useEffect(() => {\n    const location = window.location;\n    const parsed = queryString.parse(location.search);\n\n    //a switch for the location.search and the parsed.tableName\n    const keys = Object.keys(parsed);\n\n    if (keys.includes(\"cityscope\")) {\n      selectView(\"cityscopejs\", parsed.cityscope);\n    } else if (keys.includes(\"projection\")) {\n      selectView(\"projection\", parsed.projection);\n    } else if (keys.includes(\"render\")) {\n      selectView(\"render\", parsed.render);\n    } else if (keys.includes(\"editor\")) {\n      setViewSelectorState(\"grideditor\");\n    } else {\n      setViewSelectorState(\"cityio\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <>\n        {/* otherwise show the editor  */}\n        {viewSelectorState === \"cityscopejs\" && <CityScopeJS />}\n        {/* otherwise show the editor  */}\n        {viewSelectorState === \"grideditor\" && <GridEditor />}\n        {/* otherwise, show the cityIOviewer */}\n        {viewSelectorState === \"cityio\" && <CityIOviewer />}\n        {/* otherwise, show the projection */}\n        {viewSelectorState === \"projection\" && <ProjectionMapping />}\n        {/* otherwise, show the projection */}\n        {viewSelectorState === \"render\" && <RenderedView />}\n      </>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport cityIOdataSliceReducer from \"./cityIOdataSlice\";\nimport menuSliceReducer from \"./menuSlice\";\nimport editorMenuSliceReducer from \"./editorMenuSlice\";\n\nexport default combineReducers({\n  cityIOdataState: cityIOdataSliceReducer,\n  menuState: menuSliceReducer,\n  editorMenuState: editorMenuSliceReducer,\n});\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./redux/reducers\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nReactDOM.render(\n  <>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}