{"version":3,"sources":["theme/GlobalStyles.js","theme/typography.js","theme/index.js","layouts/MainLayout/NavBar/NavItem.js","layouts/MainLayout/NavBar/index.js","layouts/MainLayout/TopBar.js","layouts/MainLayout/index.js","layouts/Page.js","views/Errors/NotFoundView.js","views/GridEditor/EditorMap/EditorBrush.js","redux/actions.js","views/GridEditor/EditorMap/EditorMap.js","views/GridEditor/index.js","views/CityIOviewer/CityIOdeckGLmap/legoio.png","views/CityIOviewer/SplashScreen/index.js","redux/initialState.js","redux/reducer.js","redux/store.js","utils/utils.js","views/CityScopeJS/MenuContainer/EditMenu/TypeInfo.js","views/CityScopeJS/MenuContainer/EditMenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","views/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/styles.js","views/CityScopeJS/DeckglMap/components/AnimationComponent.js","views/CityScopeJS/CSjsMain.js","views/ProjectionMapping/Keystone/Components/util.ts","views/ProjectionMapping/Keystone/Components/anchor.tsx","views/ProjectionMapping/Keystone/Components/Keystoner.tsx","views/ProjectionMapping/Keystone/Components/deleteLocalStorage.js","Components/TableNameInput.js","views/Errors/WIPview.js","routes.js","App.js","redux/Provider.js","index.js"],"names":["useStyles","makeStyles","createStyles","boxSizing","margin","padding","html","height","width","body","backgroundColor","a","textDecoration","GlobalStyles","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","h1","fontWeight","letterSpacing","h2","h3","h4","h5","h6","overline","theme","createMuiTheme","zIndex","appBar","palette","background","default","paper","dark","primary","main","light","secondary","text","colors","grey","shape","borderRadius","overrides","MuiListItem","root","boxShadow","button","MuiOutlinedInput","notchedOutline","borderColor","MuiAppBar","colorPrimary","color","MuiDivider","opacity","MuiCard","MuiButton","item","display","paddingTop","paddingBottom","justifyContent","textTransform","icon","marginRight","spacing","title","active","fontWeightBold","NavItem","className","href","Icon","rest","classes","ListItem","clsx","disableGutters","Button","activeClassName","component","RouterLink","to","size","items","MapIcon","BarChartIcon","FormatShapesIcon","mobileDrawer","top","NavBar","openNavDrawer","onMobileNavOpen","content","Box","flexDirection","p","List","map","style","onClick","flexGrow","Card","elevation","CardContent","position","Fab","Typography","align","variant","Date","getFullYear","Drawer","anchor","open","defaultProps","onMobileClose","TopBar","AppBar","Toolbar","IconButton","name","overflow","flex","MainLayout","useState","navMenuState","setNavMenuState","Page","forwardRef","ref","children","Helmet","image","marginTop","maxWidth","NotFoundView","Container","SelectionTarget","props","mousePos","selectedType","divSize","colorTrans","mouseX","clientX","mouseY","clientY","border","mouseDown","pointerEvents","left","GET_CITYIO_DATA","LISTEN_TO_MAP_EVENTS","LISTEN_TO_ABM_SLIDERS","LISTEN_TO_ABM_MODE","LISTEN_TO_ACCESS_TOGGLE","MENU_INTERACTION","LISTEN_TO_EDIT_MENU","listenToEditMenu","data","type","SET_READY_STATE","SET_LOADING_STATE","SET_SCENARIO_NAMES","ADD_LOADING_MODULES","REMOVE_LOADING_MODULES","SET_UI_WEBSOCKET_DATA","SET_UI_WEBSOCKET_READY","LISTEN_TO_GRID_CREATOR","LISTEN_TO_ROW_EDIT","LISTEN_TO_TYPES_LIST","LISTEN_TO_BASE_MAP_CENTER","listenToBaseMapCenter","_hexToRgb","hex","result","exec","parseInt","BaseMap","_toggleOrthoView","viewState","orthographic","menu","includes","_onViewStateChange","setState","componentDidUpdate","prevProps","mapCenter","state","latitude","latCenter","longitude","lonCenter","pitch","bearing","_mulipleObjPicked","e","dim","pickingRadius","x","y","deckGL","pickObjects","_handleGridcellEditing","interactive","multiSelectedObj","forEach","selected","thisCellProps","object","properties","selectedCellsState","_renderSelectionTarget","_handleKeyUp","keyDownState","_handleKeyDown","nativeEvent","key","draggingWhileEditing","settings","initialViewState","dirLightSettings","timestamp","UTC","intensity","_shadow","this","_rightClickViewRotate","_setViewStateToTableHeader","GEOGRID","header","zoom","document","getElementById","addEventListener","evt","preventDefault","layers","push","GeoJsonLayer","id","stroked","filled","wireframe","createdGrid","visible","pickable","extruded","lineWidthScale","lineWidthMinPixels","getElevation","d","getFillColor","event","cellInfo","rightButton","onDrag","onDragStart","onDragEnd","updateTriggers","transitions","onKeyDown","onKeyUp","onMouseMove","onMouseUp","onMouseDown","deck","onViewStateChange","_renderLayers","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","reuseMaps","mapboxApiAccessToken","process","mapStyle","sat","preventStyleDiffing","Component","mapDispatchToProps","connect","ROW_EDIT","BASE_MAP_CENTER","GRID_CREATED","divider","listOfToggles","Object","keys","toggles","menuInitState","i","length","values","showOnInit","initialState","MENU","CITYIO","SCENARIO_NAMES","MAP","LOADING_MODULES","SLIDERS","time","ABM","startSimHour","currentSimHour","endSimHour","speed","animationSpeed","ABM_MODE","ACCESS_TOGGLE","SELECTED_TYPE","READY","LOADING","TYPES_LIST","reducer","action","Set","filter","UI_WEBSOCKET_DATA","UI_WEBSOCKET_READY","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","hexToRgb","testHex","hexString","test","currentDateMidnight","setHours","TypeInfo","COLOR_SCALE","hoveredRadial","setHoveredRadial","typeInfo","attr","index","angle","proportion","label","JSON","stringify","use","careateData","colorType","animation","innerRadius","radialRadius","radius","getLabel","showLabels","getAngle","onValueMouseOver","onSeriesMouseOut","padAngle","value","gutterBottom","cityioData","React","selectedIndex","setSelectedIndex","dispatch","useDispatch","useSelector","marks","parseTypeInfo","parse","LanduseTypesList","iconsArr","description","col","LBCS","types","NAICS","rgbCol","typeHasHeightProps","alignItems","typeProps","ListItemAvatar","Avatar","charAt","ListItemText","Collapse","in","m","Grid","container","xs","l","md","xl","Slider","valueLabelDisplay","onChange","getAriaLabel","toString","min","max","Divider","Math","random","createTypesIcons","marginLeft","subtitle1","subtitle2","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","vectorToTransform","vector","halfAnchor","styles","cursor","bottom","right","AnchorComponent","translation","onMouseEnter","transform","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","WIPview","routes","path","element","App","routing","useRoutes","ThemeProvider","ProviderWrapper","ReactDOM","render","Provider","basename"],"mappings":"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","file":"static/js/main.908f75c2.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        \"@global\": {\n            \"*\": {\n                boxSizing: \"border-box\",\n                margin: 0,\n                padding: 0,\n            },\n            html: {\n                \"-webkit-font-smoothing\": \"antialiased\",\n                \"-moz-osx-font-smoothing\": \"grayscale\",\n                height: \"100%\",\n                width: \"100%\",\n            },\n            body: {\n                backgroundColor: \"#18191a\",\n                height: \"100%\",\n                width: \"100%\",\n            },\n            a: {\n                textDecoration: \"none\",\n            },\n            \"#root\": {\n                height: \"100%\",\n                width: \"100%\",\n            },\n        },\n    })\n);\n\nconst GlobalStyles = () => {\n    useStyles();\n\n    return null;\n};\n\nexport default GlobalStyles;\n","const typography = {\n    fontFamily: `\"Roboto Mono\", sans-serif`,\n    fontSize: 12,\n    fontWeightLight: 100,\n    fontWeightRegular: 500,\n    fontWeightMedium: 700,\n\n    h1: {\n        fontWeight: 700,\n        fontSize: 45,\n        letterSpacing: \"-1px\",\n    },\n    h2: {\n        fontWeight: 800,\n        fontSize: 29,\n        letterSpacing: \"-0.24px\",\n    },\n    h3: {\n        fontWeight: 700,\n        fontSize: 24,\n        letterSpacing: \"-0.06px\",\n    },\n    h4: {\n        fontWeight: 500,\n        fontSize: 20,\n        letterSpacing: \"-0.06px\",\n    },\n    h5: {\n        fontWeight: 500,\n        fontSize: 16,\n        letterSpacing: \"-0.05px\",\n    },\n    h6: {\n        fontWeight: 500,\n        fontSize: 14,\n        letterSpacing: \"-0.05px\",\n    },\n    overline: {\n        fontWeight: 500,\n    },\n};\n\nexport default typography;\n","import { createMuiTheme, colors } from '@material-ui/core'\nimport typography from './typography'\n\nconst theme = createMuiTheme({\n  zIndex: {\n    appBar: 999,\n  },\n  palette: {\n    background: {\n      default: '#ff5278', //255, 82, 120\n      paper: '#18191a',\n      dark: '#ff5278',\n    },\n    primary: {\n      main: '#FFF',\n      light: '#ff5278',\n    },\n    secondary: {\n      main: '#ff5278',\n    },\n\n    text: {\n      primary: colors.grey[100],\n      secondary: '#ff5278',\n    },\n  },\n\n  typography,\n  shape: {\n    borderRadius: 20,\n  },\n\n  overrides: {\n    MuiListItem: {\n      root: {\n        '&$selected': {\n          backgroundColor: '#18191a',\n          boxShadow:\n            '12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)',\n          '&:hover': {\n            backgroundColor: '#ff5278',\n          },\n        },\n      },\n      button: {\n        '&:hover': {\n          backgroundColor: '#ff5278',\n        },\n      },\n    },\n\n    MuiOutlinedInput: {\n      notchedOutline: {\n        borderColor: '#ff5278',\n      },\n    },\n    MuiAppBar: {\n      colorPrimary: { backgroundColor: '#18191a', color: '#FFF' },\n    },\n    MuiDivider: {\n      root: {\n        backgroundColor: '#FFF',\n        opacity: 0.1,\n      },\n    },\n    MuiCard: {\n      root: {\n        boxShadow:\n          '12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)',\n      },\n    },\n    MuiButton: {\n      root: {\n        boxShadow:\n          '12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)',\n        '&:hover': {\n          boxShadow: '12px 12px 16px 0  #000,-2px -2px 16px 0  #ff5278',\n        },\n        // width: \"100%\",\n      },\n    },\n  },\n})\n\nexport default theme\n","import React from \"react\";\nimport { NavLink as RouterLink } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport { Button, ListItem, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    item: {\n        display: \"flex\",\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n    button: {\n        color: theme.palette.text.main,\n        fontWeight: theme.typography.fontWeightMedium,\n        justifyContent: \"flex-start\",\n        letterSpacing: 0,\n        padding: \"10px 8px\",\n        textTransform: \"none\",\n        width: \"100%\",\n    },\n    icon: {\n        marginRight: theme.spacing(1),\n    },\n    title: {\n        marginRight: \"auto\",\n    },\n    active: {\n        color: theme.palette.text.secondary,\n        \"& $title\": {\n            fontWeight: theme.typography.fontWeightBold,\n        },\n        \"& $icon\": {\n            color: theme.palette.text.secondary,\n        },\n    },\n}));\n\nconst NavItem = ({ className, href, icon: Icon, title, ...rest }) => {\n    const classes = useStyles();\n\n    return (\n        <ListItem\n            className={clsx(classes.item, className)}\n            disableGutters\n            {...rest}\n        >\n            <Button\n                activeClassName={classes.active}\n                className={classes.button}\n                component={RouterLink}\n                to={href}\n            >\n                {Icon && <Icon className={classes.icon} size=\"20\" />}\n                <span className={classes.title}>{title}</span>\n            </Button>\n        </ListItem>\n    );\n};\n\nNavItem.propTypes = {\n    className: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.elementType,\n    title: PropTypes.string,\n};\n\nexport default NavItem;\n","import PropTypes from 'prop-types'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport FormatShapesIcon from '@material-ui/icons/FormatShapes'\nimport {\n  Box,\n  Drawer,\n  Fab,\n  List,\n  Typography,\n  makeStyles,\n  Card,\n  CardContent,\n} from '@material-ui/core'\nimport { BarChart as BarChartIcon, Map as MapIcon } from 'react-feather'\nimport NavItem from './NavItem'\n\nconst items = [\n  {\n    href: '/',\n    icon: MapIcon,\n    title: 'CityScopeJS',\n  },\n  {\n    href: '/editor',\n    icon: BarChartIcon,\n    title: 'Grid Editor',\n  },\n  {\n    href: '/projection',\n    icon: FormatShapesIcon,\n    title: 'Projection Mapping',\n  },\n]\n\nconst useStyles = makeStyles(() => ({\n  mobileDrawer: {\n    width: '30vw',\n    top: 48,\n    height: 'calc(100% - 48px)',\n    boxShadow: '22px 22px 22px 0 rgba(0,0,0)',\n  },\n}))\n\nconst NavBar = ({ openNavDrawer, onMobileNavOpen }) => {\n  const classes = useStyles()\n\n  const content = (\n    <Box height=\"100%\" display=\"flex\" flexDirection=\"column\" p={3}>\n      <List>\n        {items.map((item) => (\n          <NavItem\n            style={{ padding: '2vh' }}\n            href={item.href}\n            key={item.title}\n            title={item.title}\n            icon={item.icon}\n            onClick={onMobileNavOpen}\n          />\n        ))}\n      </List>\n\n      <Box flexGrow={1} />\n      <Card elevation={5} p={2}>\n        <CardContent position={'bottom'}>\n          <Fab\n            href=\"http://github.com/CityScope/CS_cityscopeJS/\"\n            color=\"default\"\n            size=\"small\"\n          >\n            <GitHubIcon />\n          </Fab>\n          <Box p={2} />\n          <Typography align=\"left\" variant=\"h5\">\n            MIT CityScope\n          </Typography>\n          <Typography align=\"left\" variant=\"caption\">\n            {new Date().getFullYear()}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Box>\n  )\n\n  return (\n    <>\n      <Drawer\n        anchor=\"left\"\n        classes={{ paper: classes.mobileDrawer }}\n        open={openNavDrawer}\n        elevation={10}\n        variant=\"persistent\"\n      >\n        {content}\n      </Drawer>\n    </>\n  )\n}\n\nNavBar.propTypes = {\n  onMobileNavOpen: PropTypes.func,\n  openNavDrawer: PropTypes.bool,\n}\n\nNavBar.defaultProps = {\n  onMobileClose: () => {},\n  openNavDrawer: false,\n}\n\nexport default NavBar\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\n\nimport {\n    AppBar,\n    IconButton,\n    Toolbar,\n    Typography,\n    makeStyles,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles(() => ({\n    root: {},\n}));\n\nconst TopBar = ({ className, onMobileNavOpen, ...rest }) => {\n    const classes = useStyles();\n\n    return (\n        <AppBar\n            className={clsx(classes.root, className)}\n            elevation={5}\n            {...rest}\n        >\n            <Toolbar variant=\"dense\">\n                <IconButton color=\"inherit\" onClick={onMobileNavOpen}>\n                    <MenuIcon />\n                </IconButton>\n                <RouterLink to=\"/\">\n                    <Typography\n                        className={classes.name}\n                        color=\"textPrimary\"\n                        variant=\"h5\"\n                    >\n                        MIT CityScope\n                    </Typography>\n                </RouterLink>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nTopBar.propTypes = {\n    className: PropTypes.string,\n    onMobileNavOpen: PropTypes.func,\n};\n\nexport default TopBar;\n","import React, { useState } from 'react'\nimport { Outlet } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core'\nimport NavBar from './NavBar'\nimport TopBar from './TopBar'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background,\n    display: 'flex',\n    height: '100%',\n    overflow: 'hidden',\n    width: '100%',\n  },\n\n  content: {\n    paddingTop: 48,\n    flex: '1 1 auto',\n    height: '100vh',\n    overflow: 'auto',\n  },\n}))\n\nconst MainLayout = () => {\n  const classes = useStyles()\n  const [navMenuState, setNavMenuState] = useState(true)\n\n  return (\n    <div className={classes.root}>\n      <NavBar\n        openNavDrawer={!navMenuState}\n        onMobileNavOpen={() => setNavMenuState(!navMenuState)}\n      />\n      <TopBar onMobileNavOpen={() => setNavMenuState(!navMenuState)} />\n      <div className={classes.content}>\n        <Outlet />\n      </div>\n    </div>\n  )\n}\n\nexport default MainLayout\n","import React, { forwardRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport PropTypes from \"prop-types\";\n\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\n    return (\n        <div ref={ref} {...rest}>\n            <Helmet>\n                <title>\n                    CityScopeJS {\">\"} {title}\n                </title>\n            </Helmet>\n            {children}\n        </div>\n    );\n});\n\nPage.propTypes = {\n    children: PropTypes.node.isRequired,\n    title: PropTypes.string,\n};\n\nexport default Page;\n","import React from \"react\";\nimport { Box, Container, Typography, makeStyles } from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background,\n    height: \"100%\",\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n  image: {\n    marginTop: 50,\n    display: \"inline-block\",\n    maxWidth: \"100%\",\n    width: 560,\n  },\n}));\n\nconst NotFoundView = () => {\n  const classes = useStyles();\n\n  return (\n    <Page className={classes.root} title=\"404\">\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Container maxWidth=\"md\">\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h1\">\n            404\n          </Typography>\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h5\">\n            The page you are looking for isn’t here\n          </Typography>\n        </Container>\n      </Box>\n    </Page>\n  );\n};\n\nexport default NotFoundView;\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport default function SelectionTarget(props) {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n    const selectedType = props.selectedType;\n    const divSize = props.divSize;\n\n    const colorTrans =\n        \"rgba(\" +\n        selectedType.color[0] +\n        \",\" +\n        selectedType.color[1] +\n        \",\" +\n        selectedType.color[2] +\n        \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: selectedType.color,\n                color: selectedType.color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\",\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n}\n","/**\n * CSjs ACTIONS\n */\nexport const GET_CITYIO_DATA = 'GET_CITYIO_DATA'\nexport function getCityioData(data) {\n  return { type: GET_CITYIO_DATA, data }\n}\n\nexport const LISTEN_TO_MAP_EVENTS = 'LISTEN_TO_MAP_EVENTS'\nexport function listenToMapEvents(data) {\n  return { type: LISTEN_TO_MAP_EVENTS, data }\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = 'LISTEN_TO_ABM_SLIDERS'\nexport function listenToSlidersEvents(data) {\n  return { type: LISTEN_TO_ABM_SLIDERS, data }\n}\n\nexport const LISTEN_TO_ABM_MODE = 'LISTEN_TO_ABM_MODE'\nexport function listenToABMmode(data) {\n  return { type: LISTEN_TO_ABM_MODE, data }\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = 'LISTEN_TO_ACCESS_TOGGLE'\nexport function listenToAccessToggle(data) {\n  return { type: LISTEN_TO_ACCESS_TOGGLE, data }\n}\n\nexport const MENU_INTERACTION = 'MENU_INTERACTION'\nexport function listenToMenuUI(data) {\n  return { type: MENU_INTERACTION, data }\n}\n\nexport const LISTEN_TO_EDIT_MENU = 'LISTEN_TO_EDIT_MENU'\nexport function listenToEditMenu(data) {\n  return { type: LISTEN_TO_EDIT_MENU, data }\n}\n\nexport const SET_READY_STATE = 'SET_READY_STATE'\nexport function setReadyState(data) {\n  return { type: SET_READY_STATE, data }\n}\n\nexport const SET_LOADING_STATE = 'SET_LOADING_STATE'\nexport function setLoadingState(data) {\n  return { type: SET_LOADING_STATE, data }\n}\n\nexport const SET_SCENARIO_NAMES = 'SET_SCENARIO_NAMES'\nexport function setScenarioNames(data) {\n  return { type: SET_SCENARIO_NAMES, data }\n}\n\nexport const ADD_LOADING_MODULES = 'ADD_LOADING_MODULES'\nexport function addLoadingModules(data) {\n  return { type: ADD_LOADING_MODULES, data }\n}\n\nexport const REMOVE_LOADING_MODULES = 'REMOVE_LOADING_MODULES'\nexport function removeLoadingModules(data) {\n  return { type: REMOVE_LOADING_MODULES, data }\n}\n\n/**\n * PROJECTION MAPPING Actions\n */\n\nexport const SET_UI_WEBSOCKET_DATA = 'SET_UI_WEBSOCKET_DATA'\nexport function setUIWebsocketData(data) {\n  return { type: SET_UI_WEBSOCKET_DATA, data }\n}\n\nexport const SET_UI_WEBSOCKET_READY = 'SET_UI_WEBSOCKET_READY'\nexport function setUIWebsocketReady(data) {\n  return { type: SET_UI_WEBSOCKET_READY, data }\n}\n\n/**\n * Editor Actions\n */\n\nexport const LISTEN_TO_GRID_CREATOR = 'LISTEN_TO_GRID_CREATOR'\nexport function listenToGridCreator(data) {\n  return { type: LISTEN_TO_GRID_CREATOR, data }\n}\n\nexport const LISTEN_TO_ROW_EDIT = 'LISTEN_TO_ROW_EDIT'\nexport function listenToRowEdits(data) {\n  return { type: LISTEN_TO_ROW_EDIT, data }\n}\n\nexport const LISTEN_TO_TYPES_LIST = 'LISTEN_TO_TYPES_LIST'\nexport function listeonToTypesList(data) {\n  return { type: LISTEN_TO_TYPES_LIST, data }\n}\n\nexport const LISTEN_TO_BASE_MAP_CENTER = 'LISTEN_TO_BASE_MAP_CENTER'\nexport function listenToBaseMapCenter(data) {\n  return { type: LISTEN_TO_BASE_MAP_CENTER, data }\n}\n","import React, { Component } from \"react\";\nimport EditorBrush from \"./EditorBrush\";\nimport { connect } from \"react-redux\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport settings from \"../../../settings/GridEditorSettings.json\";\nimport { listenToBaseMapCenter } from \"../../../redux/actions\";\n\nexport const _hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n};\n\nclass BaseMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 12),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n    }\n\n    _toggleOrthoView = (viewState) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n    };\n\n    _onViewStateChange = ({ viewState }) => {\n        this.setState({ viewState });\n    };\n\n    componentDidUpdate = (prevProps) => {\n        if (this.props.mapCenter !== prevProps.mapCenter)\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    latitude: this.props.mapCenter.latCenter,\n                    longitude: this.props.mapCenter.lonCenter,\n                    pitch: 0,\n                    bearing: 0,\n                    orthographic: false,\n                },\n            });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                latitude: settings.GEOGRID.properties.header.latitude,\n                longitude: settings.GEOGRID.properties.header.longitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 0,\n                orthographic: true,\n            },\n        });\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        if (!this.props.selectedType) return;\n        const { height, name, color, interactive } = this.props.selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n\n        multiSelectedObj.forEach((selected) => {\n            let thisCellProps = selected.object.properties;\n            thisCellProps.color = _hexToRgb(color);\n            thisCellProps.height = parseInt(height);\n            thisCellProps.name = name;\n            if (interactive !== \"No\") {\n                thisCellProps.interactive = interactive;\n            } else {\n                delete thisCellProps.interactive;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        return (\n            this.props.selectedType && (\n                <EditorBrush\n                    mousePos={this.state.mousePos}\n                    selectedType={this.props.selectedType}\n                    divSize={this.state.pickingRadius}\n                    mouseDown={this.state.mouseDown}\n                />\n            )\n        );\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        let layers = [];\n        layers.push(\n            new GeoJsonLayer({\n                id: \"GRID\",\n                opacity: 0.5,\n                stroked: false,\n                filled: true,\n                wireframe: true,\n                data: this.props.createdGrid,\n                visible: true,\n                pickable: true,\n                extruded: true,\n                lineWidthScale: 1,\n                lineWidthMinPixels: 1,\n                getElevation: (d) => d.properties.height,\n                getFillColor: (d) => d.properties.color,\n\n                onClick: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n\n                onDrag: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n                onDragStart: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    ) {\n                        this.setState({ draggingWhileEditing: true });\n                    }\n                },\n                onDragEnd: () => {\n                    this.setState({ draggingWhileEditing: false });\n                },\n                updateTriggers: {\n                    getFillColor: this.state.selectedCellsState,\n                    getElevation: this.state.selectedCellsState,\n                },\n                transitions: {\n                    getFillColor: 500,\n                    getElevation: 500,\n                },\n            })\n        );\n\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {this._renderSelectionTarget()}\n\n                <DeckGL\n                    // sets the cursor on paint\n                    // getCursor={() => \"none\"}\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.sat}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    listenToBaseMapCenter: listenToBaseMapCenter,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedType: state.ROW_EDIT,\n        mapCenter: state.BASE_MAP_CENTER,\n        createdGrid: state.GRID_CREATED,\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap);\n","import EditorMap from \"./EditorMap/EditorMap\";\nimport EditorMenu from \"./EditorMenu\";\nimport {\n    makeStyles,\n    Grid,\n    Card,\n    CardContent,\n    Container,\n} from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: \"auto\",\n        height: \"100%\",\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n}));\n\nexport default function GridEditor() {\n    const classes = useStyles();\n\n    return (\n        <Page className={classes.root} title=\"Editor\">\n            <Container maxWidth={false}>\n                <>\n                    <Grid container spacing={5}>\n                        <Grid item xs={12} l={6} md={6} xl={4}>\n                            <Card\n                                elevation={15}\n                                style={{\n                                    maxHeight: \"85vh\",\n                                    overflow: \"auto\",\n                                }}\n                            >\n                                <CardContent>\n                                    <EditorMenu />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        <Grid item xs={12} l={6} md={6} xl={8}>\n                            <Card\n                                elevation={15}\n                                style={{\n                                    height: \"85vh\",\n                                    width: \"100%\",\n                                    position: \"relative\",\n                                }}\n                            >\n                                <CardContent>\n                                    <EditorMap />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </>\n            </Container>\n        </Page>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/legoio.148c5ab6.png\";","import {\n  Container,\n  Divider,\n  Typography,\n  makeStyles,\n  Card,\n  CardContent,\n  Box,\n  Link,\n} from '@material-ui/core'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport GetGITdate from './GetGITdate'\n\nconst useStyles = makeStyles((theme) => ({\n  divider: {\n    margin: theme.spacing(2),\n  },\n}))\nexport default function SplashScreen() {\n  const classes = useStyles()\n\n  return (\n    <Container>\n      <Card elevation={15}>\n        <CardContent position={'bottom'}>\n          <Typography color=\"textPrimary\" variant=\"h1\">\n            MIT CityScope\n          </Typography>\n\n          <Divider className={classes.divider} light />\n\n          <Typography color=\"textPrimary\" variant=\"h4\">\n            MIT CityScope is an open-source urban modeling and simulation\n            platform. CityScope allows users to examine different design\n            alternatives, and observe their impact through multiple layers of\n            urban analytics modules, such as traffic models, ABM simulation,\n            urban access, economy, storm-water, noise and more.\n          </Typography>\n        </CardContent>\n      </Card>\n\n      <Divider className={classes.divider} light />\n\n      <Card elevation={15}>\n        <CardContent position={'bottom'}>\n          <Typography color=\"textPrimary\" gutterBottom>\n            MIT CityScopeJS open-source project is developed by MIT, the City\n            Science Network, and contributers from all over the world.\n          </Typography>\n\n          <Typography>\n            <Link\n              color={'secondary'}\n              href={'https://github.com/CityScope'}\n              target={'blank'}\n            >\n              <GitHubIcon fontSize={'small'} /> Join the CityScope open-source\n              development\n            </Link>\n          </Typography>\n        </CardContent>\n      </Card>\n\n      <Divider className={classes.divider} light />\n\n      <Card elevation={15}>\n        <CardContent position={'bottom'}>\n          <Typography color=\"textPrimary\" gutterBottom>\n            Map view is provided via CityIO, CityScope server.\n          </Typography>\n          <Typography>\n            <Link\n              color={'secondary'}\n              href={'https://github.com/CityScope/CS_CityIO'}\n              target={'blank'}\n            >\n              <GitHubIcon fontSize={'small'} />{' '}\n              https://github.com/CityScope/CS_CityIO\n            </Link>\n          </Typography>\n        </CardContent>\n      </Card>\n\n      <Divider className={classes.divider} light />\n\n      <Card elevation={15}>\n        <CardContent position={'bottom'}>\n          <GetGITdate />\n        </CardContent>\n      </Card>\n    </Container>\n  )\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    SCENARIO_NAMES: [],\n    MAP: {},\n    LOADING_MODULES: [],\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.currentSimHour,\n            settings.map.layers.ABM.endSimHour,\n        ],\n        speed: settings.map.layers.ABM.animationSpeed,\n    },\n    ABM_MODE: \"mode\",\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: null,\n    READY: false,\n    LOADING: false,\n\n    /**\n     * ! EDITOR INIT STATE\n     */\n\n    ROW_EDIT: null,\n    BASE_MAP_CENTER: {\n        latCenter: null,\n        lonCenter: null,\n    },\n    TYPES_LIST: null,\n    GRID_CREATED: null,\n};\n\nexport default initialState;\n","import {\n  GET_CITYIO_DATA,\n  MENU_INTERACTION,\n  LISTEN_TO_MAP_EVENTS,\n  LISTEN_TO_ABM_SLIDERS,\n  LISTEN_TO_EDIT_MENU,\n  SET_READY_STATE,\n  SET_LOADING_STATE,\n  SET_SCENARIO_NAMES,\n  LISTEN_TO_ACCESS_TOGGLE,\n  LISTEN_TO_ROW_EDIT,\n  LISTEN_TO_TYPES_LIST,\n  LISTEN_TO_GRID_CREATOR,\n  LISTEN_TO_BASE_MAP_CENTER,\n  LISTEN_TO_ABM_MODE,\n  ADD_LOADING_MODULES,\n  REMOVE_LOADING_MODULES,\n  SET_UI_WEBSOCKET_DATA,\n  SET_UI_WEBSOCKET_READY,\n} from './actions'\nimport initialState from './initialState'\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_CITYIO_DATA:\n      return { ...state, CITYIO: action.data }\n    case MENU_INTERACTION:\n      return { ...state, MENU: action.data }\n    case LISTEN_TO_MAP_EVENTS:\n      return { ...state, MAP: action.data }\n    case LISTEN_TO_ABM_SLIDERS:\n      return { ...state, SLIDERS: action.data }\n    case LISTEN_TO_ABM_MODE:\n      return { ...state, ABM_MODE: action.data }\n    case LISTEN_TO_ACCESS_TOGGLE:\n      return { ...state, ACCESS_TOGGLE: action.data }\n    case LISTEN_TO_EDIT_MENU:\n      return { ...state, SELECTED_TYPE: action.data }\n    case SET_READY_STATE:\n      return { ...state, READY: action.data }\n    case SET_LOADING_STATE:\n      return { ...state, LOADING: action.data }\n    case SET_SCENARIO_NAMES:\n      return { ...state, SCENARIO_NAMES: action.data }\n    case ADD_LOADING_MODULES:\n      return {\n        ...state,\n        LOADING_MODULES: [\n          ...new Set([...state.LOADING_MODULES, ...action.data]),\n        ],\n      }\n    case REMOVE_LOADING_MODULES:\n      return {\n        ...state,\n        LOADING_MODULES: state.LOADING_MODULES.filter(\n          (x) => !action.data.includes(x),\n        ),\n      }\n\n    /**\n     * PROJECTION MAPPING Actions\n     */\n    case SET_UI_WEBSOCKET_DATA:\n      return { ...state, UI_WEBSOCKET_DATA: action.data }\n\n    case SET_UI_WEBSOCKET_READY:\n      return { ...state, UI_WEBSOCKET_READY: action.data }\n\n    /**\n     * Editor Actions\n     */\n\n    case LISTEN_TO_ROW_EDIT:\n      return { ...state, ROW_EDIT: action.data }\n\n    case LISTEN_TO_TYPES_LIST:\n      return { ...state, TYPES_LIST: action.data }\n\n    case LISTEN_TO_GRID_CREATOR:\n      return { ...state, GRID_CREATED: action.data }\n\n    case LISTEN_TO_BASE_MAP_CENTER:\n      return { ...state, BASE_MAP_CENTER: action.data }\n\n    default:\n      return state\n  }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nconst store = configureStore();\n\nexport default store;\n","import axios from \"axios\";\nimport { addLoadingModules } from \"../redux/actions\";\nimport store from \"../redux/store\";\nimport settings from \"../settings/settings.json\";\nimport { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\n\n/**\n * conver rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n    function valToHex(c) {\n        var hex = c.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n    return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n/**\n * conver hex to rgb array\n */\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n    let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n    return isHex;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n    // get the static grid\n    const GEOGRID = cityioData.GEOGRID;\n    // if GEOGRRIDDATA exist and is the same length as our grid\n    if (\n        cityioData.GEOGRIDDATA &&\n        cityioData.GEOGRIDDATA.length === cityioData.GEOGRID.features.length\n    ) {\n        // get the grid data\n        const GEOGRIDDATA = cityioData.GEOGRIDDATA;\n        // update GEOGRID features from GEOGRIDDATA on cityio\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n            // inject id\n            GEOGRID.features[i].properties.id = i;\n        }\n    }\n    const newGrid = JSON.parse(JSON.stringify(GEOGRID));\n    return newGrid;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (data) => {\n    const accessData = data.access;\n    // get colors from settings\n    let coordinates = accessData.features.map((d) => d.geometry.coordinates);\n    let values = accessData.features.map((d) => d.properties);\n    let heatmap = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        heatmap.push({\n            coordinates: coordinates[i],\n            values: values[i],\n        });\n    }\n    return heatmap;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n    const expectUpdateModules = new Set(\n        settings.cityIO.cityIOmodules\n            .filter((val) => val.expectUpdate)\n            .map((val) => val.name)\n    );\n    const cityIOKeys = new Set(Object.keys(store.getState().CITYIO));\n\n    const loadingModules = [...cityIOKeys].filter((i) =>\n        expectUpdateModules.has(i)\n    );\n\n    let postURL =\n        \"https://cityio.media.mit.edu/api/table/update/\" + tableName + endPoint;\n\n    const options = {\n        method: \"post\",\n        url: postURL,\n        data: data,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options)\n        .then((res) => {\n            if (res.data.status === \"ok\") {\n                store.dispatch(addLoadingModules(loadingModules));\n            }\n        })\n        .catch((error) => {\n            console.log(\"ERROR:\", error);\n        });\n};\n\n// /**\n//  * Description. uses deck api to\n//  * collect objects in a region\n//  * @argument{object} e  picking event\n//  */\nexport const _multipleObjPicked = (e, pickingRadius, deckGLRef) => {\n    const dim = pickingRadius;\n    const x = e.x - dim / 2;\n    const y = e.y - dim / 2;\n    let multipleObj = deckGLRef.current.pickObjects({\n        x: x,\n        y: y,\n        width: dim,\n        height: dim,\n    });\n    return multipleObj;\n};\n\n// /**\n//  * Description. allow only to pick cells that are\n//  *  not of CityScope TUI & that are interactable\n//  * so to not overlap TUI activity\n//  */\nexport const _handleGridcellEditing = (\n    e,\n    selectedType,\n    setSelectedCellsState,\n    pickingRadius,\n    deckGLRef\n) => {\n    const { height, color, name } = selectedType;\n    const multiSelectedObj = _multipleObjPicked(e, pickingRadius, deckGLRef);\n    multiSelectedObj.forEach((selected) => {\n        const thisCellProps = selected.object.properties;\n        if (thisCellProps && thisCellProps.interactive) {\n            thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n            thisCellProps.height = height;\n            thisCellProps.name = name;\n        }\n    });\n    setSelectedCellsState(multiSelectedObj);\n};\n\nvar currentDateMidnight = new Date();\n// set initial midnight to GMT 0\ncurrentDateMidnight.setHours(0, 0, 0, 0);\n\nexport const _setupSunEffects = (effectsRef, tableHeader) => {\n    // get time zone from the tz value if exist\n    if (tableHeader.tz) {\n        currentDateMidnight.setHours(tableHeader.tz, 0, 0, 0);\n    }\n    const ambientLight = new AmbientLight({\n        color: [255, 255, 255],\n        intensity: 0.85,\n    });\n    const dirLight = new _SunLight({\n        timestamp: 0,\n        color: [255, 255, 255],\n        intensity: 1.0,\n        _shadow: true,\n    });\n    const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n    lightingEffect.shadowColor = [0, 0, 0, 0.5];\n    effectsRef.current = [lightingEffect];\n};\n\nexport const updateSunDirection = (time, effectsRef) => {\n\n    \n    const thisLocationTime = currentDateMidnight.getTime() + time * 1000;\n    var date = new Date(thisLocationTime);\n\n    effectsRef.current[0].directionalLights[0].timestamp = Date.UTC(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDay(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds()\n    );\n};\n","import React, { useState } from \"react\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function TypeInfo(props) {\n    const COLOR_SCALE = [\"#85C4C8\", \"#C22E00\", \"#1E96BE\", \"#EC9370\", \"#F6D18A\"];\n\n    const radialRadius = 50;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    // method to create data for radial chart\n    const careateData = () => {\n        // array for data\n        let data = [];\n        // check type info: if string, parse, else object\n        let info = props.typeInfo;\n        // get the type data\n        info.forEach((attr, index) => {\n            data.push({\n                angle: attr.proportion,\n                label: JSON.stringify(attr.use),\n                color: COLOR_SCALE[index],\n            });\n        });\n\n        return data;\n    };\n\n    const data = careateData();\n\n    /*\n    const boxStyle = { height: \"10px\", width: \"10px\" };\n\n    function buildValue(hoveredCell) {\n        const { radius, angle, angle0 } = hoveredCell;\n        const truedAngle = (angle + angle0) / 2;\n        return {\n            x: radius * Math.cos(truedAngle),\n            y: radius * Math.sin(truedAngle),\n        };\n    }\n    */\n\n    return (\n        <>\n            <RadialChart\n                colorType=\"literal\"\n                animation={true}\n                className={\"donut-chart-example\"}\n                innerRadius={radialRadius / 2 - radialRadius / 5}\n                radius={radialRadius / 2}\n                getLabel={(d) => d.label}\n                showLabels={false}\n                getAngle={(d) => d.angle}\n                data={data}\n                onValueMouseOver={(evt) => {\n                    setHoveredRadial(evt);\n                }}\n                onSeriesMouseOut={() => setHoveredRadial(false)}\n                width={radialRadius}\n                height={radialRadius}\n                padAngle={0.1}\n            >\n                {hoveredRadial !== false && (\n                    <Hint value={hoveredRadial}>\n                        <div\n                            style={{\n                                background: \"rgba(0,0,0,0.8)\",\n                                fontSize: 10,\n                            }}\n                        >\n                            <Typography variant={\"caption\"} gutterBottom>\n                                {hoveredRadial.label}\n                            </Typography>\n                        </div>\n                    </Hint>\n                )}\n            </RadialChart>\n        </>\n    );\n}\n","import React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport {\n    Collapse,\n    Typography,\n    CardContent,\n    Box,\n    Avatar,\n    ListItemAvatar,\n    ListItem,\n    ListItemText,\n    Grid,\n    Card,\n} from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { listenToEditMenu } from \"../../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport { testHex, hexToRgb } from \"../../../../utils/utils\";\nimport TypeInfo from \"./TypeInfo\";\n\nfunction EditMenu(props) {\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    let selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const height = selectedType ? selectedType.height : null;\n\n    const marks = [\n        { value: 0, label: \"min\" },\n        { value: 100, label: \"max\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    const parseTypeInfo = (typeInfo) => {\n        //! check type info: if string, parse, else object\n        let info =\n            typeof typeInfo == \"string\" ? JSON.parse(typeInfo) : typeInfo;\n        return info;\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type, index) => {\n            // get type description if exist\n            let description = LanduseTypesList[type].description\n                ? LanduseTypesList[type].description\n                : null;\n\n            let col = LanduseTypesList[type].color;\n            // get the LBCS/NAICS types info\n            let LBCS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].LBCS\n            );\n            let NAICS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].NAICS\n            );\n\n            if (testHex(col)) {\n                col = hexToRgb(col);\n            }\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n            let typeHasHeightProps = false;\n            if (LanduseTypesList[type].height) {\n                typeHasHeightProps = true;\n            }\n\n            iconsArr.push(\n                <div key={Math.random()}>\n                    <ListItem\n                        alignItems=\"flex-start\"\n                        button\n                        variant=\"raised\"\n                        selected={selected}\n                        onClick={(event) =>\n                            handleListItemClick(\n                                event,\n                                type,\n                                LanduseTypesList[type]\n                            )\n                        }\n                    >\n                        <ListItemAvatar>\n                            <Avatar\n                                style={{\n                                    backgroundColor: rgbCol,\n                                    color: \"black\",\n                                }}\n                            >\n                                {type.charAt(0)}\n                            </Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText primary={type} />\n                    </ListItem>\n\n                    <Collapse in={selected}>\n                        <Box spacing={1} p={1} m={1}>\n                            <Card elevation={15}>\n                                <CardContent>\n                                    <Typography variant=\"h5\">\n                                        Type Information\n                                    </Typography>\n\n                                    {description && (\n                                        <Typography variant=\"caption\">\n                                            {description}\n                                        </Typography>\n                                    )}\n                                    <Box spacing={1} p={1} m={1} />\n                                    <Grid container spacing={3}>\n                                        <Grid\n                                            item\n                                            xs={6}\n                                            l={6}\n                                            md={6}\n                                            xl={6}\n                                            container\n                                        >\n                                            {LBCS && (\n                                                <>\n                                                    <Typography variant=\"caption\">\n                                                        LBCS\n                                                    </Typography>\n\n                                                    <TypeInfo typeInfo={LBCS} />\n                                                </>\n                                            )}\n                                        </Grid>\n                                        <Grid\n                                            item\n                                            xs={6}\n                                            l={6}\n                                            md={6}\n                                            xl={6}\n                                            container\n                                        >\n                                            {NAICS && (\n                                                <>\n                                                    <Typography variant=\"caption\">\n                                                        NAICS\n                                                    </Typography>\n                                                    <TypeInfo\n                                                        typeInfo={NAICS}\n                                                    />\n                                                </>\n                                            )}\n                                        </Grid>\n\n                                        {typeHasHeightProps && (\n                                            <>\n                                                <Grid\n                                                    item\n                                                    xs={10}\n                                                    l={10}\n                                                    md={10}\n                                                    xl={10}\n                                                    container\n                                                >\n                                                    <Typography gutterBottom>\n                                                        Set Height\n                                                    </Typography>\n\n                                                    <Slider\n                                                        value={height}\n                                                        valueLabelDisplay=\"auto\"\n                                                        onChange={(\n                                                            event,\n                                                            value\n                                                        ) =>\n                                                            dispatch(\n                                                                listenToEditMenu(\n                                                                    {\n                                                                        ...selectedType,\n                                                                        height: value,\n                                                                    }\n                                                                )\n                                                            )\n                                                        }\n                                                        getAriaLabel={(index) =>\n                                                            index.toString()\n                                                        }\n                                                        min={marks[0].value}\n                                                        max={marks[1].value}\n                                                        marks={marks}\n                                                    />\n                                                </Grid>\n                                            </>\n                                        )}\n                                    </Grid>\n                                </CardContent>\n                            </Card>\n                        </Box>\n                    </Collapse>\n\n                    <Divider />\n                </div>\n            );\n        });\n        return <List>{iconsArr}</List>;\n    };\n\n    return <>{createTypesIcons(props.cityioData.GEOGRID.properties.types)}</>;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import { Component } from \"react\";\n\nclass AnimationComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.animationFrame = null;\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    _animate() {\n        const {\n            toggles: { rotateOn, ABMOn },\n            state: { viewState, sliders },\n            updaters: { listenToSlidersEvents, sunEffects, setViewState },\n            dispatch,\n        } = this.props;\n        if (rotateOn) {\n            let bearing = viewState.bearing ? viewState.bearing : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            setViewState({\n                ...viewState,\n                bearing: bearing,\n            });\n        }\n\n        if (ABMOn) {\n            const time = sliders.time[1];\n            const speed = sliders.speed;\n            const startHour = sliders.time[0];\n            const endHour = sliders.time[2];\n\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n\n            dispatch(\n                listenToSlidersEvents({\n                    ...sliders,\n                    time: [sliders.time[0], t, sliders.time[2]],\n                })\n            );\n\n            // update sun position\n            if (sunEffects) {\n                sunEffects.updateSunDirection(t);\n            }\n        }\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default AnimationComponent;\n","import MenuContainer from './MenuContainer'\nimport MapContainer from './DeckglMap'\nimport LoadingSpinner from './CityIO/LoadingSpinner'\nimport VisContainer from './VisContainer'\nimport {\n  makeStyles,\n  Grid,\n  Card,\n  CardContent,\n  Container,\n} from '@material-ui/core'\nimport Page from '../../layouts/Page'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 'auto',\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n}))\n\nexport default function CSjsMain(props) {\n  const classes = useStyles()\n  const tableName = props.tableName\n  const cityIOdata = props.cityIOdata\n\n  return (\n    <Page className={classes.root} title=\"CitySCopeJS\">\n      <LoadingSpinner />\n      <Container maxWidth={null}>\n        <Grid container spacing={5}>\n          <Grid item xs={6} l={3} md={3} xl={2} container>\n            <Grid item container direction=\"column\" spacing={2}>\n              <Grid item xs={12} l={12} md={12} xl={12}>\n                <Card\n                  elevation={15}\n                  style={{\n                    maxHeight: '85vh',\n                    overflow: 'auto',\n                  }}\n                >\n                  <CardContent>\n                    <MenuContainer tableName={tableName} />\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={6} l={6} md={6} xl={8}>\n            <Card\n              elevation={15}\n              style={{\n                height: '85vh',\n                width: '100%',\n                position: 'relative',\n              }}\n            >\n              <MapContainer />\n            </Card>\n          </Grid>\n          <Grid item xs={6} l={3} md={3} xl={2}>\n            <Card\n              elevation={15}\n              style={{\n                maxHeight: '85vh',\n                overflow: 'auto',\n              }}\n            >\n              <VisContainer cityIOdata={cityIOdata} />\n            </Card>\n          </Grid>\n        </Grid>\n      </Container>\n    </Page>\n  )\n}\n","import { Matrix3d, RectPoints, Vector } from \"./Keystoner\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1,\n    ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./Keystoner\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 20;\nconst halfAnchor = anchorSize / 1.5;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"1px solid white\",\n        cursor: \"move\",\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor,\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor,\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor,\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor,\n    },\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {},\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={(evt) => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation),\n        }}\n    />\n);\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport default class Keystoner extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n\n      if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }  \n\n\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n\n            console.log(\"saving edited projMap...\", JSON.stringify(prevState));\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n      \n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n\n\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <>\n              \n         \n\n                <div\n          \n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </>\n        );\n    }\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        bottom: \"1vh\",\n        zIndex: 1001,\n        maxWidth: \"50vw\",\n    },\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport settings from '../settings/settings.json'\nimport { Button } from '@material-ui/core/'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}))\nexport default function TableNameInput({ setSelectedTable }) {\n  const classes = useStyles()\n  const [tableList, setTableList] = useState()\n\n  // https://stackoverflow.com/a/27098801/860099\n  function strToRemove(str, strToRemove) {\n    let start = str.indexOf(strToRemove)\n    return (\n      str.slice(0, start) + str.slice(start + strToRemove.length, str.length)\n    )\n  }\n\n  useEffect(() => {\n    /**\n     * Gets all tables on init\n     */\n    let buttonsArr = []\n    const cityIOlistURL = settings.cityIO.ListOfTables\n    const cityIOtableBaseUrl = settings.cityIO.baseURL\n\n    axios.get(cityIOlistURL).then((res) => {\n      res.data.forEach((urlStr) => {\n        const tableName = strToRemove(urlStr, cityIOtableBaseUrl)\n        buttonsArr.push(\n          <Button\n            key={Math.random()}\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={() => {\n              axios\n                .get(cityIOtableBaseUrl + tableName + '/GEOGRID')\n                .then((res) => {\n                  if (res.status === 200) {\n                    setSelectedTable(tableName)\n                  }\n                })\n                .catch((err) => {\n                  console.log(err)\n                })\n            }}\n          >\n            {tableName}\n          </Button>,\n        )\n      })\n      setTableList(buttonsArr)\n    })\n  }, [setSelectedTable])\n\n  return <div className={classes.root}>{tableList}</div>\n}\n","import React from 'react'\nimport { Box, Container, Typography, makeStyles } from '@material-ui/core'\nimport Page from '../../layouts/Page'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background,\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n  image: {\n    marginTop: 50,\n    display: 'inline-block',\n    maxWidth: '100%',\n    width: 560,\n  },\n}))\n\nconst WIPview = () => {\n  const classes = useStyles()\n\n  return (\n    <Page className={classes.root} title=\"404\">\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Container maxWidth=\"md\">\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h1\">\n            Maintenance...\n          </Typography>\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h5\">\n            CityScopeJS will return shortly!\n          </Typography>\n        </Container>\n      </Box>\n    </Page>\n  )\n}\n\nexport default WIPview\n","import { Navigate } from 'react-router-dom'\nimport MainLayout from './layouts/MainLayout'\nimport NotFoundView from './views/Errors/NotFoundView'\nimport GridEditor from './views/GridEditor'\nimport CityScopeJS from './views/CityScopeJS'\nimport ProjectionMapping from './views/ProjectionMapping'\nimport WIPview from './views/Errors/WIPview'\nconst routes = [\n  {\n    path: '/',\n    element: <MainLayout />,\n    children: [\n      // { path: '/', element: <CityScopeJS /> },\n      // { path: '/editor/', element: <GridEditor /> },\n      // { path: '/projection', element: <ProjectionMapping /> },\n      // { path: '/cityioviewer', element: <Navigate to=\"/\" /> },\n      // { path: '*', element: <Navigate to=\"/404\" /> },\n      { path: '/', element: <WIPview /> },\n      { path: '*', element: <WIPview /> },\n\n      { path: '404', element: <NotFoundView /> },\n    ],\n  },\n]\n\nexport default routes\n","import React from \"react\";\nimport { useRoutes } from \"react-router-dom\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport GlobalStyles from \"./theme/GlobalStyles\";\nimport theme from \"./theme\";\nimport routes from \"./routes\";\n\nconst App = () => {\n    const routing = useRoutes(routes);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyles />\n            {routing}\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport Provider from \"./redux/Provider\";\nimport store from \"./redux/store\";\n\n// ! basename={process.env.PUBLIC_URL}\n\nReactDOM.render(\n    <Provider store={store}>\n        {/* https://github.com/facebook/create-react-app/issues/1765 */}\n        <HashRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </HashRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}