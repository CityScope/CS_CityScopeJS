{"version":3,"sources":["theme/GlobalStyles.js","theme/typography.js","theme/index.js","layouts/MainLayout/NavBar/NavItem.js","layouts/MainLayout/NavBar/index.js","layouts/MainLayout/TopBar.js","layouts/MainLayout/index.js","layouts/Page.js","views/Errors/NotFoundView.js","views/GridEditor/EditorMap/EditorBrush.js","redux/actions.js","views/GridEditor/EditorMap/EditorMap.js","views/GridEditor/EditorMenu/TypesEditor/index.js","views/GridEditor/EditorMenu/GridProps/GridMaker/gridCreator.js","views/GridEditor/EditorMenu/GridProps/GridMaker/index.js","views/GridEditor/EditorMenu/GridProps/CommitGrid/index.js","views/GridEditor/EditorMenu/GridProps/CenterMapButton/CenterMapButton.js","views/GridEditor/EditorMenu/GridProps/index.js","views/GridEditor/EditorMenu/index.js","views/GridEditor/index.js","views/CityScopeJS/CityIO/utils.js","views/CityScopeJS/CityIO/cityIO.js","redux/initialState.js","redux/reducer.js","redux/store.js","utils/utils.js","views/CityScopeJS/MenuContainer/EditMenu/TypeInfo.js","views/CityScopeJS/MenuContainer/EditMenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/ABMLegend.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/styles.js","views/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/AccessSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/index.js","views/CityScopeJS/MenuContainer/SaveMenu/components/SaveAsScenario/index.js","views/CityScopeJS/MenuContainer/SaveMenu/components/ScenarioItems/index.js","views/CityScopeJS/MenuContainer/SaveMenu/index.js","views/CityScopeJS/MenuContainer/index.js","views/CityScopeJS/DeckglMap/components/PaintBrush/PaintBrush.js","views/CityScopeJS/DeckglMap/components/CellMeta.js","views/CityScopeJS/DeckglMap/components/PaintBrush/index.js","views/CityScopeJS/DeckglMap/components/AnimationComponent.js","views/CityScopeJS/DeckglMap/deckglLayers/AccessLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/AggregatedTripsLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/ABMLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GridLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/TextualLayer.js","views/CityScopeJS/DeckglMap/index.js","views/CityScopeJS/CityIO/LoadingSpinner/index.js","views/Errors/MissingTableInfo.js","views/CityScopeJS/VisContainer/Radar/index.js","views/CityScopeJS/VisContainer/BarChart/index.js","views/CityScopeJS/VisContainer/AreaCalc/index.js","views/CityScopeJS/VisContainer/index.js","Components/TableNameInput.js","views/CityScopeJS/index.js","views/SplashScreen/GetGITdate.js","views/SplashScreen/index.js","views/ProjectionMapping/CityIO/index.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/AccessLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/AggregatedTripsLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/ABMLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/GridLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/index.js","views/ProjectionMapping/Keystone/Components/util.ts","views/ProjectionMapping/Keystone/Components/anchor.tsx","views/ProjectionMapping/Keystone/Components/Keystoner.tsx","views/ProjectionMapping/Keystone/Components/deleteLocalStorage.js","views/ProjectionMapping/Keystone/index.js","views/ProjectionMapping/UIWebsocket/index.js","views/ProjectionMapping/index.js","routes.js","App.js","redux/Provider.js","index.js"],"names":["useStyles","makeStyles","createStyles","boxSizing","margin","padding","html","height","width","body","backgroundColor","a","textDecoration","GlobalStyles","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","h1","fontWeight","letterSpacing","h2","h3","h4","h5","h6","overline","theme","createMuiTheme","zIndex","appBar","palette","background","default","paper","dark","primary","main","light","secondary","text","colors","grey","shape","borderRadius","overrides","MuiListItem","root","boxShadow","button","MuiOutlinedInput","notchedOutline","borderColor","MuiAppBar","colorPrimary","color","MuiDivider","opacity","MuiCard","MuiButton","item","display","paddingTop","paddingBottom","justifyContent","textTransform","icon","marginRight","spacing","title","active","fontWeightBold","NavItem","className","href","Icon","rest","classes","ListItem","clsx","disableGutters","Button","activeClassName","component","RouterLink","to","size","items","HomeIcon","MapIcon","BarChartIcon","FormatShapesIcon","mobileDrawer","top","NavBar","onMobileClose","openMobile","location","useLocation","useEffect","pathname","content","Box","flexDirection","p","List","map","style","flexGrow","Card","elevation","CardContent","position","Fab","Typography","align","variant","Date","getFullYear","Drawer","anchor","onClose","open","defaultProps","TopBar","onMobileNavOpen","AppBar","Toolbar","IconButton","onClick","name","overflow","flex","MainLayout","useState","navMenuState","setNavMenuState","Page","forwardRef","ref","children","Helmet","image","marginTop","maxWidth","NotFoundView","Container","SelectionTarget","props","mousePos","selectedType","divSize","colorTrans","mouseX","clientX","mouseY","clientY","border","mouseDown","pointerEvents","left","GET_CITYIO_DATA","getCityioData","data","type","LISTEN_TO_MAP_EVENTS","LISTEN_TO_ABM_SLIDERS","listenToSlidersEvents","LISTEN_TO_ABM_MODE","LISTEN_TO_ACCESS_TOGGLE","MENU_INTERACTION","LISTEN_TO_EDIT_MENU","listenToEditMenu","SET_READY_STATE","setReadyState","SET_LOADING_STATE","setLoadingState","SET_SCENARIO_NAMES","setScenarioNames","ADD_LOADING_MODULES","addLoadingModules","REMOVE_LOADING_MODULES","removeLoadingModules","SET_UI_WEBSOCKET_DATA","SET_UI_WEBSOCKET_READY","LISTEN_TO_GRID_CREATOR","listenToGridCreator","LISTEN_TO_ROW_EDIT","listenToRowEdits","LISTEN_TO_TYPES_LIST","LISTEN_TO_BASE_MAP_CENTER","listenToBaseMapCenter","_hexToRgb","hex","result","exec","parseInt","BaseMap","_toggleOrthoView","viewState","orthographic","menu","includes","_onViewStateChange","setState","componentDidUpdate","prevProps","mapCenter","state","latitude","latCenter","longitude","lonCenter","pitch","bearing","_mulipleObjPicked","e","dim","pickingRadius","x","y","deckGL","pickObjects","_handleGridcellEditing","interactive","multiSelectedObj","forEach","selected","thisCellProps","object","properties","selectedCellsState","_renderSelectionTarget","_handleKeyUp","keyDownState","_handleKeyDown","nativeEvent","key","draggingWhileEditing","settings","initialViewState","dirLightSettings","timestamp","UTC","intensity","_shadow","this","_rightClickViewRotate","_setViewStateToTableHeader","GEOGRID","header","zoom","document","getElementById","addEventListener","evt","preventDefault","layers","push","GeoJsonLayer","id","stroked","filled","wireframe","createdGrid","visible","pickable","extruded","lineWidthScale","lineWidthMinPixels","getElevation","d","getFillColor","event","cellInfo","rightButton","onDrag","onDragStart","onDragEnd","updateTriggers","transitions","onKeyDown","onKeyUp","onMouseMove","onMouseUp","onMouseDown","deck","onViewStateChange","_renderLayers","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","reuseMaps","mapboxApiAccessToken","process","mapStyle","sat","preventStyleDiffing","Component","mapDispatchToProps","connect","ROW_EDIT","BASE_MAP_CENTER","GRID_CREATED","TypesEditor","React","columns","field","lookup","No","Web","TUI","LanduseTypesList","typesArray","Object","keys","description","LBCS","JSON","stringify","NAICS","createtypesArray","types","dispatch","useDispatch","selectedRow","setSelectedRow","rowColor","setRowColor","Grid","container","xs","s","m","l","xl","options","paging","search","selection","rowStyle","rowData","tableData","onRowClick","row","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","onRowUpdate","oldData","indexOf","onRowDelete","splice","deg_to_rad","deg","Math","PI","rad_to_deg","rad","randomProperty","obj","length","random","GridMaker","reduxState","useSelector","handleGridCreation","grid","gridProps","typesList","top_left_lon","parseFloat","top_left_lat","rotation","userPrj","projection","cell_size","cellSize","nrows","ncols","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","i","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","features","rndType","geojsonPolygon","geometry","coordinates","polygon_xy","polygon_ll","v","ll","gridCreator","TYPES_LIST","startIcon","makeGEOGRIDobject","struct","geoJsonFeatures","GEOGRID_object","newTypesList","oldType","parse","CommitGrid","reqResonse","setReqResonse","hasGrid","postGridToCityIO","GEOGRIDstruct","GEOGRIDDATA_object","element","makeGEOGRIDDATAobject","tableName","toLowerCase","requestsList","geoGridURL","geoGridDataURL","geoGridOptions","URL","DATA","method","url","headers","Accept","axios","then","response","cityscopeJSendpoint","status","Link","reqResonseUI","console","log","catch","error","dataStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","appendChild","click","remove","downloadObjectAsJson","CenterMapButton","GridProps","borderWidth","flexWrap","tz","formValues","setformValues","handleChangeForm","target","value","noValidate","autoComplete","TextField","InputProps","onChange","textField","label","defaultValue","inputProps","max","min","helperText","EditorMenu","GridEditor","md","maxHeight","EditorMap","getScenarioIndices","cityIO","baseURL","get","res","scenarioIndices","filter","str","replace","promises","getScenarioName","all","r","err","getAPICall","CityIO","hashId","setHashId","hashes","setHashes","cityioURL","cityioData","CITYIO","update","newHashId","interval","newHashes","loadingModules","pickedModules","cityIOmodules","module","modules","modulesData","reduce","k","timer","clearTimeout","getModules","listOfToggles","toggles","menuInitState","values","showOnInit","initialState","MENU","SCENARIO_NAMES","MAP","LOADING_MODULES","SLIDERS","time","ABM","startSimHour","currentSimHour","endSimHour","speed","animationSpeed","ABM_MODE","ACCESS_TOGGLE","SELECTED_TYPE","READY","LOADING","reducer","action","Set","UI_WEBSOCKET_DATA","UI_WEBSOCKET_READY","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","hexToRgb","testHex","hexString","test","_proccessGridData","GEOGRIDDATA","_proccessAccessData","accessData","access","heatmap","_postMapEditsToCityIO","endPoint","expectUpdateModules","val","expectUpdate","cityIOKeys","getState","has","setSelectedCellsState","deckGLRef","current","_multipleObjPicked","currentDateMidnight","setHours","_setupSunEffects","effectsRef","tableHeader","ambientLight","AmbientLight","dirLight","_SunLight","lightingEffect","LightingEffect","shadowColor","updateSunDirection","thisLocationTime","getTime","date","directionalLights","getMonth","getDay","getHours","getMinutes","getSeconds","TypeInfo","COLOR_SCALE","hoveredRadial","setHoveredRadial","typeInfo","attr","index","angle","proportion","use","careateData","colorType","animation","innerRadius","radialRadius","radius","getLabel","showLabels","getAngle","onValueMouseOver","onSeriesMouseOut","padAngle","gutterBottom","selectedIndex","setSelectedIndex","marks","parseTypeInfo","iconsArr","col","rgbCol","typeHasHeightProps","alignItems","typeProps","ListItemAvatar","Avatar","charAt","ListItemText","Collapse","in","Slider","valueLabelDisplay","getAriaLabel","toString","Divider","createTypesIcons","marginLeft","subtitle1","subtitle2","ABMLegend","tripsAttr","trips","tripsData","modes","mode","profiles","profile","tripTypeValue","string","legendData","prepareLegendData","ABMSubmenu","sliders","settripTypeValue","FormControl","RadioGroup","aria-label","FormControlLabel","control","Radio","newValue","aria-labelledby","ShadowSubmenu","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","c","startColor","endColor","startTitle","endTitle","ListItemSecondaryAction","Switch","edge","checked","TogglesMenu","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","thisToggle","displayName","ABM2","SaveAsScenario","setOpen","setName","toggleDrawer","handleClose","scenarioNames","postScenario","info","disabled","Dialog","DialogTitle","DialogContent","DialogContentText","autoFocus","fullWidth","DialogActions","newScenarioIndex","getScenarioIndex","ScenarioItems","scenario","getScenario","deleteScenario","SaveMenu","MenuContainer","updatedMenuState","PaintBrush","hoveredCells","isInteractiveCell","msg","CellMeta","hoveredObj","PaintBrushContainer","editOn","AnimationComponent","animationFrame","cancelAnimationFrame","_animate","rotateOn","ABMOn","updaters","sunEffects","setViewState","startHour","endHour","t","requestAnimationFrame","bind","AccessLayer","HeatmapLayer","colorRange","radiusPixels","threshold","getPosition","getWeight","AggregatedTripsLayer","ABMmode","PathLayer","getPath","noisePath","path","getColor","getWidth","ABMLayer","zoomLevel","TripsLayer","getTimestamps","timestamps","widthScale","rounded","trailLength","currentTime","GridLayer","setDraggingWhileEditing","setHoveredObj","onHover","TextualLayer","textLayerData","infoIteam","TextLayer","getText","getSize","getTextAnchor","getAlignmentBaseline","Map","setKeyDownState","setMousePos","setMouseDown","setAccess","textualData","setTextualData","setGEOGRID","setABM","loaded","setLoaded","useRef","shadowsOn","resetViewOn","textual","dataProps","layersKey","AGGREGATED_TRIPS","GRID","ACCESS","TEXTUAL","layerOrder","layer","effects","asyncRender","LoadingSpinner","bottom","right","LinearProgress","MissingTableInfo","mt","radarSize","Radar","radarData","setRadarData","indicators","f","domains","viz_type","ref_value","domain","createRadarData","polygons","fillOpacity","strokeWidth","axes","fill","labels","textAnchor","stroke","tickValues","Array","BarChart","barChartData","setBarChartData","hoveredNode","setHoveredNode","generateData","dataArr","alignContent","xType","stackBy","yDomain","tickLabelAngle","AreaCalc","areaData","setAreaData","geoGridData","calcAreaObj","gridCellData","typeName","hasOwnProperty","count","area","g","b","valToHex","rgbToHex","radialData","calcArea","labelsRadiusMultiplier","labelsStyle","font","textShadow","VisContainer","cityIOdata","TableNameInput","setSelectedTable","tableList","setTableList","buttonsArr","cityIOlistURL","ListOfTables","cityIOtableBaseUrl","urlStr","strToRemove","start","slice","CityScopeJS","selectedTable","setTableName","pre","cityscopePrjName","substring","isReady","direction","GetGITdate","author","branch","sha","link","gitMeta","setGitMeta","fetch","json","commit","gridCell","textAlign","divider","SplashScreen","PrjDeckGLMap","viewSettings","localStorage","getItem","vs","setItem","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","vectorToTransform","vector","halfAnchor","styles","cursor","AnchorComponent","translation","onMouseEnter","transform","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","Keystoner","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","onAnchorMouseUp","isEditMode","newVector","getBoundingClientRect","ls","removeEventListener","anchorStyle","anchorClassName","DeleteLocalStorage","justify","Keystone","editMode","setEditMode","removeItem","reload","UIWebsocket","socket","WebSocket","SOCKETS","onopen","send","onmessage","setUIWebsocketReady","setUIWebsocketData","isCityIOready","isSocketUIready","routes","App","routing","useRoutes","ThemeProvider","ProviderWrapper","ReactDOM","render","Provider","basename"],"mappings":"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","file":"static/js/main.369c08f5.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        \"@global\": {\n            \"*\": {\n                boxSizing: \"border-box\",\n                margin: 0,\n                padding: 0,\n            },\n            html: {\n                \"-webkit-font-smoothing\": \"antialiased\",\n                \"-moz-osx-font-smoothing\": \"grayscale\",\n                height: \"100%\",\n                width: \"100%\",\n            },\n            body: {\n                backgroundColor: \"#18191a\",\n                height: \"100%\",\n                width: \"100%\",\n            },\n            a: {\n                textDecoration: \"none\",\n            },\n            \"#root\": {\n                height: \"100%\",\n                width: \"100%\",\n            },\n        },\n    })\n);\n\nconst GlobalStyles = () => {\n    useStyles();\n\n    return null;\n};\n\nexport default GlobalStyles;\n","const typography = {\n    fontFamily: `\"Roboto Mono\", sans-serif`,\n    fontSize: 14,\n    fontWeightLight: 100,\n    fontWeightRegular: 500,\n    fontWeightMedium: 700,\n\n    h1: {\n        fontWeight: 700,\n        fontSize: 45,\n        letterSpacing: \"-1px\",\n    },\n    h2: {\n        fontWeight: 800,\n        fontSize: 29,\n        letterSpacing: \"-0.24px\",\n    },\n    h3: {\n        fontWeight: 700,\n        fontSize: 24,\n        letterSpacing: \"-0.06px\",\n    },\n    h4: {\n        fontWeight: 500,\n        fontSize: 20,\n        letterSpacing: \"-0.06px\",\n    },\n    h5: {\n        fontWeight: 500,\n        fontSize: 16,\n        letterSpacing: \"-0.05px\",\n    },\n    h6: {\n        fontWeight: 500,\n        fontSize: 14,\n        letterSpacing: \"-0.05px\",\n    },\n    overline: {\n        fontWeight: 500,\n    },\n};\n\nexport default typography;\n","import { createMuiTheme, colors } from \"@material-ui/core\";\nimport typography from \"./typography\";\n\nconst theme = createMuiTheme({\n    zIndex: {\n        appBar: 999,\n    },\n    palette: {\n        background: {\n            default: \"#ff5278\",\n            paper: \"#18191a\",\n            dark: \"#ff5278\",\n        },\n        primary: {\n            main: \"#FFF\",\n            light: \"#ff5278\",\n        },\n        secondary: {\n            main: \"#ff5278\",\n        },\n        text: {\n            primary: colors.grey[100],\n            secondary: \"#ff5278\",\n        },\n    },\n\n    typography,\n    shape: {\n        borderRadius: 20,\n    },\n\n    overrides: {\n        MuiListItem: {\n            root: {\n                \"&$selected\": {\n                    backgroundColor: \"#18191a\",\n                    boxShadow:\n                        \"12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)\",\n                    \"&:hover\": {\n                        backgroundColor: \"#ff5278\",\n                    },\n                },\n            },\n            button: {\n                \"&:hover\": {\n                    backgroundColor: \"#ff5278\",\n                },\n            },\n        },\n\n        MuiOutlinedInput: {\n            notchedOutline: {\n                borderColor: \"#ff5278\",\n            },\n        },\n        MuiAppBar: {\n            colorPrimary: { backgroundColor: \"#18191a\", color: \"#FFF\" },\n        },\n        MuiDivider: {\n            root: {\n                backgroundColor: \"#FFF\",\n                opacity: 0.1,\n            },\n        },\n        MuiCard: {\n            root: {\n                boxShadow:\n                    \"12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)\",\n            },\n        },\n        MuiButton: {\n            root: {\n                boxShadow:\n                    \"12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)\",\n                \"&:hover\": {\n                    boxShadow:\n                        \"12px 12px 16px 0  #000,-2px -2px 16px 0  #ff5278\",\n                },\n                // width: \"100%\",\n            },\n        },\n    },\n});\n\nexport default theme;\n","import React from \"react\";\nimport { NavLink as RouterLink } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport { Button, ListItem, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    item: {\n        display: \"flex\",\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n    button: {\n        color: theme.palette.text.main,\n        fontWeight: theme.typography.fontWeightMedium,\n        justifyContent: \"flex-start\",\n        letterSpacing: 0,\n        padding: \"10px 8px\",\n        textTransform: \"none\",\n        width: \"100%\",\n    },\n    icon: {\n        marginRight: theme.spacing(1),\n    },\n    title: {\n        marginRight: \"auto\",\n    },\n    active: {\n        color: theme.palette.text.secondary,\n        \"& $title\": {\n            fontWeight: theme.typography.fontWeightBold,\n        },\n        \"& $icon\": {\n            color: theme.palette.text.secondary,\n        },\n    },\n}));\n\nconst NavItem = ({ className, href, icon: Icon, title, ...rest }) => {\n    const classes = useStyles();\n\n    return (\n        <ListItem\n            className={clsx(classes.item, className)}\n            disableGutters\n            {...rest}\n        >\n            <Button\n                activeClassName={classes.active}\n                className={classes.button}\n                component={RouterLink}\n                to={href}\n            >\n                {Icon && <Icon className={classes.icon} size=\"20\" />}\n                <span className={classes.title}>{title}</span>\n            </Button>\n        </ListItem>\n    );\n};\n\nNavItem.propTypes = {\n    className: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.elementType,\n    title: PropTypes.string,\n};\n\nexport default NavItem;\n","import React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport FormatShapesIcon from \"@material-ui/icons/FormatShapes\";\nimport {\n    Box,\n    Drawer,\n    Fab,\n    List,\n    Typography,\n    makeStyles,\n    Card,\n    CardContent,\n} from \"@material-ui/core\";\nimport {\n    BarChart as BarChartIcon,\n    Map as MapIcon,\n    Home as HomeIcon,\n} from \"react-feather\";\nimport NavItem from \"./NavItem\";\n\nconst items = [\n    {\n        href: \"/home\",\n        icon: HomeIcon,\n        title: \"Home\",\n    },\n\n    {\n        href: \"/\",\n        icon: MapIcon,\n        title: \"CityScopeJS\",\n    },\n    {\n        href: \"/editor\",\n        icon: BarChartIcon,\n        title: \"Grid Editor\",\n    },\n    {\n        href: \"/projection\",\n        icon: FormatShapesIcon,\n        title: \"Projection Mapping\",\n    },\n];\n\nconst useStyles = makeStyles(() => ({\n    mobileDrawer: {\n        width: \"30vw\",\n        top: 48,\n        height: \"calc(100% - 48px)\",\n        boxShadow: \"22px 22px 22px 0 rgba(0,0,0)\",\n    },\n}));\n\nconst NavBar = ({ onMobileClose, openMobile }) => {\n    const classes = useStyles();\n    const location = useLocation();\n\n    useEffect(() => {\n        if (openMobile && onMobileClose) {\n            onMobileClose();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [location.pathname]);\n\n    const content = (\n        <Box height=\"100%\" display=\"flex\" flexDirection=\"column\" p={3}>\n            <List>\n                {items.map((item) => (\n                    <NavItem\n                        style={{ padding: \"2vh\" }}\n                        href={item.href}\n                        key={item.title}\n                        title={item.title}\n                        icon={item.icon}\n                    />\n                ))}\n            </List>\n\n            <Box flexGrow={1} />\n            <Card elevation={5} p={2}>\n                <CardContent position={\"bottom\"}>\n                    <Fab\n                        href=\"http://github.com/CityScope/CS_cityscopeJS/\"\n                        color=\"default\"\n                        size=\"small\"\n                    >\n                        <GitHubIcon />\n                    </Fab>\n                    <Box p={2} />\n                    <Typography align=\"left\" variant=\"h5\">\n                        MIT CityScope\n                    </Typography>\n                    <Typography align=\"left\" variant=\"caption\">\n                        {new Date().getFullYear()}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </Box>\n    );\n\n    return (\n        <>\n            <Drawer\n                anchor=\"left\"\n                classes={{ paper: classes.mobileDrawer }}\n                onClose={onMobileClose}\n                open={openMobile}\n                elevation={10}\n                variant=\"persistent\"\n            >\n                {content}\n            </Drawer>\n        </>\n    );\n};\n\nNavBar.propTypes = {\n    onMobileClose: PropTypes.func,\n    openMobile: PropTypes.bool,\n};\n\nNavBar.defaultProps = {\n    onMobileClose: () => {},\n    openMobile: false,\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\n\nimport {\n    AppBar,\n    IconButton,\n    Toolbar,\n    Typography,\n    makeStyles,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles(() => ({\n    root: {},\n}));\n\nconst TopBar = ({ className, onMobileNavOpen, ...rest }) => {\n    const classes = useStyles();\n\n    return (\n        <AppBar\n            className={clsx(classes.root, className)}\n            elevation={5}\n            {...rest}\n        >\n            <Toolbar variant=\"dense\">\n                <IconButton color=\"inherit\" onClick={onMobileNavOpen}>\n                    <MenuIcon />\n                </IconButton>\n                <RouterLink to=\"/\">\n                    <Typography\n                        className={classes.name}\n                        color=\"textPrimary\"\n                        variant=\"h5\"\n                    >\n                        MIT CityScope\n                    </Typography>\n                </RouterLink>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nTopBar.propTypes = {\n    className: PropTypes.string,\n    onMobileNavOpen: PropTypes.func,\n};\n\nexport default TopBar;\n","import React, { useState } from \"react\";\nimport { Outlet } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core\";\nimport NavBar from \"./NavBar\";\nimport TopBar from \"./TopBar\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background,\n        display: \"flex\",\n        height: \"100%\",\n        overflow: \"hidden\",\n        width: \"100%\",\n    },\n\n    content: {\n        paddingTop: 48,\n        flex: \"1 1 auto\",\n        height: \"100vh\",\n        overflow: \"auto\",\n    },\n}));\n\nconst MainLayout = () => {\n    const classes = useStyles();\n    const [navMenuState, setNavMenuState] = useState(true);\n\n    return (\n        <div className={classes.root}>\n            <NavBar openMobile={!navMenuState} />\n            <TopBar onMobileNavOpen={() => setNavMenuState(!navMenuState)} />\n            <div className={classes.content}>\n                <Outlet />\n            </div>\n        </div>\n    );\n};\n\nexport default MainLayout;\n","import React, { forwardRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport PropTypes from \"prop-types\";\n\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\n    return (\n        <div ref={ref} {...rest}>\n            <Helmet>\n                <title>\n                    CityScopeJS {\">\"} {title}\n                </title>\n            </Helmet>\n            {children}\n        </div>\n    );\n});\n\nPage.propTypes = {\n    children: PropTypes.node.isRequired,\n    title: PropTypes.string,\n};\n\nexport default Page;\n","import React from \"react\";\nimport { Box, Container, Typography, makeStyles } from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background,\n    height: \"100%\",\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n  image: {\n    marginTop: 50,\n    display: \"inline-block\",\n    maxWidth: \"100%\",\n    width: 560,\n  },\n}));\n\nconst NotFoundView = () => {\n  const classes = useStyles();\n\n  return (\n    <Page className={classes.root} title=\"404\">\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Container maxWidth=\"md\">\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h1\">\n            404\n          </Typography>\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h5\">\n            The page you are looking for isn’t here\n          </Typography>\n        </Container>\n      </Box>\n    </Page>\n  );\n};\n\nexport default NotFoundView;\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport default function SelectionTarget(props) {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n    const selectedType = props.selectedType;\n    const divSize = props.divSize;\n\n    const colorTrans =\n        \"rgba(\" +\n        selectedType.color[0] +\n        \",\" +\n        selectedType.color[1] +\n        \",\" +\n        selectedType.color[2] +\n        \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: selectedType.color,\n                color: selectedType.color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\",\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n}\n","/**\n * CSjs ACTIONS\n */\nexport const GET_CITYIO_DATA = 'GET_CITYIO_DATA'\nexport function getCityioData(data) {\n  return { type: GET_CITYIO_DATA, data }\n}\n\nexport const LISTEN_TO_MAP_EVENTS = 'LISTEN_TO_MAP_EVENTS'\nexport function listenToMapEvents(data) {\n  return { type: LISTEN_TO_MAP_EVENTS, data }\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = 'LISTEN_TO_ABM_SLIDERS'\nexport function listenToSlidersEvents(data) {\n  return { type: LISTEN_TO_ABM_SLIDERS, data }\n}\n\nexport const LISTEN_TO_ABM_MODE = 'LISTEN_TO_ABM_MODE'\nexport function listenToABMmode(data) {\n  return { type: LISTEN_TO_ABM_MODE, data }\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = 'LISTEN_TO_ACCESS_TOGGLE'\nexport function listenToAccessToggle(data) {\n  return { type: LISTEN_TO_ACCESS_TOGGLE, data }\n}\n\nexport const MENU_INTERACTION = 'MENU_INTERACTION'\nexport function listenToMenuUI(data) {\n  return { type: MENU_INTERACTION, data }\n}\n\nexport const LISTEN_TO_EDIT_MENU = 'LISTEN_TO_EDIT_MENU'\nexport function listenToEditMenu(data) {\n  return { type: LISTEN_TO_EDIT_MENU, data }\n}\n\nexport const SET_READY_STATE = 'SET_READY_STATE'\nexport function setReadyState(data) {\n  return { type: SET_READY_STATE, data }\n}\n\nexport const SET_LOADING_STATE = 'SET_LOADING_STATE'\nexport function setLoadingState(data) {\n  return { type: SET_LOADING_STATE, data }\n}\n\nexport const SET_SCENARIO_NAMES = 'SET_SCENARIO_NAMES'\nexport function setScenarioNames(data) {\n  return { type: SET_SCENARIO_NAMES, data }\n}\n\nexport const ADD_LOADING_MODULES = 'ADD_LOADING_MODULES'\nexport function addLoadingModules(data) {\n  return { type: ADD_LOADING_MODULES, data }\n}\n\nexport const REMOVE_LOADING_MODULES = 'REMOVE_LOADING_MODULES'\nexport function removeLoadingModules(data) {\n  return { type: REMOVE_LOADING_MODULES, data }\n}\n\n/**\n * PROJECTION MAPPING Actions\n */\n\nexport const SET_UI_WEBSOCKET_DATA = 'SET_UI_WEBSOCKET_DATA'\nexport function setUIWebsocketData(data) {\n  return { type: SET_UI_WEBSOCKET_DATA, data }\n}\n\nexport const SET_UI_WEBSOCKET_READY = 'SET_UI_WEBSOCKET_READY'\nexport function setUIWebsocketReady(data) {\n  return { type: SET_UI_WEBSOCKET_READY, data }\n}\n\n/**\n * Editor Actions\n */\n\nexport const LISTEN_TO_GRID_CREATOR = 'LISTEN_TO_GRID_CREATOR'\nexport function listenToGridCreator(data) {\n  return { type: LISTEN_TO_GRID_CREATOR, data }\n}\n\nexport const LISTEN_TO_ROW_EDIT = 'LISTEN_TO_ROW_EDIT'\nexport function listenToRowEdits(data) {\n  return { type: LISTEN_TO_ROW_EDIT, data }\n}\n\nexport const LISTEN_TO_TYPES_LIST = 'LISTEN_TO_TYPES_LIST'\nexport function listeonToTypesList(data) {\n  return { type: LISTEN_TO_TYPES_LIST, data }\n}\n\nexport const LISTEN_TO_BASE_MAP_CENTER = 'LISTEN_TO_BASE_MAP_CENTER'\nexport function listenToBaseMapCenter(data) {\n  return { type: LISTEN_TO_BASE_MAP_CENTER, data }\n}\n","import React, { Component } from \"react\";\nimport EditorBrush from \"./EditorBrush\";\nimport { connect } from \"react-redux\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport settings from \"../GridEditorSettings.json\";\nimport { listenToBaseMapCenter } from \"../../../redux/actions\";\n\nexport const _hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n};\n\nclass BaseMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 12),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n    }\n\n    _toggleOrthoView = (viewState) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n    };\n\n    _onViewStateChange = ({ viewState }) => {\n        this.setState({ viewState });\n    };\n\n    componentDidUpdate = (prevProps) => {\n        if (this.props.mapCenter !== prevProps.mapCenter)\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    latitude: this.props.mapCenter.latCenter,\n                    longitude: this.props.mapCenter.lonCenter,\n                    pitch: 0,\n                    bearing: 0,\n                    orthographic: false,\n                },\n            });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                latitude: settings.GEOGRID.properties.header.latitude,\n                longitude: settings.GEOGRID.properties.header.longitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 0,\n                orthographic: true,\n            },\n        });\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        if (!this.props.selectedType) return;\n        const { height, name, color, interactive } = this.props.selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n\n        multiSelectedObj.forEach((selected) => {\n            let thisCellProps = selected.object.properties;\n            thisCellProps.color = _hexToRgb(color);\n            thisCellProps.height = parseInt(height);\n            thisCellProps.name = name;\n            if (interactive !== \"No\") {\n                thisCellProps.interactive = interactive;\n            } else {\n                delete thisCellProps.interactive;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        return (\n            this.props.selectedType && (\n                <EditorBrush\n                    mousePos={this.state.mousePos}\n                    selectedType={this.props.selectedType}\n                    divSize={this.state.pickingRadius}\n                    mouseDown={this.state.mouseDown}\n                />\n            )\n        );\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        let layers = [];\n        layers.push(\n            new GeoJsonLayer({\n                id: \"GRID\",\n                opacity: 0.5,\n                stroked: false,\n                filled: true,\n                wireframe: true,\n                data: this.props.createdGrid,\n                visible: true,\n                pickable: true,\n                extruded: true,\n                lineWidthScale: 1,\n                lineWidthMinPixels: 1,\n                getElevation: (d) => d.properties.height,\n                getFillColor: (d) => d.properties.color,\n\n                onClick: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n\n                onDrag: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n                onDragStart: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    ) {\n                        this.setState({ draggingWhileEditing: true });\n                    }\n                },\n                onDragEnd: () => {\n                    this.setState({ draggingWhileEditing: false });\n                },\n                updateTriggers: {\n                    getFillColor: this.state.selectedCellsState,\n                    getElevation: this.state.selectedCellsState,\n                },\n                transitions: {\n                    getFillColor: 500,\n                    getElevation: 500,\n                },\n            })\n        );\n\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {this._renderSelectionTarget()}\n\n                <DeckGL\n                    // sets the cursor on paint\n                    // getCursor={() => \"none\"}\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.sat}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    listenToBaseMapCenter: listenToBaseMapCenter,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedType: state.ROW_EDIT,\n        mapCenter: state.BASE_MAP_CENTER,\n        createdGrid: state.GRID_CREATED,\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap);\n","import MaterialTable from \"material-table\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\nimport {\n    listenToRowEdits,\n    listeonToTypesList,\n    listenToGridCreator,\n} from \"../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport settings from \"../../GridEditorSettings.json\";\n\nexport default function TypesEditor() {\n    const createtypesArray = (LanduseTypesList) => {\n        let typesArray = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            typesArray.push({\n                name: type,\n                description: \"description for: \" + type,\n                color: LanduseTypesList[type].color,\n                height: LanduseTypesList[type].height\n                    ? LanduseTypesList[type].height\n                    : 0,\n\n                LBCS: LanduseTypesList[type].LBCS\n                    ? JSON.stringify(LanduseTypesList[type].LBCS)\n                    : null,\n                NAICS: LanduseTypesList[type].NAICS\n                    ? JSON.stringify(LanduseTypesList[type].NAICS)\n                    : null,\n                interactive: LanduseTypesList[type].interactive,\n            });\n        });\n        return typesArray;\n    };\n\n    const [state, setState] = React.useState({\n        columns: [\n            {\n                title: \"Type\",\n                field: \"name\",\n            },\n            {\n                title: \"Description\",\n                field: \"description\",\n            },\n\n            {\n                title: \"Height\",\n                field: \"height\",\n                type: \"numeric\",\n            },\n            {\n                title: \"Interactive\",\n                field: \"interactive\",\n                lookup: { No: \"No\", Web: \"Web\", TUI: \"TUI\" },\n            },\n            {\n                title: \"Color\",\n                field: \"color\",\n                type: \"string\",\n            },\n            {\n                title: \"LBCS\",\n                field: \"LBCS\",\n                type: \"string\",\n            },\n            {\n                title: \"NAICS\",\n                field: \"NAICS\",\n                type: \"string\",\n            },\n        ],\n        data: createtypesArray(settings.GEOGRID.properties.types),\n    });\n\n    const dispatch = useDispatch();\n    const [selectedRow, setSelectedRow] = useState(null);\n    const [rowColor, setRowColor] = useState(null);\n\n    // redux the type list on every change\n    useEffect(() => {\n        dispatch(listeonToTypesList(state.data));\n    });\n\n    return (\n        <Grid container>\n            <Grid item xs={12} s={12} m={12} l={12} xl={12}>\n                <MaterialTable\n                    title={<Typography variant=\"h2\">Types Editor</Typography>}\n                    // columns={state.columns}\n                    columns={state.columns}\n                    data={state.data}\n                    options={{\n                        paging: false,\n                        search: false,\n                        selection: false,\n                        rowStyle: (rowData) => ({\n                            fontFamily: \"Roboto Mono\",\n                            fontSize: 12,\n                            backgroundColor:\n                                selectedRow === rowData.tableData.id\n                                    ? rowColor\n                                    : null,\n                        }),\n                    }}\n                    onRowClick={(evt, row) => {\n                        setSelectedRow(row.tableData.id);\n                        setRowColor(row.color);\n                        dispatch(listenToRowEdits(row));\n                    }}\n                    editable={{\n                        onRowAdd: (newData) =>\n                            new Promise((resolve) => {\n                                setTimeout(() => {\n                                    resolve();\n                                    setState((prevState) => {\n                                        const data = [...prevState.data];\n                                        data.push(newData);\n                                        return { ...prevState, data };\n                                    });\n                                }, 500);\n                            }),\n                        onRowUpdate: (newData, oldData) =>\n                            new Promise((resolve) => {\n                                setTimeout(() => {\n                                    resolve();\n                                    if (oldData) {\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data[\n                                                data.indexOf(oldData)\n                                            ] = newData;\n\n                                            return { ...prevState, data };\n                                        });\n                                    }\n\n                                    // dispath change to redux\n                                    dispatch(listenToRowEdits(newData));\n                                }, 500);\n                            }),\n                        onRowDelete: (oldData) =>\n                            new Promise((resolve) => {\n                                setTimeout(() => {\n                                    resolve();\n                                    setState((prevState) => {\n                                        const data = [...prevState.data];\n                                        data.splice(data.indexOf(oldData), 1);\n                                        return { ...prevState, data };\n                                    });\n\n                                    dispatch(listenToGridCreator(null));\n                                }, 500);\n                            }),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n","import proj4 from \"proj4\";\nimport { _hexToRgb } from \"../../../EditorMap/EditorMap\";\n\nfunction deg_to_rad(deg) {\n    return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n    return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n    var keys = Object.keys(obj);\n    return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps, typesList) => {\n    let top_left_lon = parseFloat(gridProps.longitude);\n    let top_left_lat = parseFloat(gridProps.latitude);\n    let rotation = parseFloat(gridProps.rotation);\n    let userPrj = gridProps.projection;\n    let cell_size = parseFloat(gridProps.cellSize);\n    let nrows = parseFloat(gridProps.nrows);\n    let ncols = parseFloat(gridProps.ncols);\n\n    const webMercator = proj4.defs(\"EPSG:4326\");\n    let EARTH_RADIUS_M = 6.371e6;\n    let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n    let bearing = (90 - rotation + 360) % 360;\n    let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n    let la1 = deg_to_rad(top_left_lon_lat.lat);\n    let lo1 = deg_to_rad(top_left_lon_lat.lon);\n    let bearing_rad = deg_to_rad(bearing);\n    let la2 = Math.asin(\n        Math.sin(la1) * Math.cos(Ad) +\n            Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n    );\n    let lo2 =\n        lo1 +\n        Math.atan2(\n            Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n            Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n        );\n    let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n    let top_left_xy = proj4(webMercator, userPrj, [\n        top_left_lon_lat.lon,\n        top_left_lon_lat.lat,\n    ]);\n\n    let top_right_xy = proj4(webMercator, userPrj, [\n        top_right_lon_lat.lon,\n        top_right_lon_lat.lat,\n    ]);\n\n    let dydx =\n        (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n    let theta = Math.atan(dydx);\n    let cosTheta = Math.cos(theta);\n    let sinTheta = Math.sin(theta);\n    // create rotate matrix\n    let x_unRot = [];\n    let y_unRot = [];\n    for (let i = 0; i < nrows; i++) {\n        for (let j = 0; j < ncols; j++) {\n            x_unRot.push(j * cell_size);\n            y_unRot.push(-i * cell_size);\n        }\n    }\n\n    let x_rot = [];\n    let y_rot = [];\n    for (let i = 0; i < x_unRot.length; i++) {\n        x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n        y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n    }\n\n    let x_rot_trans = [];\n    let y_rot_trans = [];\n    for (let i = 0; i < x_rot.length; i++) {\n        x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n        y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n    }\n\n    var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n    var dydCol = y_rot_trans[1] - y_rot_trans[0];\n    var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n    var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n    let gridPnts = [];\n    let geojsonFeatureCollection = {\n        type: \"FeatureCollection\",\n        // polygons go here\n        features: [],\n    };\n\n    // get a list of types that is updated based on\n    // the current redux state of the types list table\n    let types = typesList;\n\n    for (let i = 0; i < x_rot_trans.length; i++) {\n        let rndType = randomProperty(types);\n\n        let geojsonPolygon = {\n            type: \"Feature\",\n            geometry: {\n                type: \"Polygon\",\n                coordinates: null,\n            },\n            properties: {\n                color: _hexToRgb(rndType.color),\n                height: rndType.height,\n                name: rndType.name,\n                interactive: rndType.interactive,\n                id: i,\n            },\n        };\n\n        var polygon_xy = [\n            [x_rot_trans[i], y_rot_trans[i]],\n            [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n            [\n                x_rot_trans[i] + dxdRow + dxdCol,\n                y_rot_trans[i] + dydRow + dydCol,\n            ],\n            [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n            [x_rot_trans[i], y_rot_trans[i]],\n        ];\n\n        var polygon_ll = [];\n        for (var v = 0; v < 5; v++) {\n            let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n            polygon_ll.push(ll);\n        }\n\n        geojsonPolygon.geometry.coordinates = [polygon_ll];\n        gridPnts.push(geojsonPolygon);\n    }\n    geojsonFeatureCollection.features = gridPnts;\n    return geojsonFeatureCollection;\n};\n","import React from \"react\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport Button from \"@material-ui/core/Button\";\nimport { gridCreator } from \"./gridCreator\";\nimport { listenToGridCreator } from \"../../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n\nexport default function GridMaker(props) {\n    const dispatch = useDispatch();\n    const reduxState = useSelector((state) => state);\n\n    const handleGridCreation = () => {\n        let grid = gridCreator(props.gridProps, reduxState.TYPES_LIST);\n        dispatch(listenToGridCreator(grid));\n    };\n\n    return (\n        <Button\n            onClick={() => {\n                handleGridCreation();\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<AppsIcon />}\n        >\n            Create Grid\n        </Button>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport axios from \"axios\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSelector } from \"react-redux\";\nimport Link from \"@material-ui/core/Link\";\n\nconst reqResonseUI = (response, tableName) => {\n    let cityscopeJSendpoint =\n        \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" +\n        tableName;\n    // create the feedback text\n    let resText = (\n        <Typography color=\"textPrimary\" variant=\"caption\">\n            CityIO is {response.data.status}. Grid deployed to{\" \"}\n            <Link color=\"textSecondary\" href={cityscopeJSendpoint}>\n                {cityscopeJSendpoint}\n            </Link>\n        </Typography>\n    );\n\n    return resText;\n};\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst makeGEOGRIDobject = (struct, typesList, geoJsonFeatures, gridProps) => {\n    let GEOGRID_object = struct;\n\n    // take types list and prepare to csJS format\n    let newTypesList = {};\n\n    typesList.forEach((oldType) => {\n        newTypesList[oldType.name] = oldType;\n        //material-table creates strings for these items\n        // so in first \"Commit to cityIO\", these must be turned into\n        // Json objects. On Second commit, these are already objects,\n        // hence the two conditions below\n\n        newTypesList[oldType.name].LBCS =\n            typeof oldType.LBCS == \"string\"\n                ? JSON.parse(oldType.LBCS)\n                : oldType.LBCS;\n        newTypesList[oldType.name].NAICS =\n            typeof oldType.NAICS == \"string\"\n                ? JSON.parse(oldType.NAICS)\n                : oldType.NAICS;\n    });\n\n    GEOGRID_object.properties.types = newTypesList;\n\n    // inject table props to grid\n    GEOGRID_object.properties.header = gridProps;\n    GEOGRID_object.properties.header.longitude = parseFloat(\n        GEOGRID_object.properties.header.longitude\n    );\n    GEOGRID_object.properties.header.latitude = parseFloat(\n        GEOGRID_object.properties.header.latitude\n    );\n    GEOGRID_object.properties.header.rotation = parseFloat(\n        GEOGRID_object.properties.header.rotation\n    );\n    GEOGRID_object.properties.header.nrows = parseFloat(\n        GEOGRID_object.properties.header.nrows\n    );\n    GEOGRID_object.properties.header.ncols = parseFloat(\n        GEOGRID_object.properties.header.ncols\n    );\n    GEOGRID_object.properties.header.cellSize = parseFloat(\n        GEOGRID_object.properties.header.cellSize\n    );\n\n    // lastly get the grid features\n    GEOGRID_object.features = geoJsonFeatures;\n    return GEOGRID_object;\n};\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst makeGEOGRIDDATAobject = (geoJsonFeatures) => {\n    let GEOGRIDDATA_object = [];\n    geoJsonFeatures.forEach((element) => {\n        GEOGRIDDATA_object.push(element.properties);\n    });\n    return GEOGRIDDATA_object;\n};\n\nexport default function CommitGrid(props) {\n    const [reqResonse, setReqResonse] = React.useState(null);\n\n    const reduxState = useSelector((state) => state);\n    const hasGrid = reduxState.GRID_CREATED;\n\n    const downloadObjectAsJson = () => {\n        let GEOGRIDstruct = settings.GEOGRID;\n\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        let GEOGRID_object = makeGEOGRIDobject(\n            GEOGRIDstruct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n        var dataStr =\n            \"data:text/json;charset=utf-8,\" +\n            encodeURIComponent(JSON.stringify(GEOGRID_object));\n        var downloadAnchorNode = document.createElement(\"a\");\n        downloadAnchorNode.setAttribute(\"href\", dataStr);\n        downloadAnchorNode.setAttribute(\"download\", \"grid.json\");\n        document.body.appendChild(downloadAnchorNode); // required for firefox\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    };\n\n    const postGridToCityIO = () => {\n        let GEOGRIDstruct = settings.GEOGRID;\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        // take grid struct from settings\n        let GEOGRID_object = makeGEOGRIDobject(\n            GEOGRIDstruct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n\n        let GEOGRIDDATA_object = makeGEOGRIDDATAobject(geoJsonFeatures);\n\n        let tableName = GEOGRID_object.properties.header.tableName.toLowerCase();\n        let requestsList = {\n            geoGridURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRID\",\n\n            geoGridDataURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRIDDATA\",\n        };\n\n        const geoGridOptions = (URL, DATA) => {\n            return {\n                method: \"post\",\n                url: URL,\n                data: DATA,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\",\n                },\n            };\n        };\n\n        axios(geoGridOptions(requestsList.geoGridURL, GEOGRID_object))\n            .then(function (response) {\n                setReqResonse(reqResonseUI(response, tableName));\n            })\n            // then reset GEOGRIDDATA of that new grid\n\n            .then(function () {\n                axios(geoGridOptions(requestsList.geoGridDataURL, {}));\n                console.log(\"removed GEOGRIDDATA\");\n            })\n            .then(function () {\n                axios(\n                    geoGridOptions(\n                        requestsList.geoGridDataURL,\n                        GEOGRIDDATA_object\n                    )\n                );\n                console.log(\"mirrored GEOGRID to GEOGRIDDATA\");\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    return (\n        <>\n            {hasGrid && (\n                <>\n                    <Button\n                        onClick={() => {\n                            postGridToCityIO();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudUploadIcon />}\n                    >\n                        Commit Grid to cityIO\n                    </Button>\n\n                    <Button\n                        onClick={() => {\n                            // ! download as json\n                            downloadObjectAsJson();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudDownloadIcon />}\n                    >\n                        Download JSON\n                    </Button>\n\n                    <div style={{ width: \"100%\" }}> {reqResonse}</div>\n                </>\n            )}\n        </>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CenterFocusStrongIcon from \"@material-ui/icons/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\n\nimport { listenToBaseMapCenter } from \"../../../../../redux/actions\";\n\nexport default function CenterMapButton(props) {\n    const dispatch = useDispatch();\n\n    return (\n        <Button\n            onClick={() => {\n                dispatch(\n                    listenToBaseMapCenter({\n                        latCenter: parseFloat(props.mapCenter[0]),\n                        lonCenter: parseFloat(props.mapCenter[1]),\n                    })\n                );\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<CenterFocusStrongIcon />}\n            style={{ fontSize: \"12px\" }}\n        >\n            Center Map\n        </Button>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GridMaker from \"./GridMaker\";\nimport CommitGrid from \"./CommitGrid\";\nimport CenterMapButton from \"./CenterMapButton/CenterMapButton\";\nimport settings from \"../../GridEditorSettings.json\";\n\n\nexport default function GridProps() {\n    const useStyles = makeStyles((theme) => ({\n        notchedOutline: {\n            borderWidth: \"1px\",\n            borderColor: theme.palette.text.secondary,\n        },\n        root: {\n            \"& .MuiTextField-root\": {\n                margin: theme.spacing(1),\n                flexWrap: \"wrap\",\n            },\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n    }));\n\n    const [formValues, setformValues] = React.useState({\n        tableName: \"CityScopeJS\",\n        latitude: settings.GEOGRID.properties.header.latitude,\n        longitude: settings.GEOGRID.properties.header.longitude,\n        tz:settings.GEOGRID.properties.header.tz, \n        nrows: settings.GEOGRID.properties.header.nrows,\n        ncols: settings.GEOGRID.properties.header.nrows,\n        rotation: settings.GEOGRID.properties.header.rotation,\n        cellSize: settings.GEOGRID.properties.header.cellSize,\n        projection: settings.GEOGRID.properties.header.projection,\n    });\n\n    const handleChangeForm = (event) => {\n        const { id, value } = event.target;\n        setformValues({ ...formValues, [id]: value });\n    };\n\n    const classes = useStyles();\n\n    //  get all data\n    // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\">\n            <Typography variant=\"h2\">Grid Properties</Typography>\n            <div className={classes.root}>\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"tableName\"\n                    label=\"CityScope Project Name\"\n                    defaultValue={formValues.tableName}\n                />\n            </div>\n            <div className={classes.root}>\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"latitude\"\n                    label=\"Latitude\"\n                    defaultValue={formValues.latitude}\n                    type=\"number\"\n                />\n\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"longitude\"\n                    label=\"Longitude\"\n                    defaultValue={formValues.longitude}\n                    type=\"number\"\n                />\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"tz\"\n                    label=\"Time Zone (GMT)\"\n                    defaultValue={formValues.tz}\n                    type=\"number\"\n                />\n            </div>\n            <div className={classes.root}>\n                <CenterMapButton\n                    mapCenter={[formValues.latitude, formValues.longitude]}\n                />\n            </div>\n            <div className={classes.root}>\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"nrows\"\n                    label=\"Rows\"\n                    defaultValue={formValues.nrows}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 100,\n                            min: 0,\n                        },\n                    }}\n                />\n\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"ncols\"\n                    label=\"Columns\"\n                    defaultValue={formValues.ncols}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 100,\n                            min: 0,\n                        },\n                    }}\n                />\n\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"rotation\"\n                    label=\"Rotation (deg)\"\n                    defaultValue={formValues.rotation}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 360,\n                            min: 0,\n                        },\n                    }}\n                />\n\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"cellSize\"\n                    label=\"Cell Size (m^2)\"\n                    defaultValue={formValues.cellSize}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 1000,\n                            min: 0,\n                        },\n                    }}\n                />\n            </div>\n            <div className={classes.root}>\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    id=\"projection\"\n                    label=\"Projection\"\n                    defaultValue={formValues.projection}\n                    type=\"string\"\n                    helperText=\"Default projection should work for most CityScope cases. Find specific projections at: https://epsg.io/\"\n                />\n            </div>\n            <div className={classes.root}>\n                <GridMaker gridProps={formValues} />\n                <CommitGrid gridProps={formValues} />\n            </div>\n        </form>\n    );\n}\n","// // export default EditMenuMain;\n\nimport React from \"react\";\nimport TypesEditor from \"./TypesEditor\";\nimport GridProps from \"./GridProps\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function EditorMenu() {\n    return (\n        <List>\n            <ListItem>\n                <Typography variant=\"h1\">CityScope Grid Editor</Typography>\n            </ListItem>\n            <ListItem>\n                <Typography>\n                    This tool is for creating CityScope projects with virtual\n                    editable girds, types, and props, and deploy them to cityIO.\n                </Typography>\n            </ListItem>\n            <ListItem>\n                <GridProps />\n            </ListItem>\n            <ListItem>\n                <TypesEditor />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport EditorMap from \"./EditorMap/EditorMap\";\nimport EditorMenu from \"./EditorMenu\";\nimport {\n    makeStyles,\n    Grid,\n    Card,\n    CardContent,\n    Container,\n} from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: \"auto\",\n        height: \"100%\",\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n}));\n\nexport default function GridEditor() {\n    const classes = useStyles();\n\n    return (\n        <Page className={classes.root} title=\"Editor\">\n            <Container maxWidth={false}>\n                <>\n                    <Grid container spacing={5}>\n                        <Grid item xs={12} l={6} md={6} xl={4}>\n                            <Card\n                                elevation={15}\n                                style={{\n                                    maxHeight: \"85vh\",\n                                    overflow: \"auto\",\n                                }}\n                            >\n                                <CardContent>\n                                    <EditorMenu />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        <Grid item xs={12} l={6} md={6} xl={8}>\n                            <Card\n                                elevation={15}\n                                style={{\n                                    height: \"85vh\",\n                                    width: \"100%\",\n                                    position: \"relative\",\n                                }}\n                            >\n                                <CardContent>\n                                    <EditorMap />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </>\n            </Container>\n        </Page>\n    );\n}\n","import axios from \"axios\";\nimport settings from \"../../../settings/settings.json\";\n\nexport const getScenarioIndices = (\n    tableName,\n    setScenarioNames,\n    setLoadingState\n) => {\n    var url = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n    axios\n        .get(url)\n        .then((res) => {\n            const metaDataKeys = Object.keys(res.data);\n            const scenarioIndices = metaDataKeys\n                .filter((str) => str.includes(\"scenarios\"))\n                .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n            const promises = [];\n            for (const id of scenarioIndices) {\n                promises.push(getScenarioName(tableName, id));\n            }\n            Promise.all(promises)\n                .then((res) => {\n                    setScenarioNames(\n                        res.map((r) => ({\n                            name: r.data.name,\n                            id: r.data.id,\n                        }))\n                    );\n                    setLoadingState && setLoadingState(false);\n                })\n                .catch((err) =>\n                    console.log(\"error getting scenario names\", err)\n                );\n        })\n        .catch((err) => {\n            console.log(\"Error getting scenarios\", err);\n        });\n};\n\nexport const getScenarioName = (tableName, id) => {\n    const url =\n        settings.cityIO.baseURL + tableName + \"/scenarios\" + id + \"/info\";\n    return axios.get(url);\n};\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n    setScenarioNames,\n    addLoadingModules,\n    removeLoadingModules,\n} from \"../../../redux/actions\";\nimport settings from \"../../../settings/settings.json\";\nimport { getScenarioIndices } from \"./utils\";\n\nconst getAPICall = async (URL) => {\n    try {\n        // ! should add 'retry' here\n        // ! https://stackoverflow.com/questions/56074531/how-to-retry-5xx-requests-using-axios\n        const response = await axios.get(URL);\n        return response.data;\n    } catch (err) {\n        console.log(err);\n    }\n};\n\nexport default function CityIO(props) {\n    const { tableName } = props;\n    const [hashId, setHashId] = useState(null);\n    const [hashes, setHashes] = useState({});\n    const cityioURL = settings.cityIO.baseURL + tableName;\n    const cityioData = useSelector((state) => state.CITYIO);\n\n    const dispatch = useDispatch();\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    useEffect(() => {\n        const timer = setTimeout(update, settings.cityIO.interval);\n        console.log(\"reading cityIO every\" + settings.cityIO.interval + \"ms\");\n        return () => clearTimeout(timer);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    async function update() {\n        // recursively get hashes\n        const newHashId = await getAPICall(cityioURL + \"/meta/id\");\n        if (hashId !== newHashId) {\n            setHashId(newHashId);\n        }\n        setTimeout(update, settings.cityIO.interval);\n    }\n\n    async function getModules() {\n        const newHashes = await getAPICall(cityioURL + \"/meta/hashes\");\n        const promises = [];\n        const loadingModules = [];\n        const pickedModules = settings.cityIO.cityIOmodules.map((x) => x.name);\n        // for each of the modules in settings, add api call to promises\n        pickedModules.forEach((module) => {\n            if (hashes[module] !== newHashes[module]) {\n                promises.push(getAPICall(cityioURL + \"/\" + module));\n                loadingModules.push(module);\n            } else {\n                promises.push(null);\n            }\n        });\n        dispatch(addLoadingModules(loadingModules));\n        const modules = await Promise.all(promises);\n        setHashes(newHashes);\n\n        // update cityio object with modules data\n        const modulesData = pickedModules.reduce((obj, k, i) => {\n            if (modules[i]) {\n                console.log(`updating ${k}`);\n                return { ...obj, [k]: modules[i] };\n            } else {\n                return obj;\n            }\n        }, cityioData);\n        modulesData.tableName = tableName;\n\n        dispatch(removeLoadingModules(loadingModules));\n\n        // send to cityio\n        dispatch(getCityioData(modulesData));\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        dispatch(setReadyState(true));\n        dispatch(setLoadingState(false));\n    }\n\n    useEffect(() => {\n        //! only update if hashId changes\n        if (!hashId) {\n            return;\n        }\n        // reset the state of loading flag\n        dispatch(setLoadingState(true));\n        // set Scenario Names and Ids\n        getScenarioIndices(tableName, (data) =>\n            dispatch(setScenarioNames(data))\n        );\n        getModules();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [hashId]);\n\n    return null;\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    SCENARIO_NAMES: [],\n    MAP: {},\n    LOADING_MODULES: [],\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.currentSimHour,\n            settings.map.layers.ABM.endSimHour,\n        ],\n        speed: settings.map.layers.ABM.animationSpeed,\n    },\n    ABM_MODE: \"mode\",\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: null,\n    READY: false,\n    LOADING: false,\n\n    /**\n     * ! EDITOR INIT STATE\n     */\n\n    ROW_EDIT: null,\n    BASE_MAP_CENTER: {\n        latCenter: null,\n        lonCenter: null,\n    },\n    TYPES_LIST: null,\n    GRID_CREATED: null,\n};\n\nexport default initialState;\n","import {\n  GET_CITYIO_DATA,\n  MENU_INTERACTION,\n  LISTEN_TO_MAP_EVENTS,\n  LISTEN_TO_ABM_SLIDERS,\n  LISTEN_TO_EDIT_MENU,\n  SET_READY_STATE,\n  SET_LOADING_STATE,\n  SET_SCENARIO_NAMES,\n  LISTEN_TO_ACCESS_TOGGLE,\n  LISTEN_TO_ROW_EDIT,\n  LISTEN_TO_TYPES_LIST,\n  LISTEN_TO_GRID_CREATOR,\n  LISTEN_TO_BASE_MAP_CENTER,\n  LISTEN_TO_ABM_MODE,\n  ADD_LOADING_MODULES,\n  REMOVE_LOADING_MODULES,\n  SET_UI_WEBSOCKET_DATA,\n  SET_UI_WEBSOCKET_READY,\n} from './actions'\nimport initialState from './initialState'\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_CITYIO_DATA:\n      return { ...state, CITYIO: action.data }\n    case MENU_INTERACTION:\n      return { ...state, MENU: action.data }\n    case LISTEN_TO_MAP_EVENTS:\n      return { ...state, MAP: action.data }\n    case LISTEN_TO_ABM_SLIDERS:\n      return { ...state, SLIDERS: action.data }\n    case LISTEN_TO_ABM_MODE:\n      return { ...state, ABM_MODE: action.data }\n    case LISTEN_TO_ACCESS_TOGGLE:\n      return { ...state, ACCESS_TOGGLE: action.data }\n    case LISTEN_TO_EDIT_MENU:\n      return { ...state, SELECTED_TYPE: action.data }\n    case SET_READY_STATE:\n      return { ...state, READY: action.data }\n    case SET_LOADING_STATE:\n      return { ...state, LOADING: action.data }\n    case SET_SCENARIO_NAMES:\n      return { ...state, SCENARIO_NAMES: action.data }\n    case ADD_LOADING_MODULES:\n      return {\n        ...state,\n        LOADING_MODULES: [\n          ...new Set([...state.LOADING_MODULES, ...action.data]),\n        ],\n      }\n    case REMOVE_LOADING_MODULES:\n      return {\n        ...state,\n        LOADING_MODULES: state.LOADING_MODULES.filter(\n          (x) => !action.data.includes(x),\n        ),\n      }\n\n    /**\n     * PROJECTION MAPPING Actions\n     */\n    case SET_UI_WEBSOCKET_DATA:\n      return { ...state, UI_WEBSOCKET_DATA: action.data }\n\n    case SET_UI_WEBSOCKET_READY:\n      return { ...state, UI_WEBSOCKET_READY: action.data }\n\n    /**\n     * Editor Actions\n     */\n\n    case LISTEN_TO_ROW_EDIT:\n      return { ...state, ROW_EDIT: action.data }\n\n    case LISTEN_TO_TYPES_LIST:\n      return { ...state, TYPES_LIST: action.data }\n\n    case LISTEN_TO_GRID_CREATOR:\n      return { ...state, GRID_CREATED: action.data }\n\n    case LISTEN_TO_BASE_MAP_CENTER:\n      return { ...state, BASE_MAP_CENTER: action.data }\n\n    default:\n      return state\n  }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nconst store = configureStore();\n\nexport default store;\n","import axios from \"axios\";\nimport { addLoadingModules } from \"../redux/actions\";\nimport store from \"../redux/store\";\nimport settings from \"../settings/settings.json\";\nimport { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\n\n/**\n * conver rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n    function valToHex(c) {\n        var hex = c.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n    return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n/**\n * conver hex to rgb array\n */\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n    let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n    return isHex;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n    // get the static grid\n    const GEOGRID = cityioData.GEOGRID;\n    // if GEOGRRIDDATA exist and is the same length as our grid\n    if (\n        cityioData.GEOGRIDDATA &&\n        cityioData.GEOGRIDDATA.length === cityioData.GEOGRID.features.length\n    ) {\n        // get the grid data\n        const GEOGRIDDATA = cityioData.GEOGRIDDATA;\n        // update GEOGRID features from GEOGRIDDATA on cityio\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n            // inject id\n            GEOGRID.features[i].properties.id = i;\n        }\n    }\n    const newGrid = JSON.parse(JSON.stringify(GEOGRID));\n    return newGrid;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (data) => {\n    const accessData = data.access;\n    // get colors from settings\n    let coordinates = accessData.features.map((d) => d.geometry.coordinates);\n    let values = accessData.features.map((d) => d.properties);\n    let heatmap = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        heatmap.push({\n            coordinates: coordinates[i],\n            values: values[i],\n        });\n    }\n    return heatmap;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n    const expectUpdateModules = new Set(\n        settings.cityIO.cityIOmodules\n            .filter((val) => val.expectUpdate)\n            .map((val) => val.name)\n    );\n    const cityIOKeys = new Set(Object.keys(store.getState().CITYIO));\n\n    const loadingModules = [...cityIOKeys].filter((i) =>\n        expectUpdateModules.has(i)\n    );\n\n    let postURL =\n        \"https://cityio.media.mit.edu/api/table/update/\" + tableName + endPoint;\n\n    const options = {\n        method: \"post\",\n        url: postURL,\n        data: data,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options)\n        .then((res) => {\n            if (res.data.status === \"ok\") {\n                store.dispatch(addLoadingModules(loadingModules));\n            }\n        })\n        .catch((error) => {\n            console.log(\"ERROR:\", error);\n        });\n};\n\n// /**\n//  * Description. uses deck api to\n//  * collect objects in a region\n//  * @argument{object} e  picking event\n//  */\nexport const _multipleObjPicked = (e, pickingRadius, deckGLRef) => {\n    const dim = pickingRadius;\n    const x = e.x - dim / 2;\n    const y = e.y - dim / 2;\n    let multipleObj = deckGLRef.current.pickObjects({\n        x: x,\n        y: y,\n        width: dim,\n        height: dim,\n    });\n    return multipleObj;\n};\n\n// /**\n//  * Description. allow only to pick cells that are\n//  *  not of CityScope TUI & that are interactable\n//  * so to not overlap TUI activity\n//  */\nexport const _handleGridcellEditing = (\n    e,\n    selectedType,\n    setSelectedCellsState,\n    pickingRadius,\n    deckGLRef\n) => {\n    const { height, color, name } = selectedType;\n    const multiSelectedObj = _multipleObjPicked(e, pickingRadius, deckGLRef);\n    multiSelectedObj.forEach((selected) => {\n        const thisCellProps = selected.object.properties;\n        if (thisCellProps && thisCellProps.interactive) {\n            thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n            thisCellProps.height = height;\n            thisCellProps.name = name;\n        }\n    });\n    setSelectedCellsState(multiSelectedObj);\n};\n\nvar currentDateMidnight = new Date();\n// set initial midnight to GMT 0\ncurrentDateMidnight.setHours(0, 0, 0, 0);\n\nexport const _setupSunEffects = (effectsRef, tableHeader) => {\n    // get time zone from the tz value if exist\n    if (tableHeader.tz) {\n        currentDateMidnight.setHours(tableHeader.tz, 0, 0, 0);\n    }\n    const ambientLight = new AmbientLight({\n        color: [255, 255, 255],\n        intensity: 0.85,\n    });\n    const dirLight = new _SunLight({\n        timestamp: 0,\n        color: [255, 255, 255],\n        intensity: 1.0,\n        _shadow: true,\n    });\n    const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n    lightingEffect.shadowColor = [0, 0, 0, 0.5];\n    effectsRef.current = [lightingEffect];\n};\n\nexport const updateSunDirection = (time, effectsRef) => {\n\n    \n    const thisLocationTime = currentDateMidnight.getTime() + time * 1000;\n    var date = new Date(thisLocationTime);\n\n    effectsRef.current[0].directionalLights[0].timestamp = Date.UTC(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDay(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds()\n    );\n};\n","import React, { useState } from \"react\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function TypeInfo(props) {\n    const COLOR_SCALE = [\"#85C4C8\", \"#C22E00\", \"#1E96BE\", \"#EC9370\", \"#F6D18A\"];\n\n    const radialRadius = 50;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    // method to create data for radial chart\n    const careateData = () => {\n        // array for data\n        let data = [];\n        // check type info: if string, parse, else object\n        let info = props.typeInfo;\n        // get the type data\n        info.forEach((attr, index) => {\n            data.push({\n                angle: attr.proportion,\n                label: JSON.stringify(attr.use),\n                color: COLOR_SCALE[index],\n            });\n        });\n\n        return data;\n    };\n\n    const data = careateData();\n\n    /*\n    const boxStyle = { height: \"10px\", width: \"10px\" };\n\n    function buildValue(hoveredCell) {\n        const { radius, angle, angle0 } = hoveredCell;\n        const truedAngle = (angle + angle0) / 2;\n        return {\n            x: radius * Math.cos(truedAngle),\n            y: radius * Math.sin(truedAngle),\n        };\n    }\n    */\n\n    return (\n        <>\n            <RadialChart\n                colorType=\"literal\"\n                animation={true}\n                className={\"donut-chart-example\"}\n                innerRadius={radialRadius / 2 - radialRadius / 5}\n                radius={radialRadius / 2}\n                getLabel={(d) => d.label}\n                showLabels={false}\n                getAngle={(d) => d.angle}\n                data={data}\n                onValueMouseOver={(evt) => {\n                    setHoveredRadial(evt);\n                }}\n                onSeriesMouseOut={() => setHoveredRadial(false)}\n                width={radialRadius}\n                height={radialRadius}\n                padAngle={0.1}\n            >\n                {hoveredRadial !== false && (\n                    <Hint value={hoveredRadial}>\n                        <div\n                            style={{\n                                background: \"rgba(0,0,0,0.8)\",\n                                fontSize: 10,\n                            }}\n                        >\n                            <Typography variant={\"caption\"} gutterBottom>\n                                {hoveredRadial.label}\n                            </Typography>\n                        </div>\n                    </Hint>\n                )}\n            </RadialChart>\n        </>\n    );\n}\n","import React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport {\n    Collapse,\n    Typography,\n    CardContent,\n    Box,\n    Avatar,\n    ListItemAvatar,\n    ListItem,\n    ListItemText,\n    Grid,\n    Card,\n} from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { listenToEditMenu } from \"../../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport { testHex, hexToRgb } from \"../../../../utils/utils\";\nimport TypeInfo from \"./TypeInfo\";\n\nfunction EditMenu(props) {\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    let selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const height = selectedType ? selectedType.height : null;\n\n    const marks = [\n        { value: 0, label: \"min\" },\n        { value: 100, label: \"max\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    const parseTypeInfo = (typeInfo) => {\n        //! check type info: if string, parse, else object\n        let info =\n            typeof typeInfo == \"string\" ? JSON.parse(typeInfo) : typeInfo;\n        return info;\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type, index) => {\n            // get type description if exist\n            let description = LanduseTypesList[type].description\n                ? LanduseTypesList[type].description\n                : null;\n\n            let col = LanduseTypesList[type].color;\n            // get the LBCS/NAICS types info\n            let LBCS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].LBCS\n            );\n            let NAICS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].NAICS\n            );\n\n            if (testHex(col)) {\n                col = hexToRgb(col);\n            }\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n            let typeHasHeightProps = false;\n            if (LanduseTypesList[type].height) {\n                typeHasHeightProps = true;\n            }\n\n            iconsArr.push(\n                <div key={Math.random()}>\n                    <ListItem\n                        alignItems=\"flex-start\"\n                        button\n                        variant=\"raised\"\n                        selected={selected}\n                        onClick={(event) =>\n                            handleListItemClick(\n                                event,\n                                type,\n                                LanduseTypesList[type]\n                            )\n                        }\n                    >\n                        <ListItemAvatar>\n                            <Avatar\n                                style={{\n                                    backgroundColor: rgbCol,\n                                    color: \"black\",\n                                }}\n                            >\n                                {type.charAt(0)}\n                            </Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText primary={type} />\n                    </ListItem>\n\n                    <Collapse in={selected}>\n                        <Box spacing={1} p={1} m={1}>\n                            <Card elevation={15}>\n                                <CardContent>\n                                    <Typography variant=\"h5\">\n                                        Type Information\n                                    </Typography>\n\n                                    {description && (\n                                        <Typography variant=\"caption\">\n                                            {description}\n                                        </Typography>\n                                    )}\n                                    <Box spacing={1} p={1} m={1} />\n                                    <Grid container spacing={3}>\n                                        <Grid\n                                            item\n                                            xs={6}\n                                            l={6}\n                                            md={6}\n                                            xl={6}\n                                            container\n                                        >\n                                            {LBCS && (\n                                                <>\n                                                    <Typography variant=\"caption\">\n                                                        LBCS\n                                                    </Typography>\n\n                                                    <TypeInfo typeInfo={LBCS} />\n                                                </>\n                                            )}\n                                        </Grid>\n                                        <Grid\n                                            item\n                                            xs={6}\n                                            l={6}\n                                            md={6}\n                                            xl={6}\n                                            container\n                                        >\n                                            {NAICS && (\n                                                <>\n                                                    <Typography variant=\"caption\">\n                                                        NAICS\n                                                    </Typography>\n                                                    <TypeInfo\n                                                        typeInfo={NAICS}\n                                                    />\n                                                </>\n                                            )}\n                                        </Grid>\n\n                                        {typeHasHeightProps && (\n                                            <>\n                                                <Grid\n                                                    item\n                                                    xs={10}\n                                                    l={10}\n                                                    md={10}\n                                                    xl={10}\n                                                    container\n                                                >\n                                                    <Typography gutterBottom>\n                                                        Set Height\n                                                    </Typography>\n\n                                                    <Slider\n                                                        value={height}\n                                                        valueLabelDisplay=\"auto\"\n                                                        onChange={(\n                                                            event,\n                                                            value\n                                                        ) =>\n                                                            dispatch(\n                                                                listenToEditMenu(\n                                                                    {\n                                                                        ...selectedType,\n                                                                        height: value,\n                                                                    }\n                                                                )\n                                                            )\n                                                        }\n                                                        getAriaLabel={(index) =>\n                                                            index.toString()\n                                                        }\n                                                        min={marks[0].value}\n                                                        max={marks[1].value}\n                                                        marks={marks}\n                                                    />\n                                                </Grid>\n                                            </>\n                                        )}\n                                    </Grid>\n                                </CardContent>\n                            </Card>\n                        </Box>\n                    </Collapse>\n\n                    <Divider />\n                </div>\n            );\n        });\n        return <List>{iconsArr}</List>;\n    };\n\n    return <>{createTypesIcons(props.cityioData.GEOGRID.properties.types)}</>;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { DiscreteColorLegend } from \"react-vis\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// ! https://github.com/uber/react-vis/blob/premodern/showcase/legends/searchable-discrete-color.js\n\nexport default function ABMLegend(props) {\n    const tripsAttr = props.trips.tripsData;\n    const modes = tripsAttr.mode;\n    const profiles = tripsAttr.profile;\n\n    const prepareLegendData = (string) => {\n        let data = string === \"mode\" ? modes : profiles;\n\n        let legendData = [];\n        for (const key in data) {\n            legendData.push({ title: data[key].name, color: data[key].color });\n        }\n        return legendData;\n    };\n\n    return (\n        <>\n            <Typography variant=\"h6\" gutterBottom>\n                {props.tripTypeValue === \"mode\" ? \"Mode Choise\" : \"Profiles \"}\n            </Typography>\n            <DiscreteColorLegend\n                height={300}\n                width={150}\n                items={prepareLegendData(props.tripTypeValue)}\n            />\n        </>\n    );\n}\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    listenToSlidersEvents,\n    listenToABMmode,\n} from \"../../../../../redux/actions\";\nimport ABMLegend from \"./ABMLegend\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst marks = [\n    {\n        value: 0,\n        label: \"12AM\",\n    },\n    {\n        value: 21600,\n        label: \"6AM\",\n    },\n    {\n        value: 43200,\n        label: \"12PM\",\n    },\n    {\n        value: 64800,\n        label: \"6PM\",\n    },\n    {\n        value: 86400,\n        label: \"12AM\",\n    },\n];\n\nfunction ABMSubmenu(props) {\n    const classes = useStyles();\n    const sliders = useSelector((state) => state.SLIDERS);\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const handleSetSpeedValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                speed: newValue,\n            })\n        );\n    };\n\n    const [tripTypeValue, settripTypeValue] = React.useState(\"mode\");\n\n    const handleABMmodeChange = (event) => {\n        dispatch(listenToABMmode(event.target.value));\n        settripTypeValue(event.target.value);\n    };\n\n    return (\n        <div className={classes.root}>\n            <FormControl component=\"fieldset\">\n                <RadioGroup\n                    aria-label=\"tripType\"\n                    name=\"tripType\"\n                    value={tripTypeValue}\n                    onChange={handleABMmodeChange}\n                >\n                    <FormControlLabel\n                        value=\"mode\"\n                        control={<Radio />}\n                        label=\"Mode Choice\"\n                    />\n                    <FormControlLabel\n                        value=\"profile\"\n                        control={<Radio />}\n                        label=\"Profile\"\n                    />\n                </RadioGroup>\n            </FormControl>\n\n            <ABMLegend trips={props} tripTypeValue={tripTypeValue} />\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Simulation Range\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n            <Typography\n                className={classes.subtitle2}\n                variant=\"subtitle2\"\n                id=\"continuous-slider\"\n                gutterBottom\n            >\n                Simulation Speed\n            </Typography>\n            <Slider\n                min={0}\n                max={100}\n                value={sliders.speed}\n                onChange={handleSetSpeedValue}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"continuous-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ABMSubmenu;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../../redux/actions\";\n\nfunction ShadowSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector((state) => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\",\n        },\n        {\n            value: 21600,\n            label: \"6AM\",\n        },\n        {\n            value: 43200,\n            label: \"12PM\",\n        },\n        {\n            value: 64800,\n            label: \"6PM\",\n        },\n        {\n            value: 86400,\n            label: \"12AM\",\n        },\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Time of day\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ShadowSubmenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { listenToAccessToggle } from \"../../../../../redux/actions\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { ContinuousColorLegend } from \"react-vis\";\n\nimport settings from \"../../../../../settings/settings.json\";\n\nfunction AccessSubmenu(props) {\n    const accessToggle = useSelector((state) => state.ACCESS_TOGGLE);\n\n    const { cityioData } = props;\n\n    const ACCESS_PROPERTIES =\n        cityioData && cityioData.access && cityioData.access.properties\n            ? cityioData.access.properties\n            : [];\n\n    const dispatch = useDispatch();\n    const c = settings.map.layers.heatmap.colors;\n    const l = c.length - 1;\n    return (\n        <List>\n            <ListItem>\n                <ContinuousColorLegend\n                    width={500}\n                    startColor={\n                        \"rgb(\" + c[0][0] + \",\" + c[0][1] + \",\" + c[0][2] + \")\"\n                    }\n                    endColor={\n                        \"rgb(\" + c[l][0] + \",\" + c[l][1] + \",\" + c[l][2] + \")\"\n                    }\n                    startTitle=\"No Access\"\n                    endTitle=\"Full Access\"\n                />\n            </ListItem>\n            {ACCESS_PROPERTIES.map((p, i) => (\n                <ListItem key={p}>\n                    <ListItemText\n                        primary={p}\n                        style={{ textTransform: \"capitalize\" }}\n                    />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            checked={accessToggle === i}\n                            onChange={() => {\n                                dispatch(listenToAccessToggle(i));\n                            }}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AccessSubmenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport settings from \"../../../../settings/settings.json\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ABMSubmenu from \"./ABMSubmenu\";\nimport ShadowSubmenu from \"./ShadowSubmenu\";\nimport AccessSubmenu from \"./AccessSubmenu\";\nimport Switch from \"@material-ui/core/Switch\";\n\nfunction TogglesMenu(props) {\n    const { handleToggle } = props;\n\n    const { menuState, cityioData } = useSelector((state) => ({\n        menuState: state.MENU,\n        cityioData: state.CITYIO,\n    }));\n\n    const togglesMeta = settings.menu.toggles;\n    const listOfToggles = Object.keys(togglesMeta);\n\n    /**\n     * gets props with initial menu state\n     * and turn on the layer on init\n     */\n    let togglesCompsArray = [];\n    // array of loaded API modules\n    const loadedModules = Object.keys(cityioData);\n    // create each toggle\n    for (let i = 0; i < listOfToggles.length; i++) {\n        // check if the mdoule of this toggle\n        // was loaded on the API\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\n\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\n\n        if (loadedModules.includes(requireModule) || requireModule === false) {\n            const thisToggle = (\n                <div key={listOfToggles[i]}>\n                    <ListItem>\n                        <Switch\n                            edge=\"start\"\n                            onChange={handleToggle(listOfToggles[i])}\n                            checked={checked}\n                        />\n                        <ListItemText\n                            primary={togglesMeta[listOfToggles[i]].displayName}\n                        />\n                    </ListItem>\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"SHADOWS\" && (\n                            <Collapse in={checked}>\n                                <ShadowSubmenu />\n                            </Collapse>\n                        )\n                    }\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"ABM\" && (\n                            <Collapse in={checked}>\n                                <ABMSubmenu tripsData={cityioData.ABM2.attr} />\n                            </Collapse>\n                        )\n                    }\n                    {listOfToggles[i] === \"ACCESS\" && (\n                        <Collapse\n                            in={checked}\n                            style={{\n                                marginLeft: 24,\n                            }}\n                        >\n                            <AccessSubmenu cityioData={cityioData} />\n                        </Collapse>\n                    )}\n                </div>\n            );\n            togglesCompsArray.push(thisToggle);\n        }\n    }\n\n    return <List>{togglesCompsArray}</List>;\n}\n\nexport default TogglesMenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLoadingState } from \"../../../../../../redux/actions\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport axios from \"axios\";\nimport {\n    Button,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from \"@material-ui/core\";\n\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\n\nexport default function SaveAsScenario(props) {\n    const maxNumOfScenarios = 10;\n    const [open, setOpen] = React.useState(false);\n    const [name, setName] = React.useState(\"\");\n    const dispatch = useDispatch();\n    const { tableName, toggleDrawer } = props;\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n\n    const getScenarioIndex = () => {\n        var getURL = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const metaDataKeys = Object.keys(res.data);\n                const scenarioIndices = metaDataKeys\n                    .filter((str) => str.includes(\"scenarios\"))\n                    .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n                console.log(\"successfully got scenarios\");\n                const newScenarioIndex = scenarioIndices.length\n                    ? Math.max(...scenarioIndices) + 1\n                    : 0;\n                postScenario(newScenarioIndex);\n            })\n            .catch((err) => {\n                console.log(\"Error getting scenarios\", err);\n            });\n    };\n\n    const postScenario = (id) => {\n        const data = {\n            GEOGRIDDATA: cityioData.GEOGRIDDATA,\n            info: {\n                id,\n                name,\n            },\n        };\n\n        var postURL =\n            settings.cityIO.baseURL + \"update/\" + tableName + \"/scenarios\" + id;\n\n        const options = {\n            method: \"post\",\n            url: postURL,\n            data,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                console.log(\"Successfully saved grid data and network\");\n                dispatch(setLoadingState(false));\n                toggleDrawer();\n                handleClose();\n            })\n            .catch((error) => {\n                console.log(\"%c\" + error);\n                console.log(\"ERROR:\", error);\n                handleClose();\n            });\n    };\n\n    return (\n        <>\n            <Button\n                disabled={scenarioNames.length >= maxNumOfScenarios}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleClickOpen}\n                startIcon={<CloudUploadIcon />}\n            >\n                Save Scenario\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Save Scenario</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Name:</DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        fullWidth\n                        value={name}\n                        onChange={(event) => setName(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"default\">\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            dispatch(setLoadingState(true));\n                            getScenarioIndex();\n                        }}\n                        color=\"default\"\n                    >\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    setScenarioNames,\n    setLoadingState,\n} from \"../../../../../../redux/actions\";\nimport axios from \"axios\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport { ListItem, Button, Typography, List } from \"@material-ui/core\";\nimport { _postMapEditsToCityIO } from \"../../../../../../utils/utils\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { getScenarioIndices } from \"../../../../CityIO/utils\";\n\nfunction ScenarioItems(props) {\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n    const dispatch = useDispatch();\n\n    const getScenario = (tableName, id) => {\n        const getURL = settings.cityIO.baseURL + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const { GEOGRIDDATA } = res.data;\n                _postMapEditsToCityIO(\n                    GEOGRIDDATA,\n                    cityioData.tableName,\n                    \"/GEOGRIDDATA\"\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const deleteScenario = (tableName, id) => {\n        const getURL =\n            settings.cityIO.baseURL + \"clear/\" + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                getScenarioIndices(\n                    cityioData.tableName,\n                    (data) => dispatch(setScenarioNames(data)),\n                    (state) => dispatch(setLoadingState(state))\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const generateListItems = () =>\n        scenarioNames.map((scenario) => (\n            <ListItem key={scenario.id}>\n                <Button\n                    style={{ textTransform: \"none\" }}\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        getScenario(cityioData.tableName, scenario.id);\n                    }}\n                >\n                    <Typography variant=\"h6\">{scenario.name}</Typography>\n                </Button>\n                <Button\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        deleteScenario(cityioData.tableName, scenario.id);\n                    }}\n                >\n                    <CancelIcon />\n                </Button>\n            </ListItem>\n        ));\n\n    return <List>{generateListItems()}</List>;\n}\n\nexport default ScenarioItems;\n","import React from \"react\";\nimport SaveAsScenario from \"./components/SaveAsScenario\";\nimport ScenarioItems from \"./components/ScenarioItems\";\nimport { List, ListItem, Divider } from \"@material-ui/core\";\n\nexport default function SaveMenu(props) {\n    const { tableName } = props;\n\n    return (\n        <List>\n            <ListItem>\n                <SaveAsScenario tableName={tableName} />\n            </ListItem>\n            <ListItem>\n                <Divider />\n            </ListItem>\n            <ListItem>\n                <ScenarioItems />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToMenuUI } from \"../../../redux/actions\";\nimport EditMenu from \"./EditMenu\";\nimport TogglesMenu from \"./TogglesMenu\";\nimport SaveMenu from \"./SaveMenu\";\nimport { Button, Typography, List, ListItem } from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\n\nfunction MenuContainer(props) {\n    const { tableName } = props;\n    const menuState = useSelector((state) => state.MENU);\n    const dispatch = useDispatch();\n\n    const handleToggle = (value) => () => {\n        const i = menuState.indexOf(value);\n        const updatedMenuState = [...menuState];\n        if (i === -1) {\n            updatedMenuState.push(value);\n        } else {\n            updatedMenuState.splice(i, 1);\n        }\n\n        dispatch(listenToMenuUI(updatedMenuState));\n    };\n\n    return (\n        <>\n            <List>\n                <ListItem>\n                    <Typography variant={\"h2\"}>Grid Edit</Typography>\n                </ListItem>\n                <ListItem>\n                    <Button\n                        startIcon={\n                            menuState.includes(\"EDIT\") ? (\n                                <>\n                                    <CloudUploadIcon />\n                                    Send to cityIO\n                                </>\n                            ) : (\n                                <>\n                                    <EditIcon />\n                                    Edit Mode\n                                </>\n                            )\n                        }\n                        color=\"default\"\n                        onClick={handleToggle(\"EDIT\")}\n                    ></Button>\n                </ListItem>\n\n                <EditMenu />\n\n                <ListItem>\n                    <Typography variant={\"h2\"}>Scenarios</Typography>\n                </ListItem>\n                <ListItem>\n                    <SaveMenu\n                        tableName={tableName}\n                        handleToggle={handleToggle}\n                    />\n                </ListItem>\n                <ListItem>\n                    <Typography variant={\"h2\"}>View Options</Typography>\n                </ListItem>\n                <ListItem>\n                    <Button\n                        startIcon={\n                            <>\n                                <NavigationIcon />\n                                Reset View\n                            </>\n                        }\n                        color=\"default\"\n                        onClick={handleToggle(\"RESET_VIEW\")}\n                    />\n                </ListItem>\n            </List>\n\n            <TogglesMenu handleToggle={handleToggle} />\n        </>\n    );\n}\n\nexport default MenuContainer;\n","import React from \"react\";\nimport { testHex, hexToRgb } from \"../../../../../utils/utils\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \"Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 10,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}:\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    return (\n        <div\n            style={{\n                borderRadius: \"10%\",\n                position: \"fixed\",\n                pointerEvents: \"none\",\n                backgroundColor: \"rgba(0,0,0,0.5)\",\n                padding: \"1vw\",\n                color: \"rgba(255,255,255,0.9)\",\n                zIndex: 10,\n                left: mousePos.clientX,\n                top: mousePos.clientY,\n                fontFamily:'monospace',\n                fontSize: \"0.65em\",\n                fontWeight: 500,\n            }}\n        >\n            <p>\n                Type:\n                {props.hoveredObj.object.properties.name}\n            </p>\n            <p>\n                Floors:\n                {props.hoveredObj.object.properties.height}\n            </p>\n            <p>\n                ID:\n                {props.hoveredObj.object.properties.id}\n            </p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { PaintBrush } from \"./PaintBrush\";\nimport { CellMeta } from \"../CellMeta\";\n\nexport default function PaintBrushContainer({\n    editOn,\n    mousePos,\n    selectedType,\n    pickingRadius,\n    mouseDown,\n    hoveredObj,\n}) {\n    if (editOn) {\n        return (\n            selectedType && (\n                <PaintBrush\n                    mousePos={mousePos}\n                    selectedType={selectedType}\n                    divSize={pickingRadius}\n                    mouseDown={mouseDown}\n                    hoveredCells={hoveredObj}\n                />\n            )\n        );\n    } else {\n        return (\n            hoveredObj && (\n                <CellMeta mousePos={mousePos} hoveredObj={hoveredObj} />\n            )\n        );\n    }\n}\n","import { Component } from \"react\";\n\nclass AnimationComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.animationFrame = null;\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    _animate() {\n        const {\n            toggles: { rotateOn, ABMOn },\n            state: { viewState, sliders },\n            updaters: { listenToSlidersEvents, sunEffects, setViewState },\n            dispatch,\n        } = this.props;\n        if (rotateOn) {\n            let bearing = viewState.bearing ? viewState.bearing : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            setViewState({\n                ...viewState,\n                bearing: bearing,\n            });\n        }\n\n        if (ABMOn) {\n            const time = sliders.time[1];\n            const speed = sliders.speed;\n            const startHour = sliders.time[0];\n            const endHour = sliders.time[2];\n\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n\n            dispatch(\n                listenToSlidersEvents({\n                    ...sliders,\n                    time: [sliders.time[0], t, sliders.time[2]],\n                })\n            );\n\n            // update sun position\n            if (sunEffects) {\n                sunEffects.updateSunDirection(t);\n            }\n        }\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default AnimationComponent;\n","import { HeatmapLayer } from \"deck.gl\";\nimport settings from \"../../../../settings/settings.json\";\n\nexport default function AccessLayer({ data, accessToggle }) {\n    return new HeatmapLayer({\n        id: \"ACCESS\",\n        colorRange: settings.map.layers.heatmap.colors,\n        radiusPixels: 200,\n        opacity: 0.5,\n        threshold: 0.5,\n        data,\n        getPosition: (d) => d.coordinates,\n        getWeight: (d) => d.values[accessToggle],\n        updateTriggers: {\n            getWeight: [accessToggle],\n        },\n    });\n}\n","import { PathLayer } from \"deck.gl\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nexport default function AggregatedTripsLayer({ data, cityioData, ABMmode }) {\n    return new PathLayer({\n        id: \"AGGREGATED_TRIPS\",\n        _shadow: false,\n        data,\n        getPath: (d) => {\n            const noisePath =\n                Math.random() < 0.5\n                    ? Math.random() * 0.00005\n                    : Math.random() * -0.00005;\n            for (let i in d.path) {\n                d.path[i][0] = d.path[i][0] + noisePath;\n                d.path[i][1] = d.path[i][1] + noisePath;\n                d.path[i][2] = d.mode[0] * 2;\n            }\n            return d.path;\n        },\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n        opacity: 0.2,\n        getWidth: 1.5,\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\n//  * remap line width\nconst _remapValues = (value) => {\n    let remap =\n        value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n    return remap;\n};\n\nexport default function ABMLayer({\n    data,\n    cityioData,\n    ABMmode,\n    zoomLevel,\n    sliders,\n}) {\n    return new TripsLayer({\n        id: \"ABM\",\n        data,\n        getPath: (d) => d.path,\n        getTimestamps: (d) => d.timestamps,\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n\n        getWidth: 1,\n        widthScale: _remapValues(zoomLevel),\n        opacity: 0.8,\n        rounded: true,\n        trailLength: 500,\n        currentTime: sliders.time[1],\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { GeoJsonLayer } from \"deck.gl\";\nimport { _handleGridcellEditing } from \"../../../../utils/utils\";\n\nexport default function GridLayer({\n    data,\n    editOn,\n    state: { selectedType, keyDownState, selectedCellsState, pickingRadius },\n    updaters: { setSelectedCellsState, setDraggingWhileEditing, setHoveredObj },\n    deckGL,\n}) {\n    return new GeoJsonLayer({\n        id: \"GRID\",\n        data,\n        pickable: true,\n        extruded: true,\n        wireframe: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 2,\n        getElevation: (d) => d.properties.height,\n        getFillColor: (d) => d.properties.color,\n\n        onClick: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDrag: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDragStart: () => {\n            if (selectedType && editOn && keyDownState !== \"Shift\") {\n                setDraggingWhileEditing(true);\n            }\n        },\n\n        onHover: (e) => {\n            if (e.object) {\n                setHoveredObj(e);\n            }\n        },\n\n        onDragEnd: () => {\n            setDraggingWhileEditing(false);\n        },\n        updateTriggers: {\n            getFillColor: selectedCellsState,\n            getElevation: selectedCellsState,\n        },\n        transitions: {\n            getFillColor: 500,\n            getElevation: 500,\n        },\n    });\n}\n","import { TextLayer } from \"@deck.gl/layers\";\n\nexport default function TextualLayer({ data, coordinates }) {\n    /*\n     * this layer takes textual layer procuded by a 3rd party\n     * module, and renders a text message near the grid cell\n     * defined in the data id attribute.\n     *\n     * data format:\n      [\n      {\"id\": 0, \"info\": \"yes!\" },   {\"id\": 10, \"info\": \"I'm on ID 10!\" }\n      ]\n     *\n     * coordinates format:\n     [\n       {\"info\": \"yes!\", coordinates: [-122.466233, 37.684638]},\n     ]\n     */\n\n    if (data && coordinates && coordinates.features) {\n        let textLayerData = [];\n\n        data.forEach((infoIteam) => {\n            textLayerData.push({\n                coordinates: [\n                    coordinates.features[infoIteam.id].geometry\n                        .coordinates[0][0][0],\n                    coordinates.features[infoIteam.id].geometry\n                        .coordinates[0][0][1],\n                    100,\n                ],\n                info: infoIteam.info,\n            });\n        });\n\n        return new TextLayer({\n            id: \"text-layer\",\n            data: textLayerData,\n            pickable: true,\n            getPosition: (d) => d.coordinates,\n            getText: (d) => d.info,\n            getColor: [255, 255, 255],\n            getSize: 30,\n            getAngle: 0,\n            getTextAnchor: \"middle\",\n            getAlignmentBaseline: \"center\",\n        });\n    }\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport PaintBrush from \"./components/PaintBrush\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../redux/actions\";\nimport {\n    _proccessAccessData,\n    _proccessGridData,\n    _postMapEditsToCityIO,\n} from \"../../../utils/utils\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport settings from \"../../../settings/settings.json\";\nimport AnimationComponent from \"./components/AnimationComponent\";\nimport { updateSunDirection, _setupSunEffects } from \"../../../utils/utils\";\nimport {\n    AccessLayer,\n    AggregatedTripsLayer,\n    ABMLayer,\n    GridLayer,\n    TextualLayer,\n} from \"./deckglLayers\";\n\nexport default function Map() {\n    const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n    const [selectedCellsState, setSelectedCellsState] = useState(null);\n    const [viewState, setViewState] = useState(settings.map.initialViewState);\n    const [keyDownState, setKeyDownState] = useState(null);\n    const [mousePos, setMousePos] = useState(null);\n    const [mouseDown, setMouseDown] = useState(null);\n    const [hoveredObj, setHoveredObj] = useState(null);\n    const [access, setAccess] = useState(null);\n    const [textualData, setTextualData] = useState(null);\n    const [GEOGRID, setGEOGRID] = useState(null);\n    const [ABM, setABM] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const effectsRef = useRef();\n    const deckGL = useRef();\n\n    const dispatch = useDispatch();\n\n    const pickingRadius = 40;\n\n    const [\n        cityioData,\n        sliders,\n        menu,\n        accessToggle,\n        selectedType,\n        ABMmode,\n    ] = useSelector((state) => [\n        state.CITYIO,\n        state.SLIDERS,\n        state.MENU,\n        state.ACCESS_TOGGLE,\n        state.SELECTED_TYPE,\n        state.ABM_MODE,\n    ]);\n\n    var ABMOn = menu.includes(\"ABM\");\n    var rotateOn = menu.includes(\"ROTATE\");\n    var shadowsOn = menu.includes(\"SHADOWS\");\n    var editOn = menu.includes(\"EDIT\");\n    var resetViewOn = menu.includes(\"RESET_VIEW\");\n\n    useEffect(() => {\n        // fix deck view rotate\n        _rightClickViewRotate();\n        // setup sun effects\n        _setupSunEffects(effectsRef, cityioData.GEOGRID.properties.header);\n        // zoom map on CS table location\n        _setViewStateToTableHeader();\n        setLoaded(true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (!loaded) return;\n        updateSunDirection(sliders.time[1], effectsRef);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sliders.time]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        let shadowColor = shadowsOn ? [0, 0, 0, 0.5] : [0, 0, 0, 0];\n        effectsRef.current[0].shadowColor = shadowColor;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [shadowsOn]);\n\n    useEffect(() => {\n        setGEOGRID(_proccessGridData(cityioData));\n\n        if (cityioData.access) {\n            setAccess(_proccessAccessData(cityioData));\n        }\n\n        if (cityioData.textual) {\n            setTextualData(cityioData.textual);\n        }\n\n        if (cityioData.ABM2) {\n            setABM(cityioData.ABM2);\n        }\n    }, [cityioData]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        if (!editOn) {\n            let dataProps = [];\n\n            for (let i = 0; i < GEOGRID.features.length; i++) {\n                dataProps[i] = GEOGRID.features[i].properties;\n            }\n            _postMapEditsToCityIO(\n                dataProps,\n                cityioData.tableName,\n                \"/GEOGRIDDATA\"\n            );\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [editOn]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        _setViewStateToTableHeader();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [resetViewOn]);\n\n    const onViewStateChange = ({ viewState }) => {\n        setViewState(viewState);\n    };\n\n    // /**\n    //  * resets the camera viewport\n    //  * to cityIO header data\n    //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n    //  */\n    const _setViewStateToTableHeader = () => {\n        const header = cityioData.GEOGRID.properties.header;\n\n        setViewState({\n            ...viewState,\n            longitude: header.longitude,\n            latitude: header.latitude,\n            zoom: 15,\n            pitch: 0,\n            bearing: 360 - header.rotation,\n            orthographic: true,\n        });\n    };\n\n    // /**\n    //  * Description. fix deck issue\n    //  * with rotate right botton\n    //  */\n    const _rightClickViewRotate = () => {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    };\n\n    const layersKey = {\n        ABM: ABMLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n            zoomLevel: viewState.zoom,\n            sliders,\n        }),\n        AGGREGATED_TRIPS: AggregatedTripsLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n        }),\n        GRID: GridLayer({\n            data: GEOGRID,\n            editOn: menu.includes(\"EDIT\"),\n            state: {\n                selectedType,\n                keyDownState,\n                selectedCellsState,\n                pickingRadius,\n            },\n            updaters: {\n                setSelectedCellsState,\n                setDraggingWhileEditing,\n                setHoveredObj,\n            },\n            deckGL,\n        }),\n        ACCESS: AccessLayer({\n            data: access,\n            accessToggle,\n        }),\n        TEXTUAL: TextualLayer({\n            data: textualData && textualData,\n            coordinates: GEOGRID,\n        }),\n    };\n\n    const layerOrder = [\"TEXTUAL\", \"ABM\", \"AGGREGATED_TRIPS\", \"GRID\", \"ACCESS\"];\n\n    const _renderLayers = () => {\n        let layers = [];\n        for (var layer of layerOrder) {\n            if (menu.includes(layer)) {\n                layers.push(layersKey[layer]);\n            }\n        }\n        return layers;\n    };\n\n    return (\n        <div\n            className=\"baseMap\"\n            onKeyDown={(e) => {\n                setKeyDownState(e.nativeEvent.key);\n            }}\n            onKeyUp={() => setKeyDownState(null)}\n            onMouseMove={(e) => setMousePos(e.nativeEvent)}\n            onMouseUp={() => setMouseDown(false)}\n            onMouseDown={() => setMouseDown(true)}\n        >\n            <PaintBrush\n                editOn={editOn}\n                mousePos={mousePos}\n                selectedType={selectedType}\n                pickingRadius={pickingRadius}\n                mouseDown={mouseDown}\n                hoveredObj={hoveredObj}\n            />\n            <AnimationComponent\n                toggles={{ ABMOn, rotateOn }}\n                state={{ sliders, viewState }}\n                updaters={{\n                    listenToSlidersEvents,\n                    updateSunDirection,\n                    setViewState,\n                }}\n                dispatch={dispatch}\n            />\n\n            <DeckGL\n                ref={deckGL}\n                viewState={viewState}\n                onViewStateChange={onViewStateChange}\n                layers={_renderLayers()}\n                effects={effectsRef.current}\n                controller={{\n                    touchZoom: true,\n                    touchRotate: true,\n                    dragPan: !draggingWhileEditing,\n                    dragRotate: !draggingWhileEditing,\n                    keyboard: false,\n                }}\n            >\n                <StaticMap\n                    asyncRender={false}\n                    dragRotate={true}\n                    reuseMaps={true}\n                    mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                    mapStyle={settings.map.mapStyle.sat}\n                    preventStyleDiffing={true}\n                />\n            </DeckGL>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\n\nconst LoadingSpinner = () => {\n    const [loadingModules] = useSelector((state) => [state.LOADING_MODULES]);\n\n    return (\n        <>\n            {loadingModules.map((module, index) => {\n                return (\n                    <Box\n                        position=\"fixed\"\n                        bottom={index * 50}\n                        right=\"2vw\"\n                        width=\"10vw\"\n                        zIndex=\"101\"\n                        margin=\"0\"\n                        key={module}\n                    >\n                        <LinearProgress color={'secondary'} />\n                        <Typography\n                            variant=\"h6\"\n                            color=\"primary\"\n                            style={{ marginRight: \"10px\" }}\n                        >\n                            {module}\n                        </Typography>\n                    </Box>\n                );\n            })}\n        </>\n    );\n};\n\nexport default LoadingSpinner;\n","import React from \"react\";\n\nimport { Box, Container, Typography } from \"@material-ui/core\";\n\nconst MissingTableInfo = () => {\n    return (\n        <Container maxWidth=\"md\">\n            <Box mt={\"3em\"} />\n            <Typography color=\"textPrimary\" variant=\"h1\">\n                CityScopeJS\n            </Typography>\n            <Box mt={\"3em\"} />\n            <Typography color=\"textPrimary\" variant=\"h5\">\n                Enter your CityScopeJS project name in the search bar:\n            </Typography>\n            <Typography variant=\"h5\" color=\"textSecondary\">\n                (this page URL)/CS_CityScopeJS/?cityscope=projectName\n            </Typography>\n            <Box mt={\"3em\"} />\n        </Container>\n    );\n};\n\nexport default MissingTableInfo;\n","import React, { useState, useEffect } from \"react\";\nimport { CircularGridLines, RadarChart, DiscreteColorLegend } from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport \"./Radar.css\";\n\nconst radarSize = 300;\nconst colorRange = [\"#ff5278\", \"#660016\"];\n\nexport default function Radar(props) {\n    const [radarData, setRadarData] = useState(null);\n\n    const createRadarData = (indicators) => {\n        let r = {};\n        let f = {};\n        let domains = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"radar\") {\n                r[indicators[i].name] = [indicators[i].value];\n                f[indicators[i].name] = [indicators[i].ref_value];\n                indicators[i].domain = [0, 1];\n                domains.push(indicators[i]);\n            }\n        }\n        return { radarData: [r, f], domains: domains };\n    };\n\n    useEffect(() => {\n        if (\n            props &&\n            props.cityioData &&\n            props.cityioData.indicators &&\n            props.cityioData.indicators.length > 0\n        ) {\n            const d = createRadarData(props.cityioData.indicators);\n            setRadarData(d);\n        }\n    }, [props]);\n\n    return (\n        <div>\n            {radarData && radarData.domains && (\n                <>\n                    <RadarChart\n                        className=\"Radar blur\"\n                        animation\n                        data={radarData.radarData}\n                        domains={radarData.domains}\n                        colorRange={colorRange}\n                        style={{\n                            polygons: {\n                                fillOpacity: 0.2,\n                                strokeWidth: 2,\n                            },\n                            axes: {\n                                text: {\n                                    opacity: 0,\n                                    fontWeight: 700,\n                                    fill: \"white\",\n                                    fontFamily: \"Roboto Mono\",\n                                },\n                                strokeWidth: 0,\n                            },\n                            labels: {\n                                fontFamily: \"Roboto Mono\",\n\n                                textAnchor: \"middle\",\n                                fontSize: 10,\n                                fill: \"white\",\n                            },\n                        }}\n                        margin={{\n                            left: radarSize / 6,\n                            top: radarSize / 6,\n                            bottom: radarSize / 6,\n                            right: radarSize / 6,\n                        }}\n                        width={radarSize}\n                        height={radarSize}\n                    >\n                        <CircularGridLines\n                            style={{\n                                fill: \"white\",\n                                fillOpacity: 0.1,\n                                backgroundColor: \"#FFF\",\n                                opacity: 0.5,\n                                stroke: \"white\",\n                                width: 0.1,\n                            }}\n                            tickValues={[...new Array(11)].map(\n                                (v, i) => i / 10 - 1\n                            )}\n                        />\n                    </RadarChart>\n                    <DiscreteColorLegend\n                        items={[\"Design\", \"Reference\"]}\n                        colors={colorRange}\n                        style={{\n                            fontFamily: \"Roboto Mono\",\n                        }}\n                    />\n                </>\n            )}\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalBarSeries,\n} from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport { Typography, Box } from \"@material-ui/core\";\n\nexport default function BarChart(props) {\n    const radarSize = 250;\n\n    /**\n   data format \n    [\n    { x: 2, y: 10 },\n    { x: 4, y: 5 },\n    { x: 12, y: 15 },\n    ]\n     */\n\n    const [barChartData, setBarChartData] = useState(null);\n    const [hoveredNode, setHoveredNode] = useState(null);\n\n    useEffect(() => {\n        if (\n            props &&\n            props.cityioData &&\n            props.cityioData.indicators &&\n            props.cityioData.indicators.length > 0\n        ) {\n            const d = generateData(props.cityioData.indicators);\n\n            setBarChartData(d.barChartData);\n        }\n    }, [props]);\n\n    const generateData = (indicators) => {\n        let dataArr = [];\n\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"bar\") {\n                dataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].value,\n                });\n            }\n        }\n\n        return {\n            barChartData: dataArr,\n        };\n    };\n\n    return (\n        <>\n            {barChartData && (\n                <>\n                    <Box flexDirection=\"column\">\n                        <Box alignContent=\"center\" p={3}>\n                            <FlexibleWidthXYPlot\n                                opacity={0.2}\n                                xType=\"ordinal\"\n                                width={radarSize}\n                                height={radarSize}\n                                stackBy=\"y\"\n                                yDomain={[0, 1]}\n                            >\n                                <XAxis\n                                    style={{\n                                        text: {\n                                            fill: \"#FFF\",\n                                            fontFamily: \"Roboto Mono\",\n                                        },\n                                    }}\n                                    tickLabelAngle={90}\n                                />\n                                <YAxis style={{ text: { fill: \"#FFF\" } }} />\n                                <VerticalBarSeries\n                                    animation={true}\n                                    onValueMouseOver={(d) => {\n                                        setHoveredNode(d);\n                                    }}\n                                    data={barChartData}\n                                />\n                            </FlexibleWidthXYPlot>\n                        </Box>\n                        <Box alignContent=\"center\">\n                            {hoveredNode && (\n                                <>\n                                    <Typography variant=\"caption\" gutterBottom>\n                                        {hoveredNode.x}\n                                    </Typography>\n                                    <Box m={3} />\n                                    <Typography gutterBottom>\n                                        {hoveredNode.y}\n                                    </Typography>\n                                </>\n                            )}\n                        </Box>\n                    </Box>\n                </>\n            )}\n        </>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { rgbToHex } from \"../../../../utils/utils\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\n\nexport default function AreaCalc(props) {\n    const radialRadius = 250;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n    const [areaData, setAreaData] = useState(null);\n\n    useEffect(() => {\n        const calcArea = () => {\n            let gridProps = props.cityioData.GEOGRID.properties;\n            let cellSize = gridProps.header.cellSize;\n            let geoGridData = props.cityioData.GEOGRIDDATA;\n\n            let calcAreaObj = {};\n            geoGridData.forEach((gridCellData) => {\n                let typeName = gridCellData.name;\n                if (\n                    //    if this type is not null\n                    gridCellData.name !== \"None\"\n                ) {\n                    if (calcAreaObj.hasOwnProperty(typeName)) {\n                        calcAreaObj[typeName].count =\n                            calcAreaObj[typeName].count + 1;\n                        // avoid landuse with no height\n                        let height =\n                            gridCellData.height < 1 ? 1 : gridCellData.height;\n                        calcAreaObj[typeName].area =\n                            calcAreaObj[typeName].area + height * cellSize;\n                    } else {\n                        calcAreaObj[typeName] = {};\n                        calcAreaObj[typeName].area = 0;\n                        calcAreaObj[typeName].count = 0;\n                        calcAreaObj[typeName].name = typeName;\n                        calcAreaObj[typeName].color = rgbToHex(\n                            gridCellData.color[0],\n                            gridCellData.color[1],\n                            gridCellData.color[2]\n                        );\n                    }\n                }\n            });\n            //  convert to react-vis happy data format\n            let radialData = [];\n            for (const k in calcAreaObj) {\n                radialData.push(calcAreaObj[k]);\n            }\n\n            let data = {\n                children: radialData,\n                color: 1,\n            };\n\n            return data;\n        };\n        const d = calcArea();\n        setAreaData(d);\n    }, [props]);\n\n    return (\n        <List>\n            {areaData && areaData.children && (\n                <ListItem alignItems=\"center\">\n                    <RadialChart\n                        colorType=\"literal\"\n                        animation={true}\n                        className={\"donut-chart-example\"}\n                        innerRadius={radialRadius / 2 - radialRadius / 5}\n                        radius={radialRadius / 2}\n                        getLabel={(d) => d.name}\n                        labelsRadiusMultiplier={0.95}\n                        labelsStyle={{\n                            textAnchor: \"middle\",\n                            font: \"sans-serif\",\n                            fontSize: 11,\n                            fill: \"#FFF\",\n                            textShadow: \"2px 2px 2px #000\",\n                            fontFamily: \"Roboto Mono\",\n                        }}\n                        showLabels\n                        getAngle={(d) => d.area}\n                        data={areaData.children}\n                        onValueMouseOver={(evt) => setHoveredRadial(evt)}\n                        onSeriesMouseOut={() => setHoveredRadial(false)}\n                        width={radialRadius}\n                        height={radialRadius}\n                        padAngle={0.01}\n                    >\n                        {hoveredRadial !== false && (\n                            <Hint value={hoveredRadial}>\n                                <div\n                                    style={{\n                                        background: \"rgba(0,0,0,0.8)\",\n                                        fontSize: 14,\n                                    }}\n                                >\n                                    <Typography\n                                        variant={\"caption\"}\n                                        gutterBottom\n                                    >\n                                        Area: {hoveredRadial.area} sqm\n                                    </Typography>\n                                </div>\n                            </Hint>\n                        )}\n                    </RadialChart>\n                </ListItem>\n            )}\n\n            {hoveredRadial.name && (\n                <List>\n                    <ListItem>\n                        <Typography variant=\"caption\">\n                            {hoveredRadial.name}\n                        </Typography>\n                    </ListItem>\n                    <ListItem>\n                        <Typography>{hoveredRadial.area} sqm</Typography>\n                    </ListItem>\n                </List>\n            )}\n        </List>\n    );\n}\n","import React from \"react\";\nimport { List, ListItem, Divider } from \"@material-ui/core\";\nimport Radar from \"./Radar\";\nimport BarChart from \"./BarChart\";\nimport AreaCalc from \"./AreaCalc\";\n\nfunction VisContainer(props) {\n    return (\n        <>\n            {props.cityIOdata && (\n                <List>\n                    <ListItem alignItems=\"center\">\n                        <AreaCalc cityioData={props.cityIOdata} />\n                    </ListItem>\n\n                    <Divider />\n\n                    <ListItem>\n                        <Radar cityioData={props.cityIOdata} />\n                    </ListItem>\n\n                    <Divider />\n\n                    <ListItem>\n                        <BarChart cityioData={props.cityIOdata} />\n                    </ListItem>\n                </List>\n            )}\n        </>\n    );\n}\n\nexport default VisContainer;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport settings from \"../settings/settings.json\";\nimport { Button } from \"@material-ui/core/\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n}));\nexport default function TableNameInput({ setSelectedTable }) {\n    const classes = useStyles();\n    const [tableList, setTableList] = useState();\n\n    // https://stackoverflow.com/a/27098801/860099\n    function strToRemove(str, strToRemove) {\n        let start = str.indexOf(strToRemove);\n        return (\n            str.slice(0, start) +\n            str.slice(start + strToRemove.length, str.length)\n        );\n    }\n\n    useEffect(() => {\n        /**\n         * Gets all tables on init\n         */\n        let buttonsArr = [];\n        const cityIOlistURL = settings.cityIO.ListOfTables;\n        const cityIOtableBaseUrl = settings.cityIO.baseURL;\n\n        axios.get(cityIOlistURL).then((res) => {\n            res.data.forEach((urlStr) => {\n                const tableName = strToRemove(urlStr, cityIOtableBaseUrl);\n                buttonsArr.push(\n                    <Button\n                        key={Math.random()}\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        onClick={() => {\n                            axios\n                                .get(\n                                    cityIOtableBaseUrl +\n                                        tableName +\n                                        \"/\" +\n                                        \"GEOGRID\"\n                                )\n                                .then((res) => {\n                                    if (res.status === 200) {\n                                        setSelectedTable(tableName);\n                                    }\n                                })\n                                .catch((err) => {\n                                    console.log(err);\n                                });\n                        }}\n                    >\n                        {tableName}\n                    </Button>\n                );\n            });\n            setTableList(buttonsArr);\n        });\n    }, [setSelectedTable]);\n\n    return <div className={classes.root}>{tableList}</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CityIO from \"./CityIO/cityIO\";\nimport MenuContainer from \"./MenuContainer\";\nimport MapContainer from \"./DeckglMap\";\nimport LoadingSpinner from \"./CityIO/LoadingSpinner\";\nimport MissingTableInfo from \"../Errors/MissingTableInfo\";\nimport VisContainer from \"./VisContainer\";\nimport TableNameInput from \"../../Components/TableNameInput\";\n\nimport {\n    makeStyles,\n    Grid,\n    Card,\n    CardContent,\n    Container,\n} from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: \"auto\",\n        height: \"100%\",\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n}));\n\nexport default function CityScopeJS() {\n    const classes = useStyles();\n    const [selectedTable, setSelectedTable] = useState(null);\n\n    // get the table name for cityIO comp\n    const [tableName, setTableName] = useState(null);\n    // on init, get the adress URL\n    // to search for  a table\n    useEffect(() => {\n        let url = window.location.toString();\n        let pre = \"cityscope=\";\n        let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length);\n        // check URL for proper CS project link\n        if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\n            setTableName(cityscopePrjName);\n        }\n    }, []);\n\n    useEffect(() => {\n        console.log(selectedTable);\n        if (selectedTable) {\n            let url = window.location.toString();\n            window.location.replace(url + \"?cityscope=\" + selectedTable);\n        }\n    }, [selectedTable]);\n\n    // wait for 'ready' flag from cityIO when app is ready to start\n    const isReady = useSelector((state) => state.READY);\n    const cityIOdata = useSelector((state) => state.CITYIO);\n\n    return (\n        <Page className={classes.root} title=\"CitySCopeJS\">\n            <Container maxWidth={null}>\n                {!isReady && (\n                    <>\n                        <Container maxWidth=\"md\">\n                            <MissingTableInfo />\n                            <TableNameInput\n                                setSelectedTable={setSelectedTable}\n                            />\n                        </Container>\n                    </>\n                )}\n\n                {tableName && <CityIO tableName={tableName} />}\n                {isReady && (\n                    <>\n                        <Grid container spacing={5}>\n                            <Grid item xs={6} l={3} md={3} xl={2} container>\n                                <Grid\n                                    item\n                                    container\n                                    direction=\"column\"\n                                    spacing={2}\n                                >\n                                    <Grid item xs={12} l={12} md={12} xl={12}>\n                                        <Card\n                                            elevation={15}\n                                            style={{\n                                                // allow scrolling\n                                                maxHeight: \"85vh\",\n                                                overflow: \"auto\",\n                                            }}\n                                        >\n                                            <CardContent>\n                                                <MenuContainer\n                                                    tableName={tableName}\n                                                />\n                                            </CardContent>\n                                        </Card>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item xs={6} l={6} md={6} xl={8}>\n                                <Card\n                                    elevation={15}\n                                    style={{\n                                        height: \"85vh\",\n                                        width: \"100%\",\n                                        position: \"relative\",\n                                    }}\n                                >\n                                    <MapContainer />\n                                </Card>\n                            </Grid>\n\n                            <Grid item xs={6} l={3} md={3} xl={2}>\n                                <Card\n                                    elevation={15}\n                                    style={{\n                                        maxHeight: \"85vh\",\n                                        overflow: \"auto\",\n                                    }}\n                                >\n                                    <VisContainer cityIOdata={cityIOdata} />\n                                </Card>\n                            </Grid>\n                        </Grid>\n                    </>\n                )}\n\n                <LoadingSpinner />\n            </Container>\n        </Page>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function GetGITdate() {\n    const [gitMeta, setGitMeta] = useState({\n        author: \"\",\n        branch: \"\",\n        date: \"\",\n        sha: \"\",\n        link: \"\",\n    });\n\n    const URL =\n        \"https://api.github.com/repos/CityScope/CS_cityscopeJS/branches/master\";\n\n    const fetchGitHub = () =>\n        fetch(URL)\n            .then((response) => {\n                response.json().then((json) => {\n                    setGitMeta({\n                        author: json.commit.commit.author.name,\n                        date: json.commit.commit.author.date,\n                        sha: json.commit.sha,\n                    });\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    // run only once\n    useEffect(() => {\n        fetchGitHub();\n    }, []);\n\n    const gitMetaComp = (\n        <>\n            <Typography color=\"textSecondary\" variant=\"caption\">\n                <h2>CityScopeJS Development Tracking</h2>\n                <h4>Last Commit</h4>\n                <div>Author: {JSON.parse(JSON.stringify(gitMeta.author))}</div>\n                <div>Date: {JSON.parse(JSON.stringify(gitMeta.date))}</div>\n                <div>Hash: {JSON.parse(JSON.stringify(gitMeta.sha))}</div>\n            </Typography>\n        </>\n    );\n\n    return gitMetaComp;\n}\n","import React from \"react\";\nimport {\n    Container,\n    Divider,\n    Typography,\n    makeStyles,\n    Box,\n    Fab,\n    Grid,\n} from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport GetGITdate from \"./GetGITdate\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: \"auto\",\n        height: \"100%\",\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    gridCell: { textAlign: \"center\" },\n    divider: {\n        margin: theme.spacing(3),\n    },\n}));\nexport default function SplashScreen() {\n    const classes = useStyles();\n\n    return (\n        <Page className={classes.root} title=\"Home\">\n            <Container maxWidth=\"sm\" className={classes.content}>\n                <Typography color=\"textPrimary\" variant=\"h1\">\n                    CityScopeJS\n                </Typography>\n                <Divider className={classes.divider} light />\n\n                <Typography color=\"textPrimary\" variant=\"h5\">\n                    CityScopeJS is a unified front-end for MIT CityScope\n                    project, an open-source urban modeling and simulation\n                    platform. CityScopeJS allows users to examine different\n                    urban-design alternatives, and observe their impact through\n                    multiple layers of urban analytics modules, such as economy,\n                    traffic and ABM simulation, urban access, storm-water, noise\n                    and more.\n                </Typography>\n                <Divider className={classes.divider} light />\n                <Grid container spacing={2}>\n                    <Grid item xs={12} l={6} md={6} xl={6}>\n                        <Typography\n                            color=\"textPrimary\"\n                            variant=\"h6\"\n                            gutterBottom\n                        >\n                            CityScopeJS is an open-source project, developed by\n                            MIT, the CityScope Network, and contributers from\n                            all over the world. Join us!\n                        </Typography>\n                    </Grid>\n\n                    <Grid\n                        item\n                        xs={12}\n                        l={6}\n                        md={6}\n                        xl={6}\n                        className={classes.gridCell}\n                    >\n                        <Fab\n                            href=\"http://github.com/CityScope/CS_cityscopeJS/\"\n                            color=\"default\"\n                        >\n                            <GitHubIcon />\n                        </Fab>\n                    </Grid>\n                </Grid>\n                <Divider className={classes.divider} light />\n                <Box flex={1}>\n                    <GetGITdate />\n                </Box>\n            </Container>\n        </Page>\n    );\n}\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n    addLoadingModules,\n    removeLoadingModules,\n} from \"../../../redux/actions\";\nimport settings from \"../../../settings/settings.json\";\n\nconst getAPICall = async (URL) => {\n    try {\n        // ! should add 'retry' here\n        // ! https://stackoverflow.com/questions/56074531/how-to-retry-5xx-requests-using-axios\n        const response = await axios.get(URL);\n        return response.data;\n    } catch (err) {\n        console.log(err);\n    }\n};\n\nexport default function CityIO(props) {\n    const { tableName } = props;\n    const [hashId, setHashId] = useState(null);\n    const [hashes, setHashes] = useState({});\n    const cityioURL = settings.cityIO.baseURL + tableName;\n    const cityioData = useSelector((state) => state.CITYIO);\n\n    const dispatch = useDispatch();\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    useEffect(() => {\n        const timer = setTimeout(update, settings.cityIO.interval);\n        console.log(\"reading cityIO every -> \" + settings.cityIO.interval + \"ms\");\n        return () => clearTimeout(timer);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    async function update() {\n        // recursively get hashes\n        const newHashId = await getAPICall(cityioURL + \"/meta/id\");\n        if (hashId !== newHashId) {\n            setHashId(newHashId);\n        }\n        setTimeout(update, settings.cityIO.interval);\n    }\n\n    async function getModules() {\n        const newHashes = await getAPICall(cityioURL + \"/meta/hashes\");\n        const promises = [];\n        const loadingModules = [];\n        const pickedModules = settings.cityIO.cityIOmodules.map((x) => x.name);\n        // for each of the modules in settings, add api call to promises\n        pickedModules.forEach((module) => {\n            if (hashes[module] !== newHashes[module]) {\n                promises.push(getAPICall(cityioURL + \"/\" + module));\n                loadingModules.push(module);\n            } else {\n                promises.push(null);\n            }\n        });\n        dispatch(addLoadingModules(loadingModules));\n        const modules = await Promise.all(promises);\n        setHashes(newHashes);\n\n        // update cityio object with modules data\n        const modulesData = pickedModules.reduce((obj, k, i) => {\n            if (modules[i]) {\n                console.log(`updating ${k}`);\n                return { ...obj, [k]: modules[i] };\n            } else {\n                return obj;\n            }\n        }, cityioData);\n        modulesData.tableName = tableName;\n\n        dispatch(removeLoadingModules(loadingModules));\n\n        // send to cityio\n        dispatch(getCityioData(modulesData));\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        dispatch(setReadyState(true));\n        dispatch(setLoadingState(false));\n    }\n\n    useEffect(() => {\n        //! only update if hashId changes\n        if (!hashId) {\n            return;\n        }\n        // reset the state of loading flag\n        dispatch(setLoadingState(true));\n        \n        getModules();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [hashId]);\n\n    return null;\n}\n","import { HeatmapLayer } from \"deck.gl\";\nimport settings from \"../../../../../settings/settings.json\";\n\nexport default function AccessLayer({ active, data, accessToggle }) {\n    return new HeatmapLayer({\n        visible: active,\n        id: \"ACCESS\",\n        colorRange: settings.map.layers.heatmap.colors,\n        radiusPixels: 200,\n        opacity: 0.5,\n        threshold: 0.5,\n        data,\n        getPosition: (d) => d.coordinates,\n        getWeight: (d) => d.values[accessToggle],\n        updateTriggers: {\n            getWeight: [accessToggle],\n        },\n    });\n}\n","import { PathLayer } from \"deck.gl\";\nimport { hexToRgb } from \"../../../../../utils/utils\";\n\nexport default function AggregatedTripsLayer({\n    active,\n    data,\n    cityioData,\n    ABMmode,\n}) {\n    return new PathLayer({\n        visible: active,\n        id: \"AGGREGATED_TRIPS\",\n        _shadow: false,\n        data,\n        getPath: (d) => {\n            const noisePath =\n                Math.random() < 0.5\n                    ? Math.random() * 0.00005\n                    : Math.random() * -0.00005;\n            for (let i in d.path) {\n                d.path[i][0] = d.path[i][0] + noisePath;\n                d.path[i][1] = d.path[i][1] + noisePath;\n                d.path[i][2] = d.mode[0] * 2;\n            }\n            return d.path;\n        },\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n        opacity: 0.2,\n        getWidth: 1.5,\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\nimport { hexToRgb } from \"../../../../../utils/utils\";\n\n//  * remap line width\nconst _remapValues = (value) => {\n    let remap =\n        value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n    return remap;\n};\n\nexport default function ABMLayer({\n    active,\n    data,\n    cityioData,\n    ABMmode,\n    zoomLevel,\n    time,\n}) {\n    return new TripsLayer({\n        id: \"ABM\",\n        data,\n        getPath: (d) => d.path,\n        getTimestamps: (d) => d.timestamps,\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n        visible: active,\n        getWidth: 1,\n        widthScale: _remapValues(zoomLevel),\n        opacity: 0.8,\n        rounded: true,\n        trailLength: 500,\n        currentTime: time,\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { GeoJsonLayer } from \"deck.gl\";\n\nexport default function GridLayer({ active, data }) {\n    return new GeoJsonLayer({\n        visible: active,\n        id: \"GRID\",\n        data,\n        extruded: true,\n        wireframe: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 2,\n        getElevation: (d) => d.properties.height,\n        getFillColor: (d) => d.properties.color,\n\n        transitions: {\n            getFillColor: 500,\n            getElevation: 500,\n        },\n    });\n}\n","import { useState, useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n  _proccessAccessData,\n  _proccessGridData,\n  _setupSunEffects,\n  updateSunDirection,\n} from '../../../../utils/utils'\nimport { StaticMap } from 'react-map-gl'\nimport DeckGL from '@deck.gl/react'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport settings from '../../../../settings/settings.json'\nimport {\n  AccessLayer,\n  AggregatedTripsLayer,\n  ABMLayer,\n  GridLayer,\n} from './deckglLayers'\n\nexport default function PrjDeckGLMap(props) {\n  const [viewState, setViewState] = useState(settings.map.initialViewState)\n  const [access, setAccess] = useState(null)\n  const [GEOGRID, setGEOGRID] = useState(null)\n  const [ABM, setABM] = useState({})\n  const effectsRef = useRef()\n  const deckGL = useRef()\n  const [cityioData] = useSelector((state) => [state.CITYIO])\n  const viewSettings = useSelector((state) => state.UI_WEBSOCKET_DATA)\n\n  useEffect(() => {\n    if (!effectsRef.current) {\n      return\n    }\n    updateSunDirection(props.viewSettings.time, effectsRef)\n  }, [props.viewSettings])\n\n  useEffect(() => {\n    // fix deck view rotate\n    _rightClickViewRotate()\n    // setup sun effects\n    _setupSunEffects(effectsRef, cityioData.GEOGRID.properties.header)\n\n    // on init, check if prev. local storage with\n    // view state exist. If so, load it.\n    if (localStorage.getItem('deckGLviewState')) {\n      console.log('loading prev. deckGLviewState...')\n      let vs = localStorage.getItem('deckGLviewState')\n      setViewState(JSON.parse(vs))\n    } else {\n      // zoom map on CS table location\n      _setViewStateToTableHeader()\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    effectsRef.current[0].shadowColor = [0, 0, 0, 1]\n  }, [])\n\n  useEffect(() => {\n    setGEOGRID(_proccessGridData(cityioData))\n    if (cityioData.access) {\n      setAccess(_proccessAccessData(cityioData))\n    }\n    if (cityioData.ABM2) {\n      setABM(cityioData.ABM2)\n    }\n  }, [cityioData])\n\n  const onViewStateChange = ({ viewState }) => {\n    //    save current view state to local sotrage\n    localStorage.setItem('deckGLviewState', JSON.stringify(viewState))\n\n    setViewState(viewState)\n  }\n\n  const _setViewStateToTableHeader = () => {\n    const header = cityioData.GEOGRID.properties.header\n\n    setViewState({\n      ...viewState,\n      longitude: header.longitude,\n      latitude: header.latitude,\n      zoom: 15,\n      pitch: 0,\n      bearing: 360 - header.rotation,\n      orthographic: true,\n    })\n  }\n\n  const _rightClickViewRotate = () => {\n    document\n      .getElementById('deckgl-wrapper')\n      .addEventListener('contextmenu', (evt) => evt.preventDefault())\n  }\n\n  const layersKey = {\n    ABM: ABMLayer({\n      active: viewSettings.ABMLayer.active,\n      data: ABM.trips,\n      cityioData: cityioData,\n      ABMmode: viewSettings.ABMLayer.ABMmode,\n      zoomLevel: viewSettings.ABMLayer.zoomLevel,\n      time: viewSettings.time,\n    }),\n    AGGREGATED_TRIPS: AggregatedTripsLayer({\n      active: viewSettings.AggregatedTripsLayer.active,\n      data: ABM.trips,\n      cityioData: cityioData,\n      ABMmode: viewSettings.AggregatedTripsLayer.ABMmode,\n    }),\n    GRID: GridLayer({\n      active: viewSettings.GridLayer.active,\n      data: GEOGRID,\n    }),\n    ACCESS: AccessLayer({\n      active: viewSettings.AccessLayer.active,\n      data: access,\n      accessToggle: viewSettings.AccessLayer.accessToggle,\n    }),\n  }\n\n  const layerOrder = ['ABM', 'AGGREGATED_TRIPS', 'GRID', 'ACCESS']\n\n  const _renderLayers = () => {\n    let layers = []\n    for (var layer of layerOrder) {\n      layers.push(layersKey[layer])\n    }\n    return layers\n  }\n\n  return (\n    <DeckGL\n      ref={deckGL}\n      viewState={viewState}\n      onViewStateChange={onViewStateChange}\n      layers={_renderLayers()}\n      effects={effectsRef.current}\n      controller={{\n        keyboard: false,\n      }}\n    >\n      <StaticMap\n        asyncRender={false}\n        dragRotate={true}\n        reuseMaps={true}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        mapStyle={settings.map.mapStyle.sat}\n        preventStyleDiffing={true}\n      />\n    </DeckGL>\n  )\n}\n","import { Matrix3d, RectPoints, Vector } from \"./Keystoner\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1,\n    ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./Keystoner\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 20;\nconst halfAnchor = anchorSize / 1.5;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"1px solid white\",\n        cursor: \"move\",\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor,\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor,\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor,\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor,\n    },\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {},\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={(evt) => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation),\n        }}\n    />\n);\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport default class Keystoner extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n\n      if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }  \n\n\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n\n            console.log(\"saving edited projMap...\", JSON.stringify(prevState));\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n      \n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n\n\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <>\n              \n         \n\n                <div\n          \n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </>\n        );\n    }\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        bottom: \"1vh\",\n        zIndex: 1001,\n        maxWidth: \"50vw\",\n    },\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import { useState, useEffect } from 'react'\nimport PrjDeckGLMap from './PrjDeckGLMap'\nimport Keystoner from './Components/Keystoner'\nimport DeleteLocalStorage from './Components/deleteLocalStorage'\n\nexport default function Keystone() {\n  const [editMode, setEditMode] = useState(false)\n\n  const clearLocalStraoge = () => {\n    if (localStorage.getItem('projMap')) {\n      localStorage.removeItem('projMap')\n    }\n    if (localStorage.getItem('deckGLviewState')) {\n      localStorage.removeItem('deckGLviewState')\n    }\n    window.location.reload()\n  }\n\n  useEffect(() => {\n    const onKeyDown = ({ key }) => {\n      if (key === ' ') {\n        setEditMode((editMode) => !editMode)\n        console.log(key, editMode)\n      }\n    }\n    document.addEventListener('keydown', onKeyDown)\n    return () => {\n      document.removeEventListener('keydown', onKeyDown)\n    }\n  }, [editMode])\n\n  return (\n    <>\n      {editMode && (\n        <div onClick={() => clearLocalStraoge()}>\n          <DeleteLocalStorage />\n        </div>\n      )}\n\n      <div\n        // ! this div's props are\n        // ! controling the projection z-index\n        // ! on top of the menus\n\n        style={{\n          height: '100%',\n          width: '100vw',\n          overflow: 'hidden',\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          zIndex: 1000,\n        }}\n      >\n        <div>\n          <Keystoner\n            style={{\n              height: '100vh',\n              width: '100vw',\n            }}\n            isEditMode={editMode}\n          >\n            <PrjDeckGLMap />\n          </Keystoner>\n        </div>\n      </div>\n    </>\n  )\n}\n","import { useEffect } from 'react'\n\nimport { useDispatch } from 'react-redux'\nimport { setUIWebsocketData, setUIWebsocketReady } from '../../../redux/actions'\nimport settings from '../../../settings/settings.json'\n\n/*\nhttps://stackoverflow.com/questions/39728000/react-native-with-websocket-doesnt-work\n*/\n\nconst UIWebsocket = () => {\n  var socket = new WebSocket(settings.SOCKETS.URL)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    socket.onopen = () => {\n      socket.send('CityScopeJS')\n\n      socket.onmessage = ({ data }) => {\n        dispatch(setUIWebsocketReady(true))\n        dispatch(setUIWebsocketData(JSON.parse(data)))\n      }\n    }\n  }, [])\n  return null\n}\n\nexport default UIWebsocket\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport CityIO from './CityIO/'\nimport Keystone from './Keystone'\nimport { Container, Typography, makeStyles, Box } from '@material-ui/core'\nimport TableNameInput from '../../Components/TableNameInput'\nimport Page from '../../layouts/Page'\nimport UIWebsocket from './UIWebsocket'\n\nexport default function CityScopeJS() {\n  // wait for 'ready' flag from cityIO when app is ready to start\n  const isCityIOready = useSelector((state) => state.READY)\n  const isSocketUIready = useSelector((state) => state.UI_WEBSOCKET_READY)\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: 'auto',\n        height: '100%',\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n      },\n    },\n  }))\n\n  const [selectedTable, setSelectedTable] = useState(null)\n\n  const ListOfTables = () => {\n    return (\n      <Container maxWidth=\"md\">\n        <Typography color=\"textPrimary\" variant=\"h1\">\n          Projection tool\n        </Typography>\n        <Box mt={'3em'} />\n        <Typography color=\"textPrimary\">\n          This tool is used to project and display CityScopeJS tables in passive\n          mode, such as projectors, TVs, or other non-interactive displays.\n        </Typography>\n        <Box mt={'2em'} />\n        <Typography color=\"textPrimary\" variant=\"caption\">\n          start by selecting your CityScopeJS project. Press 'Spacebar' to\n          toggle keystone. Note: Not all CityScope projects below are ready for\n          CityScopeJS.\n        </Typography>\n        <Box mt={'2em'} />\n        <TableNameInput setSelectedTable={setSelectedTable} />\n      </Container>\n    )\n  }\n\n  const classes = useStyles()\n  return (\n    <>\n      <UIWebsocket />\n      <Page className={classes.root} title=\"Keystone\">\n        {!isCityIOready && <ListOfTables />}\n        {selectedTable && <CityIO tableName={selectedTable} />}\n\n        {isCityIOready && isSocketUIready && <Keystone />}\n      </Page>\n    </>\n  )\n}\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport MainLayout from \"./layouts/MainLayout\";\nimport NotFoundView from \"./views/Errors/NotFoundView\";\nimport GridEditor from \"./views/GridEditor\";\nimport CityScopeJS from \"./views/CityScopeJS\";\nimport SplashScreen from \"./views/SplashScreen\";\nimport ProjectionMapping from \"./views/ProjectionMapping\";\n\nconst routes = [\n    {\n        path: \"/\",\n        element: <MainLayout />,\n        children: [\n            { path: \"/home\", element: <SplashScreen /> },\n            { path: \"/\", element: <CityScopeJS /> },\n            { path: \"/editor\", element: <GridEditor /> },\n            { path: \"/projection\", element: <ProjectionMapping /> },\n\n            { path: \"*\", element: <Navigate to=\"/404\" /> },\n            { path: \"404\", element: <NotFoundView /> },\n        ],\n    },\n];\n\nexport default routes;\n","import React from \"react\";\nimport { useRoutes } from \"react-router-dom\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport GlobalStyles from \"./theme/GlobalStyles\";\nimport theme from \"./theme\";\nimport routes from \"./routes\";\n\nconst App = () => {\n    const routing = useRoutes(routes);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyles />\n            {routing}\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport Provider from \"./redux/Provider\";\nimport store from \"./redux/store\";\n\n// ! basename={process.env.PUBLIC_URL}\n\nReactDOM.render(\n    <Provider store={store}>\n        {/* https://github.com/facebook/create-react-app/issues/1765 */}\n        <HashRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </HashRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}