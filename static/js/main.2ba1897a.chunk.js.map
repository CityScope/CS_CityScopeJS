{"version":3,"sources":["theme/GlobalStyles.js","theme/typography.js","theme/index.js","layouts/MainLayout/NavBar/NavItem.js","layouts/MainLayout/NavBar/index.js","layouts/MainLayout/TopBar.js","layouts/MainLayout/index.js","layouts/Page.js","views/Errors/NotFoundView.js","views/GridEditor/EditorMap/EditorBrush.js","redux/actions.js","views/GridEditor/EditorMap/EditorMap.js","views/GridEditor/EditorMenu/TypesEditor/index.js","views/GridEditor/EditorMenu/GridProps/GridMaker/gridCreator.js","views/GridEditor/EditorMenu/GridProps/GridMaker/index.js","views/GridEditor/EditorMenu/GridProps/CommitGrid/index.js","views/GridEditor/EditorMenu/GridProps/CenterMapButton/CenterMapButton.js","views/GridEditor/EditorMenu/GridProps/index.js","views/GridEditor/EditorMenu/index.js","views/GridEditor/index.js","views/CityScopeJS/CityIO/utils.js","views/CityScopeJS/CityIO/cityIO.js","views/CityIOviewer/CityIOdeckGLmap/legoio.png","views/CityIOviewer/CityIOdeckGLmap/SelectedTable/index.js","views/CityIOviewer/CityIOdeckGLmap/index.js","views/CityIOviewer/CityIOlist.js","views/CityIOviewer/SplashScreen/GetGITdate.js","views/CityIOviewer/SplashScreen/index.js","views/CityIOviewer/index.js","redux/initialState.js","views/CityScopeJS/CityIO/LoadingSpinner/index.js","redux/reducer.js","redux/store.js","utils/utils.js","views/CityScopeJS/MenuContainer/EditMenu/TypeInfo.js","views/CityScopeJS/MenuContainer/EditMenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/ABMLegend.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/styles.js","views/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/AccessSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/index.js","views/CityScopeJS/MenuContainer/SaveMenu/components/SaveAsScenario/index.js","views/CityScopeJS/MenuContainer/SaveMenu/components/ScenarioItems/index.js","views/CityScopeJS/MenuContainer/SaveMenu/index.js","views/CityScopeJS/MenuContainer/index.js","views/CityScopeJS/DeckglMap/components/PaintBrush/PaintBrush.js","views/CityScopeJS/DeckglMap/components/CellMeta.js","views/CityScopeJS/DeckglMap/components/PaintBrush/index.js","views/CityScopeJS/DeckglMap/components/AnimationComponent.js","views/CityScopeJS/DeckglMap/deckglLayers/AccessLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/AggregatedTripsLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/ABMLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GridLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/TextualLayer.js","views/CityScopeJS/DeckglMap/index.js","views/CityScopeJS/VisContainer/Radar/index.js","views/CityScopeJS/VisContainer/BarChart/index.js","views/CityScopeJS/VisContainer/AreaCalc/index.js","views/CityScopeJS/VisContainer/index.js","views/CityScopeJS/CSjsMain.js","views/CityScopeJS/index.js","views/ProjectionMapping/CityIO/index.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/AccessLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/AggregatedTripsLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/ABMLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/GridLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/index.js","views/ProjectionMapping/Keystone/Components/util.ts","views/ProjectionMapping/Keystone/Components/anchor.tsx","views/ProjectionMapping/Keystone/Components/Keystoner.tsx","views/ProjectionMapping/Keystone/Components/deleteLocalStorage.js","views/ProjectionMapping/Keystone/index.js","Components/TableNameInput.js","views/ProjectionMapping/UIWebsocket/index.js","views/ProjectionMapping/index.js","routes.js","App.js","redux/Provider.js","index.js"],"names":["useStyles","makeStyles","createStyles","boxSizing","margin","padding","html","height","width","body","backgroundColor","a","textDecoration","GlobalStyles","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","h1","fontWeight","letterSpacing","h2","h3","h4","h5","h6","overline","theme","createMuiTheme","zIndex","appBar","palette","background","default","paper","dark","primary","main","light","secondary","text","colors","grey","shape","borderRadius","overrides","MuiListItem","root","boxShadow","button","MuiOutlinedInput","notchedOutline","borderColor","MuiAppBar","colorPrimary","color","MuiDivider","opacity","MuiCard","MuiButton","item","display","paddingTop","paddingBottom","justifyContent","textTransform","icon","marginRight","spacing","title","active","fontWeightBold","NavItem","className","href","Icon","rest","classes","ListItem","clsx","disableGutters","Button","activeClassName","component","RouterLink","to","size","items","MapIcon","BarChartIcon","FormatShapesIcon","mobileDrawer","top","NavBar","openNavDrawer","onMobileNavOpen","content","Box","flexDirection","p","List","map","style","onClick","flexGrow","Card","elevation","CardContent","position","Fab","Typography","align","variant","Date","getFullYear","Drawer","anchor","open","defaultProps","onMobileClose","TopBar","AppBar","Toolbar","IconButton","name","overflow","flex","MainLayout","useState","navMenuState","setNavMenuState","Page","forwardRef","ref","children","Helmet","image","marginTop","maxWidth","NotFoundView","Container","SelectionTarget","props","mousePos","selectedType","divSize","colorTrans","mouseX","clientX","mouseY","clientY","border","mouseDown","pointerEvents","left","GET_CITYIO_DATA","getCityioData","data","type","LISTEN_TO_MAP_EVENTS","LISTEN_TO_ABM_SLIDERS","listenToSlidersEvents","LISTEN_TO_ABM_MODE","LISTEN_TO_ACCESS_TOGGLE","MENU_INTERACTION","LISTEN_TO_EDIT_MENU","listenToEditMenu","SET_READY_STATE","setReadyState","SET_LOADING_STATE","setLoadingState","SET_SCENARIO_NAMES","setScenarioNames","ADD_LOADING_MODULES","addLoadingModules","REMOVE_LOADING_MODULES","removeLoadingModules","SET_UI_WEBSOCKET_DATA","SET_UI_WEBSOCKET_READY","LISTEN_TO_GRID_CREATOR","listenToGridCreator","LISTEN_TO_ROW_EDIT","listenToRowEdits","LISTEN_TO_TYPES_LIST","LISTEN_TO_BASE_MAP_CENTER","listenToBaseMapCenter","_hexToRgb","hex","result","exec","parseInt","BaseMap","_toggleOrthoView","viewState","orthographic","menu","includes","_onViewStateChange","setState","componentDidUpdate","prevProps","mapCenter","state","latitude","latCenter","longitude","lonCenter","pitch","bearing","_mulipleObjPicked","e","dim","pickingRadius","x","y","deckGL","pickObjects","_handleGridcellEditing","interactive","multiSelectedObj","forEach","selected","thisCellProps","object","properties","selectedCellsState","_renderSelectionTarget","_handleKeyUp","keyDownState","_handleKeyDown","nativeEvent","key","draggingWhileEditing","settings","initialViewState","dirLightSettings","timestamp","UTC","intensity","_shadow","this","_rightClickViewRotate","_setViewStateToTableHeader","GEOGRID","header","zoom","document","getElementById","addEventListener","evt","preventDefault","layers","push","GeoJsonLayer","id","stroked","filled","wireframe","createdGrid","visible","pickable","extruded","lineWidthScale","lineWidthMinPixels","getElevation","d","getFillColor","event","cellInfo","rightButton","onDrag","onDragStart","onDragEnd","updateTriggers","transitions","onKeyDown","onKeyUp","onMouseMove","onMouseUp","onMouseDown","deck","onViewStateChange","_renderLayers","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","reuseMaps","mapboxApiAccessToken","process","mapStyle","sat","preventStyleDiffing","Component","mapDispatchToProps","connect","ROW_EDIT","BASE_MAP_CENTER","GRID_CREATED","TypesEditor","React","columns","field","lookup","No","Web","TUI","LanduseTypesList","typesArray","Object","keys","description","LBCS","JSON","stringify","NAICS","createtypesArray","types","dispatch","useDispatch","selectedRow","setSelectedRow","rowColor","setRowColor","useEffect","Grid","container","xs","s","m","l","xl","options","paging","search","selection","rowStyle","rowData","tableData","onRowClick","row","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","onRowUpdate","oldData","indexOf","onRowDelete","console","log","splice","deg_to_rad","deg","Math","PI","rad_to_deg","rad","randomProperty","obj","length","random","GridMaker","reduxState","useSelector","handleGridCreation","grid","gridProps","typesList","top_left_lon","parseFloat","top_left_lat","rotation","userPrj","projection","cell_size","cellSize","nrows","ncols","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","i","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","features","rndType","geojsonPolygon","geometry","coordinates","polygon_xy","polygon_ll","v","ll","gridCreator","TYPES_LIST","startIcon","makeGEOGRIDobject","struct","geoJsonFeatures","GEOGRID_object","newTypesList","oldType","parse","CommitGrid","reqResonse","setReqResonse","hasGrid","postGridToCityIO","URL","DATA","GEOGRIDstruct","GEOGRIDDATA_object","element","makeGEOGRIDDATAobject","tableName","toLowerCase","table_url","globalSettings","cityIO","baseURL","new_table_grid","GEOGRIDDATA","axios","method","url","headers","Accept","then","response","cityscopeJSendpoint","status","Link","reqResonseUI","catch","error","dataStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","appendChild","click","remove","downloadObjectAsJson","CenterMapButton","GridProps","borderWidth","flexWrap","tz","formValues","setformValues","handleChangeForm","target","value","noValidate","autoComplete","TextField","InputProps","onChange","textField","label","defaultValue","inputProps","max","min","helperText","EditorMenu","GridEditor","md","maxHeight","EditorMap","getScenarioIndices","get","res","scenarioIndices","filter","str","replace","promises","getScenarioName","all","r","err","getAPICall","CityIO","hashId","setHashId","hashes","setHashes","cityioURL","cityioData","CITYIO","update","newHashId","interval","newHashes","loadingModules","pickedModules","cityIOmodules","module","modules","modulesData","reduce","k","timer","clearTimeout","getModules","SelectedTable","clicked","tableURL","CityIOdeckGLmap","markerInfo","setMarkerInfo","setClicked","setZoom","INIT_VIEW","zHeight","viewport","setViewport","setInitialViewState","isHovering","markersArr","cityIOdata","table","index","RND_1","RND_2","tableHeader","coord","from","TileLayer","minZoom","maxZoom","tileSize","renderSubLayers","tile","bbox","west","south","east","north","BitmapLayer","_imageCoordinateSystem","COORDINATE_SYSTEM","CARTESIAN","bounds","LineLayer","getWidth","getSourcePosition","getTargetPosition","getColor","TextLayer","getPosition","getText","getSize","getAngle","getPixelOffset","getTextAnchor","getAlignmentBaseline","IconLayer","iconAtlas","transitionDuration","transitionInterpolator","FlyToInterpolator","iconMapping","marker","mask","getIcon","sizeScale","views","GlobeView","onHover","Boolean","getCursor","isDragging","onViewportChange","ContextProvider","_MapContext","Provider","CityIOlist","tableList","setTableList","isLoading","setIsLoading","fetchCityIOtables","cityIOlistURL","ListOfTables","tablesArr","requestArr","oldArray","toString","GetGITdate","author","branch","date","sha","link","gitMeta","setGitMeta","fetch","json","commit","divider","SplashScreen","Divider","gutterBottom","CityIOviewer","fixedPosition","LoadingSpinner","LOADING_MODULES","bottom","right","LinearProgress","listOfToggles","toggles","menuInitState","values","showOnInit","initialState","MENU","SCENARIO_NAMES","MAP","SLIDERS","time","ABM","startSimHour","currentSimHour","endSimHour","speed","animationSpeed","ABM_MODE","ACCESS_TOGGLE","SELECTED_TYPE","READY","LOADING","reducer","action","Set","UI_WEBSOCKET_DATA","UI_WEBSOCKET_READY","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","hexToRgb","testHex","hexString","test","_proccessGridData","_proccessAccessData","accessData","heatmap","_postMapEditsToCityIO","endPoint","expectUpdateModules","val","expectUpdate","cityIOKeys","getState","has","setSelectedCellsState","deckGLRef","current","_multipleObjPicked","currentDateMidnight","setHours","_setupSunEffects","effectsRef","ambientLight","AmbientLight","dirLight","_SunLight","lightingEffect","LightingEffect","shadowColor","updateSunDirection","thisLocationTime","getTime","directionalLights","getMonth","getDay","getHours","getMinutes","getSeconds","TypeInfo","COLOR_SCALE","hoveredRadial","setHoveredRadial","typeInfo","attr","angle","proportion","use","careateData","colorType","animation","innerRadius","radialRadius","radius","getLabel","showLabels","onValueMouseOver","onSeriesMouseOut","padAngle","selectedIndex","setSelectedIndex","marks","parseTypeInfo","iconsArr","col","rgbCol","typeHasHeightProps","alignItems","typeProps","ListItemAvatar","Avatar","charAt","ListItemText","Collapse","in","Slider","valueLabelDisplay","getAriaLabel","createTypesIcons","marginLeft","subtitle1","subtitle2","ABMLegend","tripsAttr","trips","tripsData","modes","mode","profiles","profile","tripTypeValue","string","legendData","prepareLegendData","ABMSubmenu","sliders","settripTypeValue","FormControl","RadioGroup","aria-label","FormControlLabel","control","Radio","newValue","aria-labelledby","ShadowSubmenu","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","access","c","startColor","endColor","startTitle","endTitle","ListItemSecondaryAction","Switch","edge","checked","TogglesMenu","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","thisToggle","displayName","ABM2","SaveAsScenario","setOpen","setName","toggleDrawer","handleClose","scenarioNames","postScenario","info","baseUR","disabled","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","autoFocus","fullWidth","DialogActions","newScenarioIndex","getScenarioIndex","ScenarioItems","scenario","getScenario","deleteScenario","SaveMenu","MenuContainer","updatedMenuState","PaintBrush","hoveredCells","isInteractiveCell","msg","CellMeta","hoveredObj","PaintBrushContainer","editOn","AnimationComponent","animationFrame","cancelAnimationFrame","_animate","rotateOn","ABMOn","updaters","sunEffects","setViewState","startHour","endHour","t","requestAnimationFrame","bind","AccessLayer","ColumnLayer","shadowEnabled","material","diskResolution","elevationScale","colorRange","getLineColor","AggregatedTripsLayer","ABMmode","PathLayer","getPath","noisePath","path","ABMLayer","zoomLevel","TripsLayer","getTimestamps","timestamps","widthScale","rounded","trailLength","currentTime","GridLayer","setDraggingWhileEditing","setHoveredObj","TextualLayer","textLayerData","infoIteam","Map","setKeyDownState","setMousePos","setMouseDown","setAccess","textualData","setTextualData","setGEOGRID","setABM","loaded","setLoaded","useRef","shadowsOn","resetViewOn","textual","dataProps","layersKey","AGGREGATED_TRIPS","GRID","ACCESS","TEXTUAL","layerOrder","layer","effects","asyncRender","radarSize","Radar","radarData","setRadarData","indicators","f","domains","viz_type","ref_value","domain","createRadarData","polygons","fillOpacity","strokeWidth","axes","fill","labels","textAnchor","stroke","tickValues","Array","BarChart","barChartData","setBarChartData","hoveredNode","setHoveredNode","generateData","dataArr","alignContent","xType","stackBy","yDomain","tickLabelAngle","AreaCalc","areaData","setAreaData","geoGridData","calcAreaObj","gridCellData","typeName","hasOwnProperty","count","area","g","b","valToHex","rgbToHex","radialData","calcArea","labelsRadiusMultiplier","labelsStyle","font","textShadow","VisContainer","CSjsMain","direction","CityScopeJS","setTableName","isDone","setIsdone","location","pre","cityscopePrjName","substring","isReady","HeatmapLayer","radiusPixels","threshold","getWeight","PrjDeckGLMap","viewSettings","localStorage","getItem","vs","setItem","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","vectorToTransform","vector","halfAnchor","styles","cursor","AnchorComponent","translation","onMouseEnter","transform","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","Keystoner","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","onAnchorMouseUp","isEditMode","newVector","getBoundingClientRect","ls","removeEventListener","anchorStyle","anchorClassName","DeleteLocalStorage","justify","Keystone","editMode","setEditMode","removeItem","reload","TableNameInput","setSelectedTable","buttonsArr","cityIOtableBaseUrl","geogridUrl","UIWebsocket","socket","WebSocket","SOCKETS","onopen","send","onmessage","setUIWebsocketReady","setUIWebsocketData","isCityIOready","isSocketUIready","selectedTable","mt","routes","App","routing","useRoutes","ThemeProvider","ProviderWrapper","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.2ba1897a.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        \"@global\": {\n            \"*\": {\n                boxSizing: \"border-box\",\n                margin: 0,\n                padding: 0,\n            },\n            html: {\n                \"-webkit-font-smoothing\": \"antialiased\",\n                \"-moz-osx-font-smoothing\": \"grayscale\",\n                height: \"100%\",\n                width: \"100%\",\n            },\n            body: {\n                backgroundColor: \"#18191a\",\n                height: \"100%\",\n                width: \"100%\",\n            },\n            a: {\n                textDecoration: \"none\",\n            },\n            \"#root\": {\n                height: \"100%\",\n                width: \"100%\",\n            },\n        },\n    })\n);\n\nconst GlobalStyles = () => {\n    useStyles();\n\n    return null;\n};\n\nexport default GlobalStyles;\n","const typography = {\n    fontFamily: `\"Roboto Mono\", sans-serif`,\n    fontSize: 12,\n    fontWeightLight: 100,\n    fontWeightRegular: 500,\n    fontWeightMedium: 700,\n\n    h1: {\n        fontWeight: 700,\n        fontSize: 45,\n        letterSpacing: \"-1px\",\n    },\n    h2: {\n        fontWeight: 800,\n        fontSize: 29,\n        letterSpacing: \"-0.24px\",\n    },\n    h3: {\n        fontWeight: 700,\n        fontSize: 24,\n        letterSpacing: \"-0.06px\",\n    },\n    h4: {\n        fontWeight: 500,\n        fontSize: 20,\n        letterSpacing: \"-0.06px\",\n    },\n    h5: {\n        fontWeight: 500,\n        fontSize: 16,\n        letterSpacing: \"-0.05px\",\n    },\n    h6: {\n        fontWeight: 500,\n        fontSize: 14,\n        letterSpacing: \"-0.05px\",\n    },\n    overline: {\n        fontWeight: 500,\n    },\n};\n\nexport default typography;\n","import { createMuiTheme, colors } from '@material-ui/core'\nimport typography from './typography'\n\nconst theme = createMuiTheme({\n  zIndex: {\n    appBar: 999,\n  },\n  palette: {\n    background: {\n      default: '#ff5278', //255, 82, 120\n      paper: '#18191a',\n      dark: '#ff5278',\n    },\n    primary: {\n      main: '#FFF',\n      light: '#ff5278',\n    },\n    secondary: {\n      main: '#ff5278',\n    },\n\n    text: {\n      primary: colors.grey[100],\n      secondary: '#ff5278',\n    },\n  },\n\n  typography,\n  shape: {\n    borderRadius: 20,\n  },\n\n  overrides: {\n    MuiListItem: {\n      root: {\n        '&$selected': {\n          backgroundColor: '#18191a',\n          boxShadow:\n            '12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)',\n          '&:hover': {\n            backgroundColor: '#ff5278',\n          },\n        },\n      },\n      button: {\n        '&:hover': {\n          backgroundColor: '#ff5278',\n        },\n      },\n    },\n\n    MuiOutlinedInput: {\n      notchedOutline: {\n        borderColor: '#ff5278',\n      },\n    },\n    MuiAppBar: {\n      colorPrimary: { backgroundColor: '#18191a', color: '#FFF' },\n    },\n    MuiDivider: {\n      root: {\n        backgroundColor: '#FFF',\n        opacity: 0.1,\n      },\n    },\n    MuiCard: {\n      root: {\n        boxShadow:\n          '12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)',\n      },\n    },\n    MuiButton: {\n      root: {\n        boxShadow:\n          '12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)',\n        '&:hover': {\n          boxShadow: '12px 12px 16px 0  #000,-2px -2px 16px 0  #ff5278',\n        },\n        // width: \"100%\",\n      },\n    },\n  },\n})\n\nexport default theme\n","import React from \"react\";\nimport { NavLink as RouterLink } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport { Button, ListItem, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    item: {\n        display: \"flex\",\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n    button: {\n        color: theme.palette.text.main,\n        fontWeight: theme.typography.fontWeightMedium,\n        justifyContent: \"flex-start\",\n        letterSpacing: 0,\n        padding: \"10px 8px\",\n        textTransform: \"none\",\n        width: \"100%\",\n    },\n    icon: {\n        marginRight: theme.spacing(1),\n    },\n    title: {\n        marginRight: \"auto\",\n    },\n    active: {\n        color: theme.palette.text.secondary,\n        \"& $title\": {\n            fontWeight: theme.typography.fontWeightBold,\n        },\n        \"& $icon\": {\n            color: theme.palette.text.secondary,\n        },\n    },\n}));\n\nconst NavItem = ({ className, href, icon: Icon, title, ...rest }) => {\n    const classes = useStyles();\n\n    return (\n        <ListItem\n            className={clsx(classes.item, className)}\n            disableGutters\n            {...rest}\n        >\n            <Button\n                activeClassName={classes.active}\n                className={classes.button}\n                component={RouterLink}\n                to={href}\n            >\n                {Icon && <Icon className={classes.icon} size=\"20\" />}\n                <span className={classes.title}>{title}</span>\n            </Button>\n        </ListItem>\n    );\n};\n\nNavItem.propTypes = {\n    className: PropTypes.string,\n    href: PropTypes.string,\n    icon: PropTypes.elementType,\n    title: PropTypes.string,\n};\n\nexport default NavItem;\n","import PropTypes from 'prop-types'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport FormatShapesIcon from '@material-ui/icons/FormatShapes'\nimport {\n  Box,\n  Drawer,\n  Fab,\n  List,\n  Typography,\n  makeStyles,\n  Card,\n  CardContent,\n} from '@material-ui/core'\nimport { BarChart as BarChartIcon, Map as MapIcon } from 'react-feather'\nimport NavItem from './NavItem'\n\nconst items = [\n  {\n    href: '/',\n    icon: MapIcon,\n    title: 'CityScopeJS',\n  },\n  {\n    href: '/editor',\n    icon: BarChartIcon,\n    title: 'Grid Editor',\n  },\n  {\n    href: '/projection',\n    icon: FormatShapesIcon,\n    title: 'Projection Mapping',\n  },\n]\n\nconst useStyles = makeStyles(() => ({\n  mobileDrawer: {\n    width: '30vw',\n    top: 48,\n    height: 'calc(100% - 48px)',\n    boxShadow: '22px 22px 22px 0 rgba(0,0,0)',\n  },\n}))\n\nconst NavBar = ({ openNavDrawer, onMobileNavOpen }) => {\n  const classes = useStyles()\n\n  const content = (\n    <Box height=\"100%\" display=\"flex\" flexDirection=\"column\" p={3}>\n      <List>\n        {items.map((item) => (\n          <NavItem\n            style={{ padding: '2vh' }}\n            href={item.href}\n            key={item.title}\n            title={item.title}\n            icon={item.icon}\n            onClick={onMobileNavOpen}\n          />\n        ))}\n      </List>\n\n      <Box flexGrow={1} />\n      <Card elevation={5} p={2}>\n        <CardContent position={'bottom'}>\n          <Fab\n            href=\"http://github.com/CityScope/CS_cityscopeJS/\"\n            color=\"default\"\n            size=\"small\"\n          >\n            <GitHubIcon />\n          </Fab>\n          <Box p={2} />\n          <Typography align=\"left\" variant=\"h5\">\n            MIT CityScope\n          </Typography>\n          <Typography align=\"left\" variant=\"caption\">\n            {new Date().getFullYear()}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Box>\n  )\n\n  return (\n    <>\n      <Drawer\n        anchor=\"left\"\n        classes={{ paper: classes.mobileDrawer }}\n        open={openNavDrawer}\n        elevation={10}\n        variant=\"persistent\"\n      >\n        {content}\n      </Drawer>\n    </>\n  )\n}\n\nNavBar.propTypes = {\n  onMobileNavOpen: PropTypes.func,\n  openNavDrawer: PropTypes.bool,\n}\n\nNavBar.defaultProps = {\n  onMobileClose: () => {},\n  openNavDrawer: false,\n}\n\nexport default NavBar\n","import React from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\n\nimport {\n    AppBar,\n    IconButton,\n    Toolbar,\n    Typography,\n    makeStyles,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles(() => ({\n    root: {},\n}));\n\nconst TopBar = ({ className, onMobileNavOpen, ...rest }) => {\n    const classes = useStyles();\n\n    return (\n        <AppBar\n            className={clsx(classes.root, className)}\n            elevation={5}\n            {...rest}\n        >\n            <Toolbar variant=\"dense\">\n                <IconButton color=\"inherit\" onClick={onMobileNavOpen}>\n                    <MenuIcon />\n                </IconButton>\n                <RouterLink to=\"/\">\n                    <Typography\n                        className={classes.name}\n                        color=\"textPrimary\"\n                        variant=\"h5\"\n                    >\n                        MIT CityScope\n                    </Typography>\n                </RouterLink>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nTopBar.propTypes = {\n    className: PropTypes.string,\n    onMobileNavOpen: PropTypes.func,\n};\n\nexport default TopBar;\n","import React, { useState } from 'react'\nimport { Outlet } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core'\nimport NavBar from './NavBar'\nimport TopBar from './TopBar'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background,\n    display: 'flex',\n    height: '100%',\n    overflow: 'hidden',\n    width: '100%',\n  },\n\n  content: {\n    paddingTop: 48,\n    flex: '1 1 auto',\n    height: '100vh',\n    overflow: 'auto',\n  },\n}))\n\nconst MainLayout = () => {\n  const classes = useStyles()\n  const [navMenuState, setNavMenuState] = useState(true)\n\n  return (\n    <div className={classes.root}>\n      <NavBar\n        openNavDrawer={!navMenuState}\n        onMobileNavOpen={() => setNavMenuState(!navMenuState)}\n      />\n      <TopBar onMobileNavOpen={() => setNavMenuState(!navMenuState)} />\n      <div className={classes.content}>\n        <Outlet />\n      </div>\n    </div>\n  )\n}\n\nexport default MainLayout\n","import React, { forwardRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport PropTypes from \"prop-types\";\n\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\n    return (\n        <div ref={ref} {...rest}>\n            <Helmet>\n                <title>\n                    CityScopeJS {\">\"} {title}\n                </title>\n            </Helmet>\n            {children}\n        </div>\n    );\n});\n\nPage.propTypes = {\n    children: PropTypes.node.isRequired,\n    title: PropTypes.string,\n};\n\nexport default Page;\n","import React from \"react\";\nimport { Box, Container, Typography, makeStyles } from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background,\n    height: \"100%\",\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n  image: {\n    marginTop: 50,\n    display: \"inline-block\",\n    maxWidth: \"100%\",\n    width: 560,\n  },\n}));\n\nconst NotFoundView = () => {\n  const classes = useStyles();\n\n  return (\n    <Page className={classes.root} title=\"404\">\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Container maxWidth=\"md\">\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h1\">\n            404\n          </Typography>\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h5\">\n            The page you are looking for isn’t here\n          </Typography>\n        </Container>\n      </Box>\n    </Page>\n  );\n};\n\nexport default NotFoundView;\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport default function SelectionTarget(props) {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n    const selectedType = props.selectedType;\n    const divSize = props.divSize;\n\n    const colorTrans =\n        \"rgba(\" +\n        selectedType.color[0] +\n        \",\" +\n        selectedType.color[1] +\n        \",\" +\n        selectedType.color[2] +\n        \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: selectedType.color,\n                color: selectedType.color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\",\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n}\n","/**\n * CSjs ACTIONS\n */\nexport const GET_CITYIO_DATA = 'GET_CITYIO_DATA'\nexport function getCityioData(data) {\n  return { type: GET_CITYIO_DATA, data }\n}\n\nexport const LISTEN_TO_MAP_EVENTS = 'LISTEN_TO_MAP_EVENTS'\nexport function listenToMapEvents(data) {\n  return { type: LISTEN_TO_MAP_EVENTS, data }\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = 'LISTEN_TO_ABM_SLIDERS'\nexport function listenToSlidersEvents(data) {\n  return { type: LISTEN_TO_ABM_SLIDERS, data }\n}\n\nexport const LISTEN_TO_ABM_MODE = 'LISTEN_TO_ABM_MODE'\nexport function listenToABMmode(data) {\n  return { type: LISTEN_TO_ABM_MODE, data }\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = 'LISTEN_TO_ACCESS_TOGGLE'\nexport function listenToAccessToggle(data) {\n  return { type: LISTEN_TO_ACCESS_TOGGLE, data }\n}\n\nexport const MENU_INTERACTION = 'MENU_INTERACTION'\nexport function listenToMenuUI(data) {\n  return { type: MENU_INTERACTION, data }\n}\n\nexport const LISTEN_TO_EDIT_MENU = 'LISTEN_TO_EDIT_MENU'\nexport function listenToEditMenu(data) {\n  return { type: LISTEN_TO_EDIT_MENU, data }\n}\n\nexport const SET_READY_STATE = 'SET_READY_STATE'\nexport function setReadyState(data) {\n  return { type: SET_READY_STATE, data }\n}\n\nexport const SET_LOADING_STATE = 'SET_LOADING_STATE'\nexport function setLoadingState(data) {\n  return { type: SET_LOADING_STATE, data }\n}\n\nexport const SET_SCENARIO_NAMES = 'SET_SCENARIO_NAMES'\nexport function setScenarioNames(data) {\n  return { type: SET_SCENARIO_NAMES, data }\n}\n\nexport const ADD_LOADING_MODULES = 'ADD_LOADING_MODULES'\nexport function addLoadingModules(data) {\n  return { type: ADD_LOADING_MODULES, data }\n}\n\nexport const REMOVE_LOADING_MODULES = 'REMOVE_LOADING_MODULES'\nexport function removeLoadingModules(data) {\n  return { type: REMOVE_LOADING_MODULES, data }\n}\n\n/**\n * PROJECTION MAPPING Actions\n */\n\nexport const SET_UI_WEBSOCKET_DATA = 'SET_UI_WEBSOCKET_DATA'\nexport function setUIWebsocketData(data) {\n  return { type: SET_UI_WEBSOCKET_DATA, data }\n}\n\nexport const SET_UI_WEBSOCKET_READY = 'SET_UI_WEBSOCKET_READY'\nexport function setUIWebsocketReady(data) {\n  return { type: SET_UI_WEBSOCKET_READY, data }\n}\n\n/**\n * Editor Actions\n */\n\nexport const LISTEN_TO_GRID_CREATOR = 'LISTEN_TO_GRID_CREATOR'\nexport function listenToGridCreator(data) {\n  return { type: LISTEN_TO_GRID_CREATOR, data }\n}\n\nexport const LISTEN_TO_ROW_EDIT = 'LISTEN_TO_ROW_EDIT'\nexport function listenToRowEdits(data) {\n  return { type: LISTEN_TO_ROW_EDIT, data }\n}\n\nexport const LISTEN_TO_TYPES_LIST = 'LISTEN_TO_TYPES_LIST'\nexport function listeonToTypesList(data) {\n  return { type: LISTEN_TO_TYPES_LIST, data }\n}\n\nexport const LISTEN_TO_BASE_MAP_CENTER = 'LISTEN_TO_BASE_MAP_CENTER'\nexport function listenToBaseMapCenter(data) {\n  return { type: LISTEN_TO_BASE_MAP_CENTER, data }\n}\n","import React, { Component } from \"react\";\nimport EditorBrush from \"./EditorBrush\";\nimport { connect } from \"react-redux\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport settings from \"../../../settings/GridEditorSettings.json\";\nimport { listenToBaseMapCenter } from \"../../../redux/actions\";\n\nexport const _hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n};\n\nclass BaseMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 12),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n    }\n\n    _toggleOrthoView = (viewState) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n    };\n\n    _onViewStateChange = ({ viewState }) => {\n        this.setState({ viewState });\n    };\n\n    componentDidUpdate = (prevProps) => {\n        if (this.props.mapCenter !== prevProps.mapCenter)\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    latitude: this.props.mapCenter.latCenter,\n                    longitude: this.props.mapCenter.lonCenter,\n                    pitch: 0,\n                    bearing: 0,\n                    orthographic: false,\n                },\n            });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                latitude: settings.GEOGRID.properties.header.latitude,\n                longitude: settings.GEOGRID.properties.header.longitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 0,\n                orthographic: true,\n            },\n        });\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        if (!this.props.selectedType) return;\n        const { height, name, color, interactive } = this.props.selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n\n        multiSelectedObj.forEach((selected) => {\n            let thisCellProps = selected.object.properties;\n            thisCellProps.color = _hexToRgb(color);\n            thisCellProps.height = parseInt(height);\n            thisCellProps.name = name;\n            if (interactive !== \"No\") {\n                thisCellProps.interactive = interactive;\n            } else {\n                delete thisCellProps.interactive;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        return (\n            this.props.selectedType && (\n                <EditorBrush\n                    mousePos={this.state.mousePos}\n                    selectedType={this.props.selectedType}\n                    divSize={this.state.pickingRadius}\n                    mouseDown={this.state.mouseDown}\n                />\n            )\n        );\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        let layers = [];\n        layers.push(\n            new GeoJsonLayer({\n                id: \"GRID\",\n                opacity: 0.5,\n                stroked: false,\n                filled: true,\n                wireframe: true,\n                data: this.props.createdGrid,\n                visible: true,\n                pickable: true,\n                extruded: true,\n                lineWidthScale: 1,\n                lineWidthMinPixels: 1,\n                getElevation: (d) => d.properties.height,\n                getFillColor: (d) => d.properties.color,\n\n                onClick: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n\n                onDrag: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n                onDragStart: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    ) {\n                        this.setState({ draggingWhileEditing: true });\n                    }\n                },\n                onDragEnd: () => {\n                    this.setState({ draggingWhileEditing: false });\n                },\n                updateTriggers: {\n                    getFillColor: this.state.selectedCellsState,\n                    getElevation: this.state.selectedCellsState,\n                },\n                transitions: {\n                    getFillColor: 500,\n                    getElevation: 500,\n                },\n            })\n        );\n\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {this._renderSelectionTarget()}\n\n                <DeckGL\n                    // sets the cursor on paint\n                    // getCursor={() => \"none\"}\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.sat}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    listenToBaseMapCenter: listenToBaseMapCenter,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedType: state.ROW_EDIT,\n        mapCenter: state.BASE_MAP_CENTER,\n        createdGrid: state.GRID_CREATED,\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap);\n","import MaterialTable from '@material-table/core'\nimport React, { useState, useEffect } from 'react'\nimport { Grid, Typography } from '@material-ui/core'\n\nimport {\n  listenToRowEdits,\n  listeonToTypesList,\n  listenToGridCreator,\n} from '../../../../redux/actions'\nimport { useDispatch } from 'react-redux'\nimport settings from '../../../../settings/GridEditorSettings.json'\n\nexport default function TypesEditor() {\n  const createtypesArray = (LanduseTypesList) => {\n    let typesArray = []\n    Object.keys(LanduseTypesList).forEach((type) => {\n      typesArray.push({\n        name: type,\n        description: 'description for: ' + type,\n        color: LanduseTypesList[type].color,\n        height: LanduseTypesList[type].height\n          ? LanduseTypesList[type].height\n          : 0,\n\n        LBCS: LanduseTypesList[type].LBCS\n          ? JSON.stringify(LanduseTypesList[type].LBCS)\n          : null,\n        NAICS: LanduseTypesList[type].NAICS\n          ? JSON.stringify(LanduseTypesList[type].NAICS)\n          : null,\n        interactive: LanduseTypesList[type].interactive,\n      })\n    })\n    return typesArray\n  }\n\n  const [state, setState] = React.useState({\n    columns: [\n      {\n        title: 'Type',\n        field: 'name',\n      },\n      {\n        title: 'Description',\n        field: 'description',\n      },\n\n      {\n        title: 'Height',\n        field: 'height',\n        type: 'numeric',\n      },\n      {\n        title: 'Interactive',\n        field: 'interactive',\n        lookup: { No: 'No', Web: 'Web', TUI: 'TUI' },\n      },\n      {\n        title: 'Color',\n        field: 'color',\n        type: 'string',\n      },\n      {\n        title: 'LBCS',\n        field: 'LBCS',\n        type: 'string',\n      },\n      {\n        title: 'NAICS',\n        field: 'NAICS',\n        type: 'string',\n      },\n    ],\n    data: createtypesArray(settings.GEOGRID.properties.types),\n  })\n\n  const dispatch = useDispatch()\n  const [selectedRow, setSelectedRow] = useState(null)\n  const [rowColor, setRowColor] = useState(null)\n\n  // redux the type list on every change\n  useEffect(() => {\n    dispatch(listeonToTypesList(state.data))\n  })\n\n  return (\n    <Grid container>\n      <Grid item xs={12} s={12} m={12} l={12} xl={12}>\n        <MaterialTable\n          title={<Typography variant=\"h2\">Types Editor</Typography>}\n          columns={state.columns}\n          data={state.data}\n          options={{\n            paging: false,\n            search: true,\n            selection: false,\n            rowStyle: (rowData) => ({\n              fontFamily: 'Roboto Mono',\n              fontSize: 12,\n              backgroundColor:\n                selectedRow === rowData.tableData.id ? rowColor : null,\n            }),\n          }}\n          onRowClick={(evt, row) => {\n            setSelectedRow(row.tableData.id)\n            setRowColor(row.color)\n            dispatch(listenToRowEdits(row))\n          }}\n          editable={{\n            onRowAdd: (newData) =>\n              new Promise((resolve) => {\n                setTimeout(() => {\n                  resolve()\n                  setState((prevState) => {\n                    const data = [...prevState.data]\n                    data.push(newData)\n                    return { ...prevState, data }\n                  })\n                }, 200)\n              }),\n            onRowUpdate: (newData, oldData) =>\n              new Promise((resolve) => {\n                setTimeout(() => {\n                  resolve()\n                  if (oldData) {\n                    setState((prevState) => {\n                      const data = [...prevState.data]\n                      data[data.indexOf(oldData)] = newData\n\n                      return { ...prevState, data }\n                    })\n                  }\n\n                  // dispath change to redux\n                  dispatch(listenToRowEdits(newData))\n                }, 200)\n              }),\n            onRowDelete: (oldData) =>\n              new Promise((resolve) => {\n                console.log(oldData)\n\n                setTimeout(() => {\n                  resolve()\n                  setState((prevState) => {\n                    const data = [...prevState.data]\n                    data.splice(data.indexOf(oldData), 1)\n                    return { ...prevState, data }\n                  })\n\n                  dispatch(listenToGridCreator(null))\n                }, 200)\n              }),\n          }}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n","import proj4 from \"proj4\";\nimport { _hexToRgb } from \"../../../EditorMap/EditorMap\";\n\nfunction deg_to_rad(deg) {\n    return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n    return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n    var keys = Object.keys(obj);\n    return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps, typesList) => {\n    let top_left_lon = parseFloat(gridProps.longitude);\n    let top_left_lat = parseFloat(gridProps.latitude);\n    let rotation = parseFloat(gridProps.rotation);\n    let userPrj = gridProps.projection;\n    let cell_size = parseFloat(gridProps.cellSize);\n    let nrows = parseFloat(gridProps.nrows);\n    let ncols = parseFloat(gridProps.ncols);\n\n    const webMercator = proj4.defs(\"EPSG:4326\");\n    let EARTH_RADIUS_M = 6.371e6;\n    let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n    let bearing = (90 - rotation + 360) % 360;\n    let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n    let la1 = deg_to_rad(top_left_lon_lat.lat);\n    let lo1 = deg_to_rad(top_left_lon_lat.lon);\n    let bearing_rad = deg_to_rad(bearing);\n    let la2 = Math.asin(\n        Math.sin(la1) * Math.cos(Ad) +\n            Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n    );\n    let lo2 =\n        lo1 +\n        Math.atan2(\n            Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n            Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n        );\n    let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n    let top_left_xy = proj4(webMercator, userPrj, [\n        top_left_lon_lat.lon,\n        top_left_lon_lat.lat,\n    ]);\n\n    let top_right_xy = proj4(webMercator, userPrj, [\n        top_right_lon_lat.lon,\n        top_right_lon_lat.lat,\n    ]);\n\n    let dydx =\n        (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n    let theta = Math.atan(dydx);\n    let cosTheta = Math.cos(theta);\n    let sinTheta = Math.sin(theta);\n    // create rotate matrix\n    let x_unRot = [];\n    let y_unRot = [];\n    for (let i = 0; i < nrows; i++) {\n        for (let j = 0; j < ncols; j++) {\n            x_unRot.push(j * cell_size);\n            y_unRot.push(-i * cell_size);\n        }\n    }\n\n    let x_rot = [];\n    let y_rot = [];\n    for (let i = 0; i < x_unRot.length; i++) {\n        x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n        y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n    }\n\n    let x_rot_trans = [];\n    let y_rot_trans = [];\n    for (let i = 0; i < x_rot.length; i++) {\n        x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n        y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n    }\n\n    var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n    var dydCol = y_rot_trans[1] - y_rot_trans[0];\n    var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n    var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n    let gridPnts = [];\n    let geojsonFeatureCollection = {\n        type: \"FeatureCollection\",\n        // polygons go here\n        features: [],\n    };\n\n    // get a list of types that is updated based on\n    // the current redux state of the types list table\n    let types = typesList;\n\n    for (let i = 0; i < x_rot_trans.length; i++) {\n        let rndType = randomProperty(types);\n\n        let geojsonPolygon = {\n            type: \"Feature\",\n            geometry: {\n                type: \"Polygon\",\n                coordinates: null,\n            },\n            properties: {\n                color: _hexToRgb(rndType.color),\n                height: rndType.height,\n                name: rndType.name,\n                interactive: rndType.interactive,\n                id: i,\n            },\n        };\n\n        var polygon_xy = [\n            [x_rot_trans[i], y_rot_trans[i]],\n            [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n            [\n                x_rot_trans[i] + dxdRow + dxdCol,\n                y_rot_trans[i] + dydRow + dydCol,\n            ],\n            [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n            [x_rot_trans[i], y_rot_trans[i]],\n        ];\n\n        var polygon_ll = [];\n        for (var v = 0; v < 5; v++) {\n            let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n            polygon_ll.push(ll);\n        }\n\n        geojsonPolygon.geometry.coordinates = [polygon_ll];\n        gridPnts.push(geojsonPolygon);\n    }\n    geojsonFeatureCollection.features = gridPnts;\n    return geojsonFeatureCollection;\n};\n","import React from \"react\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport Button from \"@material-ui/core/Button\";\nimport { gridCreator } from \"./gridCreator\";\nimport { listenToGridCreator } from \"../../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n\nexport default function GridMaker(props) {\n    const dispatch = useDispatch();\n    const reduxState = useSelector((state) => state);\n\n    const handleGridCreation = () => {\n        let grid = gridCreator(props.gridProps, reduxState.TYPES_LIST);\n        dispatch(listenToGridCreator(grid));\n    };\n\n    return (\n        <Button\n            onClick={() => {\n                handleGridCreation();\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<AppsIcon />}\n        >\n            Create Grid\n        </Button>\n    );\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\nimport axios from 'axios'\nimport settings from '../../../../../settings/GridEditorSettings.json'\nimport globalSettings from '../../../../../settings/settings.json'\nimport Typography from '@material-ui/core/Typography'\nimport { useSelector } from 'react-redux'\nimport Link from '@material-ui/core/Link'\n\nconst reqResonseUI = (response, tableName) => {\n  let cityscopeJSendpoint =\n    'https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=' + tableName\n  // create the feedback text\n  let resText = (\n    <Typography color=\"textPrimary\" variant=\"caption\">\n      CityIO is {response.data.status}. Grid deployed to{' '}\n      <Link color=\"textSecondary\" href={cityscopeJSendpoint}>\n        {cityscopeJSendpoint}\n      </Link>\n    </Typography>\n  )\n\n  return resText\n}\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst makeGEOGRIDobject = (struct, typesList, geoJsonFeatures, gridProps) => {\n  let GEOGRID_object = struct\n\n  // take types list and prepare to csJS format\n  let newTypesList = {}\n\n  typesList.forEach((oldType) => {\n    newTypesList[oldType.name] = oldType\n    //material-table creates strings for these items\n    // so in first \"Commit to cityIO\", these must be turned into\n    // Json objects. On Second commit, these are already objects,\n    // hence the two conditions below\n\n    newTypesList[oldType.name].LBCS =\n      typeof oldType.LBCS == 'string' ? JSON.parse(oldType.LBCS) : oldType.LBCS\n    newTypesList[oldType.name].NAICS =\n      typeof oldType.NAICS == 'string'\n        ? JSON.parse(oldType.NAICS)\n        : oldType.NAICS\n  })\n\n  GEOGRID_object.properties.types = newTypesList\n\n  // inject table props to grid\n  GEOGRID_object.properties.header = gridProps\n  GEOGRID_object.properties.header.longitude = parseFloat(\n    GEOGRID_object.properties.header.longitude,\n  )\n  GEOGRID_object.properties.header.latitude = parseFloat(\n    GEOGRID_object.properties.header.latitude,\n  )\n  GEOGRID_object.properties.header.rotation = parseFloat(\n    GEOGRID_object.properties.header.rotation,\n  )\n  GEOGRID_object.properties.header.nrows = parseFloat(\n    GEOGRID_object.properties.header.nrows,\n  )\n  GEOGRID_object.properties.header.ncols = parseFloat(\n    GEOGRID_object.properties.header.ncols,\n  )\n  GEOGRID_object.properties.header.cellSize = parseFloat(\n    GEOGRID_object.properties.header.cellSize,\n  )\n\n  // lastly get the grid features\n  GEOGRID_object.features = geoJsonFeatures\n  return GEOGRID_object\n}\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst makeGEOGRIDDATAobject = (geoJsonFeatures) => {\n  let GEOGRIDDATA_object = []\n  geoJsonFeatures.forEach((element) => {\n    GEOGRIDDATA_object.push(element.properties)\n  })\n  return GEOGRIDDATA_object\n}\n\nexport default function CommitGrid(props) {\n  const [reqResonse, setReqResonse] = React.useState(null)\n\n  const reduxState = useSelector((state) => state)\n  const hasGrid = reduxState.GRID_CREATED\n\n  const downloadObjectAsJson = () => {\n    let GEOGRIDstruct = settings.GEOGRID\n\n    let typesList = reduxState.TYPES_LIST\n    let geoJsonFeatures = reduxState.GRID_CREATED.features\n    let gridProps = props.gridProps\n    let GEOGRID_object = makeGEOGRIDobject(\n      GEOGRIDstruct,\n      typesList,\n      geoJsonFeatures,\n      gridProps,\n    )\n    var dataStr =\n      'data:text/json;charset=utf-8,' +\n      encodeURIComponent(JSON.stringify(GEOGRID_object))\n    var downloadAnchorNode = document.createElement('a')\n    downloadAnchorNode.setAttribute('href', dataStr)\n    downloadAnchorNode.setAttribute('download', 'grid.json')\n    document.body.appendChild(downloadAnchorNode) // required for firefox\n    downloadAnchorNode.click()\n    downloadAnchorNode.remove()\n  }\n\n  const postGridToCityIO = () => {\n    let GEOGRIDstruct = settings.GEOGRID\n    let typesList = reduxState.TYPES_LIST\n    let geoJsonFeatures = reduxState.GRID_CREATED.features\n    let gridProps = props.gridProps\n    // take grid struct from settings\n    let GEOGRID_object = makeGEOGRIDobject(\n      GEOGRIDstruct,\n      typesList,\n      geoJsonFeatures,\n      gridProps,\n    )\n\n    let GEOGRIDDATA_object = makeGEOGRIDDATAobject(geoJsonFeatures)\n    let tableName = GEOGRID_object.properties.header.tableName.toLowerCase()\n\n    const geoGridOptions = (URL, DATA) => {\n      return {\n        method: 'post',\n        url: URL,\n        data: DATA,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n      }\n    }\n\n    const table_url = `${globalSettings.cityIO.baseURL}${tableName}/`\n    const new_table_grid = {\n      GEOGRID: GEOGRID_object,\n      GEOGRIDDATA: GEOGRIDDATA_object,\n    }\n\n    axios(geoGridOptions(table_url, new_table_grid))\n      .then(function (response) {\n        setReqResonse(reqResonseUI(response, tableName))\n      })\n      .catch((error) => console.log(`ERROR: ${error}`))\n  }\n\n  return (\n    <>\n      {hasGrid && (\n        <>\n          <Button\n            onClick={() => {\n              postGridToCityIO()\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<CloudUploadIcon />}\n          >\n            Commit Grid to cityIO\n          </Button>\n\n          <Button\n            onClick={() => {\n              // ! download as json\n              downloadObjectAsJson()\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<CloudDownloadIcon />}\n          >\n            Download JSON\n          </Button>\n\n          <div style={{ width: '100%' }}> {reqResonse}</div>\n        </>\n      )}\n    </>\n  )\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CenterFocusStrongIcon from \"@material-ui/icons/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\n\nimport { listenToBaseMapCenter } from \"../../../../../redux/actions\";\n\nexport default function CenterMapButton(props) {\n    const dispatch = useDispatch();\n\n    return (\n        <Button\n            onClick={() => {\n                dispatch(\n                    listenToBaseMapCenter({\n                        latCenter: parseFloat(props.mapCenter[0]),\n                        lonCenter: parseFloat(props.mapCenter[1]),\n                    })\n                );\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<CenterFocusStrongIcon />}\n            style={{ fontSize: \"12px\" }}\n        >\n            Center Map\n        </Button>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GridMaker from \"./GridMaker\";\nimport CommitGrid from \"./CommitGrid\";\nimport CenterMapButton from \"./CenterMapButton/CenterMapButton\";\nimport settings from \"../../../../settings/GridEditorSettings.json\";\n\n\nexport default function GridProps() {\n    const useStyles = makeStyles((theme) => ({\n        notchedOutline: {\n            borderWidth: \"1px\",\n            borderColor: theme.palette.text.secondary,\n        },\n        root: {\n            \"& .MuiTextField-root\": {\n                margin: theme.spacing(1),\n                flexWrap: \"wrap\",\n            },\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n    }));\n\n    const [formValues, setformValues] = React.useState({\n        tableName: \"CityScopeJS\",\n        latitude: settings.GEOGRID.properties.header.latitude,\n        longitude: settings.GEOGRID.properties.header.longitude,\n        tz:settings.GEOGRID.properties.header.tz, \n        nrows: settings.GEOGRID.properties.header.nrows,\n        ncols: settings.GEOGRID.properties.header.nrows,\n        rotation: settings.GEOGRID.properties.header.rotation,\n        cellSize: settings.GEOGRID.properties.header.cellSize,\n        projection: settings.GEOGRID.properties.header.projection,\n    });\n\n    const handleChangeForm = (event) => {\n        const { id, value } = event.target;\n        setformValues({ ...formValues, [id]: value });\n    };\n\n    const classes = useStyles();\n\n    //  get all data\n    // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\">\n            <Typography variant=\"h2\">Grid Properties</Typography>\n            <div className={classes.root}>\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"tableName\"\n                    label=\"CityScope Project Name\"\n                    defaultValue={formValues.tableName}\n                />\n            </div>\n            <div className={classes.root}>\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"latitude\"\n                    label=\"Latitude\"\n                    defaultValue={formValues.latitude}\n                    type=\"number\"\n                />\n\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"longitude\"\n                    label=\"Longitude\"\n                    defaultValue={formValues.longitude}\n                    type=\"number\"\n                />\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"tz\"\n                    label=\"Time Zone (GMT)\"\n                    defaultValue={formValues.tz}\n                    type=\"number\"\n                />\n            </div>\n            <div className={classes.root}>\n                <CenterMapButton\n                    mapCenter={[formValues.latitude, formValues.longitude]}\n                />\n            </div>\n            <div className={classes.root}>\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"nrows\"\n                    label=\"Rows\"\n                    defaultValue={formValues.nrows}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 100,\n                            min: 0,\n                        },\n                    }}\n                />\n\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"ncols\"\n                    label=\"Columns\"\n                    defaultValue={formValues.ncols}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 100,\n                            min: 0,\n                        },\n                    }}\n                />\n\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"rotation\"\n                    label=\"Rotation (deg)\"\n                    defaultValue={formValues.rotation}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 360,\n                            min: 0,\n                        },\n                    }}\n                />\n\n                <TextField\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    className={classes.textField}\n                    id=\"cellSize\"\n                    label=\"Cell Size (m^2)\"\n                    defaultValue={formValues.cellSize}\n                    type=\"number\"\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                        inputProps: {\n                            max: 1000,\n                            min: 0,\n                        },\n                    }}\n                />\n            </div>\n            <div className={classes.root}>\n                <TextField\n                    InputProps={{\n                        classes: {\n                            notchedOutline: classes.notchedOutline,\n                        },\n                    }}\n                    onChange={(event) => handleChangeForm(event)}\n                    variant=\"outlined\"\n                    id=\"projection\"\n                    label=\"Projection\"\n                    defaultValue={formValues.projection}\n                    type=\"string\"\n                    helperText=\"Default projection should work for most CityScope cases. Find specific projections at: https://epsg.io/\"\n                />\n            </div>\n            <div className={classes.root}>\n                <GridMaker gridProps={formValues} />\n                <CommitGrid gridProps={formValues} />\n            </div>\n        </form>\n    );\n}\n","// // export default EditMenuMain;\n\nimport TypesEditor from './TypesEditor'\nimport GridProps from './GridProps'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport Typography from '@material-ui/core/Typography'\n\nexport default function EditorMenu() {\n  return (\n    <List>\n      <ListItem>\n        <Typography variant=\"h1\">CityScope Grid Editor</Typography>\n      </ListItem>\n      <ListItem>\n        <Typography>\n          This tool is for creating CityScope projects with virtual editable\n          girds, types, and props, and deploy them to cityIO.\n        </Typography>\n      </ListItem>\n      <ListItem>\n        <GridProps />\n      </ListItem>\n      <ListItem>\n        <TypesEditor />\n      </ListItem>\n    </List>\n  )\n}\n","import EditorMap from \"./EditorMap/EditorMap\";\nimport EditorMenu from \"./EditorMenu\";\nimport {\n    makeStyles,\n    Grid,\n    Card,\n    CardContent,\n    Container,\n} from \"@material-ui/core\";\nimport Page from \"../../layouts/Page\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: \"auto\",\n        height: \"100%\",\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n}));\n\nexport default function GridEditor() {\n    const classes = useStyles();\n\n    return (\n        <Page className={classes.root} title=\"Editor\">\n            <Container maxWidth={false}>\n                <>\n                    <Grid container spacing={5}>\n                        <Grid item xs={12} l={6} md={6} xl={4}>\n                            <Card\n                                elevation={15}\n                                style={{\n                                    maxHeight: \"85vh\",\n                                    overflow: \"auto\",\n                                }}\n                            >\n                                <CardContent>\n                                    <EditorMenu />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        <Grid item xs={12} l={6} md={6} xl={8}>\n                            <Card\n                                elevation={15}\n                                style={{\n                                    height: \"85vh\",\n                                    width: \"100%\",\n                                    position: \"relative\",\n                                }}\n                            >\n                                <CardContent>\n                                    <EditorMap />\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </>\n            </Container>\n        </Page>\n    );\n}\n","import axios from \"axios\";\nimport settings from \"../../../settings/settings.json\";\n\nexport const getScenarioIndices = (\n    tableName,\n    setScenarioNames,\n    setLoadingState\n) => {\n    var url = `${settings.cityIO.baseURL}${tableName}/meta/hashes`;\n    axios\n        .get(url)\n        .then((res) => {\n            const metaDataKeys = Object.keys(res.data);\n            const scenarioIndices = metaDataKeys\n                .filter((str) => str.includes(\"scenarios\"))\n                .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n            const promises = [];\n            for (const id of scenarioIndices) {\n                promises.push(getScenarioName(tableName, id));\n            }\n            Promise.all(promises)\n                .then((res) => {\n                    setScenarioNames(\n                        res.map((r) => ({\n                            name: r.data.name,\n                            id: r.data.id,\n                        }))\n                    );\n                    setLoadingState && setLoadingState(false);\n                })\n                .catch((err) =>\n                    console.log(\"error getting scenario names\", err)\n                );\n        })\n        .catch((err) => {\n            console.log(\"Error getting scenarios\", err);\n        });\n};\n\nexport const getScenarioName = (tableName, id) => {\n    const url =\n\t\t`${settings.cityIO.baseURL}${tableName}/scenarios${id}/info/`;\n    return axios.get(url);\n};\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n    setScenarioNames,\n    addLoadingModules,\n    removeLoadingModules,\n} from \"../../../redux/actions\";\nimport settings from \"../../../settings/settings.json\";\nimport { getScenarioIndices } from \"./utils\";\n\nconst getAPICall = async (URL) => {\n    try {\n        // ! should add 'retry' here\n        // ! https://stackoverflow.com/questions/56074531/how-to-retry-5xx-requests-using-axios\n        const response = await axios.get(URL);\n        return response.data;\n    } catch (err) {\n        console.log(err);\n    }\n};\n\nexport default function CityIO(props) {\n    const { tableName } = props;\n    const [hashId, setHashId] = useState(null);\n    const [hashes, setHashes] = useState({});\n    const cityioURL = `${settings.cityIO.baseURL}${tableName}/`;\n    const cityioData = useSelector((state) => state.CITYIO);\n\n    const dispatch = useDispatch();\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    useEffect(() => {\n        const timer = setTimeout(update, settings.cityIO.interval);\n        console.log(\"reading cityIO every\" + settings.cityIO.interval + \"ms\");\n        return () => clearTimeout(timer);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    async function update() {\n        // recursively get hashes\n        const newHashId = await getAPICall(cityioURL + \"meta/id/\");\n        if (hashId !== newHashId) {\n            setHashId(newHashId);\n        }\n        setTimeout(update, settings.cityIO.interval);\n    }\n\n    async function getModules() {\n        const newHashes = await getAPICall(cityioURL + \"meta/hashes/\");\n        const promises = [];\n        const loadingModules = [];\n        const pickedModules = settings.cityIO.cityIOmodules.map((x) => x.name);\n        // for each of the modules in settings, add api call to promises\n        pickedModules.forEach((module) => {\n            if (hashes[module] !== newHashes[module]) {\n                promises.push(getAPICall(`${cityioURL}${module}/`));\n                loadingModules.push(module);\n            } else {\n                promises.push(null);\n            }\n        });\n        dispatch(addLoadingModules(loadingModules));\n        const modules = await Promise.all(promises);\n        setHashes(newHashes);\n\n        // update cityio object with modules data\n        const modulesData = pickedModules.reduce((obj, k, i) => {\n            if (modules[i]) {\n                console.log(`updating ${k}`);\n                return { ...obj, [k]: modules[i] };\n            } else {\n                return obj;\n            }\n        }, cityioData);\n        modulesData.tableName = tableName;\n\n        dispatch(removeLoadingModules(loadingModules));\n\n        // send to cityio\n        dispatch(getCityioData(modulesData));\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        dispatch(setReadyState(true));\n        dispatch(setLoadingState(false));\n    }\n\n    useEffect(() => {\n        //! only update if hashId changes\n        if (!hashId) {\n            return;\n        }\n        // reset the state of loading flag\n        dispatch(setLoadingState(true));\n        // set Scenario Names and Ids\n        getScenarioIndices(tableName, (data) =>\n            dispatch(setScenarioNames(data))\n        );\n        getModules();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [hashId]);\n\n    return null;\n}\n","export default __webpack_public_path__ + \"static/media/legoio.148c5ab6.png\";","import { Typography, Link, Card, CardContent } from '@material-ui/core'\n\nexport default function SelectedTable(props) {\n  const clicked = props.clicked\n  const cityscopeJSendpoint =\n    'https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope='\n\n\t// 'http://localhost:3000/CS_cityscopeJS/?cityscope='\n\t\nconsole.log(clicked.object);\n\n  return (\n    <Card\n      elevation={15}\n      style={{\n        position: 'relative',\n        zIndex: 100,\n      }}\n    >\n      <CardContent>\n        <Typography variant=\"h2\" color=\"textPrimary\">\n          CityScope {clicked.object.tableName}\n        </Typography>\n        <Typography>\n          <Link\n            color={'secondary'}\n            href={cityscopeJSendpoint + clicked.object.tableName.toLowerCase()}\n          >\n            Go to project\n          </Link>{' '}\n          or{' '}\n          <Link\n            target={'blank'}\n            color={'secondary'}\n            href={clicked.object.tableURL}\n          >\n            view raw data on cityIO.\n          </Link>\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { _MapContext } from 'react-map-gl'\nimport { DeckGL } from '@deck.gl/react'\nimport { _GlobeView as GlobeView, COORDINATE_SYSTEM } from '@deck.gl/core'\nimport { TileLayer } from '@deck.gl/geo-layers'\nimport { FlyToInterpolator } from 'deck.gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport { LineLayer, IconLayer, TextLayer, BitmapLayer } from '@deck.gl/layers'\nimport icon from './legoio.png'\n\nimport SelectedTable from './SelectedTable'\n\n// * draggable pin https://github.com/visgl/react-map-gl/tree/6.1-release/examples/draggable-markers\n\nexport default function CityIOdeckGLmap(props) {\n  const [markerInfo, setMarkerInfo] = useState([])\n  const [clicked, setClicked] = useState()\n  const [zoom, setZoom] = useState()\n  const INIT_VIEW = {\n    longitude: -71.060929,\n    latitude: 42.3545259,\n    zoom: 1,\n    pitch: 0,\n    bearing: 0,\n    zHeight: 2000000,\n  }\n\n  const [viewport, setViewport] = useState(INIT_VIEW)\n  const [initialViewState, setInitialViewState] = useState(viewport)\n  // boolean for hovering flag\n  let isHovering = false\n\n  useEffect(() => {\n    // set initial zoom level to refelct layers appearance\n    setZoom(INIT_VIEW.zoom)\n    document\n      .getElementById('deckgl-wrapper')\n      .addEventListener('contextmenu', (evt) => evt.preventDefault())\n  }, [INIT_VIEW.zoom])\n\n  useEffect(() => {\n    let markersArr = []\n    props.cityIOdata.forEach((table, index) => {\n      const RND_1 = Math.random() * 10\n      const RND_2 = Math.random() * 10\n      markersArr.push({\n        tableURL: table.tableURL,\n        tableName: table.tableName,\n        index: index,\n        tableHeader: table.tableHeader,\n        coord: {\n          from: [table.tableHeader.longitude, table.tableHeader.latitude],\n          to: [\n            table.tableHeader.longitude + RND_1,\n            table.tableHeader.latitude + RND_2,\n            INIT_VIEW.zHeight,\n          ],\n        },\n      })\n    })\n    setMarkerInfo(markersArr)\n  }, [props, INIT_VIEW.zHeight])\n\n  const layers = [\n    new TileLayer({\n      data:\n        'https://basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png',\n\n      /**\n       * \n       * TESTS WITH OTHER TILESETS  \n       * 'https://api.mapbox.com/v4/mapbox.mapbox-streets-v8/{z}/{x}/{y}.png' +\n      '?style=' +\n      'mapbox://styles/mapbox/dark-v10' +\n      'mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq' +\n      'mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd' +\n      '&access_token=' +\n      process.env.REACT_APP_MAPBOX_TOKEN,\n\n     settings.map.mapStyle.sat,\n       'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\n       */\n\n      minZoom: 0,\n      maxZoom: 19,\n      tileSize: 96,\n\n      renderSubLayers: (props) => {\n        const {\n          bbox: { west, south, east, north },\n        } = props.tile\n\n        return new BitmapLayer(props, {\n          data: null,\n          image: props.data,\n          _imageCoordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n          bounds: [west, south, east, north],\n        })\n      },\n    }),\n\n    new LineLayer({\n      id: 'LineLayer',\n      data: markerInfo,\n      pickable: true,\n      getWidth: zoom < 2 ? 2 : 0,\n      getSourcePosition: (d) => d.coord.from,\n      getTargetPosition: (d) => d.coord.to,\n      getColor: (d) => [255, 82, 120],\n    }),\n    new TextLayer({\n      id: 'text-layer',\n      data: markerInfo,\n      pickable: true,\n      getPosition: (d) => d.coord.to,\n      getText: (d) => d.tableName,\n      getColor: [255, 82, 120],\n      getSize: zoom < 2 ? 0 : 5,\n      getAngle: 0,\n      getPixelOffset: [10, 5],\n      getTextAnchor: 'start',\n      getAlignmentBaseline: 'center',\n    }),\n    new IconLayer({\n      id: 'icon-layer',\n      data: markerInfo,\n      pickable: true,\n      iconAtlas: icon,\n      onClick: (d) => {\n        setInitialViewState({\n          longitude: d.object.coord.to[0],\n          latitude: d.object.coord.to[1],\n          zoom: 3,\n          pitch: 0,\n          bearing: 0,\n          transitionDuration: 1000,\n          transitionInterpolator: new FlyToInterpolator(),\n        })\n\n        setClicked(d)\n      },\n      iconMapping: {\n        marker: { x: 0, y: 0, width: 768, height: 768, mask: false },\n      },\n      getIcon: (d) => 'marker',\n      sizeScale: 1,\n      getSize: zoom < 5 ? 30 : 15,\n      getPosition: (d) => [d.coord.to[0], d.coord.to[1], INIT_VIEW.zHeight],\n    }),\n  ]\n\n  return (\n    <>\n      {clicked && clicked.object && <SelectedTable clicked={clicked} />}\n\n      <DeckGL\n        views={new GlobeView()}\n        onHover={({ object }) => (isHovering = Boolean(object))}\n        getCursor={({ isDragging }) =>\n          isDragging ? 'grabbing' : isHovering ? 'crosshair' : 'grab'\n        }\n        layers={layers}\n        controller={true}\n        initialViewState={initialViewState}\n        onViewportChange={setViewport}\n        onViewStateChange={(d) => setZoom(d.viewState.zoom)}\n        ContextProvider={_MapContext.Provider}\n      ></DeckGL>\n    </>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport CityIOdeckGLmap from './CityIOdeckGLmap/index'\n\nimport axios from 'axios'\nimport settings from '../../settings/settings.json'\n\nexport default function CityIOlist() {\n  const [tableList, setTableList] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const fetchCityIOtables = async () => {\n    // ! https://stackoverflow.com/questions/37213783/waiting-for-all-promises-called-in-a-loop-to-finish\n    const cityIOlistURL = settings.cityIO.ListOfTables\n    // get all URLs\n    const tablesArr = await axios.get(cityIOlistURL)\n    // create array of all requests\n    const requestArr = tablesArr.data.map(async (tableName) => {\n      // const tableName = urlStr.split('/').pop()\n\t  const url = `${settings.cityIO.baseURL}${tableName}/`;\n      return axios\n        .get(`${url}GEOGRID/properties/header/`)\n        .then((res) =>\n          setTableList((oldArray) => [\n            ...oldArray,\n            { tableURL: url, tableName: tableName, tableHeader: res.data },\n          ]),\n        )\n        .catch((error) => console.log(error.toString()))\n    })\n\n    Promise.all(requestArr).then(() => {\n      return\n    })\n  }\n\n  useEffect(() => {\n    fetchCityIOtables().then(setIsLoading(false))\n  }, [])\n\n  return <>{!isLoading && <CityIOdeckGLmap cityIOdata={tableList} />}</>\n}\n","import React, { useState, useEffect } from 'react'\nimport Typography from '@material-ui/core/Typography'\n\nexport default function GetGITdate() {\n  const [gitMeta, setGitMeta] = useState({\n    author: '',\n    branch: '',\n    date: '',\n    sha: '',\n    link: '',\n  })\n\n  const URL =\n    'https://api.github.com/repos/CityScope/CS_cityscopeJS/branches/master'\n\n  const fetchGitHub = () =>\n    fetch(URL)\n      .then((response) => {\n        response.json().then((json) => {\n          setGitMeta({\n            author: json.commit.commit.author.name,\n            date: json.commit.commit.author.date,\n            sha: json.commit.sha,\n          })\n        })\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  // run only once\n  useEffect(() => {\n    fetchGitHub()\n  }, [])\n\n  const gitMetaComp = (\n    <>\n      <Typography color={'primary'} variant={'h5'}>\n        CityScopeJS Development Tracking\n      </Typography>\n      <Typography color={'primary'}>\n        Author: {JSON.parse(JSON.stringify(gitMeta.author))}\n      </Typography>\n      <Typography color={'primary'}>\n        Date: {JSON.parse(JSON.stringify(gitMeta.date))}\n      </Typography>\n      <Typography color={'primary'}>\n        Hash: {JSON.parse(JSON.stringify(gitMeta.sha))}\n      </Typography>\n    </>\n  )\n\n  return gitMetaComp\n}\n","import {\n  Divider,\n  Typography,\n  makeStyles,\n  Card,\n  CardContent,\n  Link,\n} from '@material-ui/core'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport GetGITdate from './GetGITdate'\n\nconst useStyles = makeStyles((theme) => ({\n  divider: {\n    margin: theme.spacing(2),\n  },\n}))\nexport default function SplashScreen() {\n  const classes = useStyles()\n\n  return (\n    <>\n      <Card elevation={15}>\n        <CardContent>\n          <Typography color=\"textPrimary\" variant=\"h1\">\n            MIT CityScope\n          </Typography>\n\n          <Divider className={classes.divider} light />\n\n          <Typography color=\"textPrimary\" variant=\"h4\">\n            MIT CityScope is an open-source urban modeling and simulation\n            platform. CityScope allows users to examine different design\n            alternatives, and observe their impact through multiple layers of\n            urban analytics modules, such as traffic models, ABM simulation,\n            urban access, economy, storm-water, noise and more.\n          </Typography>\n        </CardContent>\n      </Card>\n\n      <Divider className={classes.divider} light />\n\n      <Card elevation={15}>\n        <CardContent position={'bottom'}>\n          <Typography color=\"textPrimary\" gutterBottom>\n            MIT CityScopeJS open-source project is developed by MIT, the City\n            Science Network, and contributers from all over the world.\n          </Typography>\n\n          <Typography>\n            <Link\n              color={'secondary'}\n              href={'https://github.com/CityScope'}\n              target={'blank'}\n            >\n              <GitHubIcon fontSize={'small'} /> Join the CityScope open-source\n              development\n            </Link>\n          </Typography>\n        </CardContent>\n      </Card>\n\n      <Divider className={classes.divider} light />\n\n      <Card elevation={15}>\n        <CardContent position={'bottom'}>\n          <Typography color=\"textPrimary\" gutterBottom>\n            Map view is provided via CityIO, CityScope server.\n          </Typography>\n          <Typography>\n            <Link\n              color={'secondary'}\n              href={'https://github.com/CityScope/CS_CityIO'}\n              target={'blank'}\n            >\n              <GitHubIcon fontSize={'small'} />{' '}\n              https://github.com/CityScope/CS_CityIO\n            </Link>\n          </Typography>\n        </CardContent>\n      </Card>\n\n      <Divider className={classes.divider} light />\n\n      <Card elevation={15}>\n        <CardContent position={'bottom'}>\n          <GetGITdate />\n        </CardContent>\n      </Card>\n    </>\n  )\n}\n","import { makeStyles, Container } from '@material-ui/core'\nimport CityIOlist from './CityIOlist'\nimport Page from '../../layouts/Page'\nimport SplashScreen from './SplashScreen'\n\nexport default function CityIOviewer() {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: 'auto',\n        height: '100%',\n        padding: theme.spacing(3),\n      },\n    },\n    fixedPosition: {\n      position: 'relative',\n      zIndex: 100,\n    },\n  }))\n\n  const classes = useStyles()\n  return (\n    <>\n      <Page className={classes.root} title=\"CityScope Projects List\">\n        <div\n          style={{\n            height: '50vh',\n            width: '100%',\n            position: 'relative',\n          }}\n        >\n          <CityIOlist />\n        </div>\n\n        <Container className={classes.fixedPosition}>\n          <SplashScreen />\n        </Container>\n      </Page>\n    </>\n  )\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    SCENARIO_NAMES: [],\n    MAP: {},\n    LOADING_MODULES: [],\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.currentSimHour,\n            settings.map.layers.ABM.endSimHour,\n        ],\n        speed: settings.map.layers.ABM.animationSpeed,\n    },\n    ABM_MODE: \"mode\",\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: null,\n    READY: false,\n    LOADING: false,\n\n    /**\n     * ! EDITOR INIT STATE\n     */\n\n    ROW_EDIT: null,\n    BASE_MAP_CENTER: {\n        latCenter: null,\n        lonCenter: null,\n    },\n    TYPES_LIST: null,\n    GRID_CREATED: null,\n};\n\nexport default initialState;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\n\nconst LoadingSpinner = () => {\n    const [loadingModules] = useSelector((state) => [state.LOADING_MODULES]);\n\n    return (\n        <>\n            {loadingModules.map((module, index) => {\n                return (\n                    <Box\n                        position=\"fixed\"\n                        bottom={index * 50}\n                        right=\"2vw\"\n                        width=\"10vw\"\n                        zIndex=\"101\"\n                        margin=\"0\"\n                        key={module}\n                    >\n                        <LinearProgress color={'secondary'} />\n                        <Typography\n                            variant=\"h6\"\n                            color=\"primary\"\n                            style={{ marginRight: \"10px\" }}\n                        >\n                            {module}\n                        </Typography>\n                    </Box>\n                );\n            })}\n        </>\n    );\n};\n\nexport default LoadingSpinner;\n","import {\n  GET_CITYIO_DATA,\n  MENU_INTERACTION,\n  LISTEN_TO_MAP_EVENTS,\n  LISTEN_TO_ABM_SLIDERS,\n  LISTEN_TO_EDIT_MENU,\n  SET_READY_STATE,\n  SET_LOADING_STATE,\n  SET_SCENARIO_NAMES,\n  LISTEN_TO_ACCESS_TOGGLE,\n  LISTEN_TO_ROW_EDIT,\n  LISTEN_TO_TYPES_LIST,\n  LISTEN_TO_GRID_CREATOR,\n  LISTEN_TO_BASE_MAP_CENTER,\n  LISTEN_TO_ABM_MODE,\n  ADD_LOADING_MODULES,\n  REMOVE_LOADING_MODULES,\n  SET_UI_WEBSOCKET_DATA,\n  SET_UI_WEBSOCKET_READY,\n} from './actions'\nimport initialState from './initialState'\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_CITYIO_DATA:\n      return { ...state, CITYIO: action.data }\n    case MENU_INTERACTION:\n      return { ...state, MENU: action.data }\n    case LISTEN_TO_MAP_EVENTS:\n      return { ...state, MAP: action.data }\n    case LISTEN_TO_ABM_SLIDERS:\n      return { ...state, SLIDERS: action.data }\n    case LISTEN_TO_ABM_MODE:\n      return { ...state, ABM_MODE: action.data }\n    case LISTEN_TO_ACCESS_TOGGLE:\n      return { ...state, ACCESS_TOGGLE: action.data }\n    case LISTEN_TO_EDIT_MENU:\n      return { ...state, SELECTED_TYPE: action.data }\n    case SET_READY_STATE:\n      return { ...state, READY: action.data }\n    case SET_LOADING_STATE:\n      return { ...state, LOADING: action.data }\n    case SET_SCENARIO_NAMES:\n      return { ...state, SCENARIO_NAMES: action.data }\n    case ADD_LOADING_MODULES:\n      return {\n        ...state,\n        LOADING_MODULES: [\n          ...new Set([...state.LOADING_MODULES, ...action.data]),\n        ],\n      }\n    case REMOVE_LOADING_MODULES:\n      return {\n        ...state,\n        LOADING_MODULES: state.LOADING_MODULES.filter(\n          (x) => !action.data.includes(x),\n        ),\n      }\n\n    /**\n     * PROJECTION MAPPING Actions\n     */\n    case SET_UI_WEBSOCKET_DATA:\n      return { ...state, UI_WEBSOCKET_DATA: action.data }\n\n    case SET_UI_WEBSOCKET_READY:\n      return { ...state, UI_WEBSOCKET_READY: action.data }\n\n    /**\n     * Editor Actions\n     */\n\n    case LISTEN_TO_ROW_EDIT:\n      return { ...state, ROW_EDIT: action.data }\n\n    case LISTEN_TO_TYPES_LIST:\n      return { ...state, TYPES_LIST: action.data }\n\n    case LISTEN_TO_GRID_CREATOR:\n      return { ...state, GRID_CREATED: action.data }\n\n    case LISTEN_TO_BASE_MAP_CENTER:\n      return { ...state, BASE_MAP_CENTER: action.data }\n\n    default:\n      return state\n  }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nconst store = configureStore();\n\nexport default store;\n","import axios from 'axios'\nimport { addLoadingModules } from '../redux/actions'\nimport store from '../redux/store'\nimport settings from '../settings/settings.json'\nimport { LightingEffect, AmbientLight, _SunLight } from '@deck.gl/core'\n\n/**\n * conver rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n  function valToHex(c) {\n    var hex = c.toString(16)\n    return hex.length === 1 ? '0' + hex : hex\n  }\n  return '#' + valToHex(r) + valToHex(g) + valToHex(b)\n}\n\n/**\n * conver hex to rgb array\n */\nexport function hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n      ]\n    : null\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n  let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString)\n  return isHex\n}\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n  // get the static grid\n  const GEOGRID = cityioData.GEOGRID\n  // if GEOGRRIDDATA exist and is the same length as our grid\n  if (\n    cityioData.GEOGRIDDATA &&\n    cityioData.GEOGRIDDATA.length === cityioData.GEOGRID.features.length\n  ) {\n    // get the grid data\n    const GEOGRIDDATA = cityioData.GEOGRIDDATA\n    // update GEOGRID features from GEOGRIDDATA on cityio\n    for (let i = 0; i < GEOGRID.features.length; i++) {\n      GEOGRID.features[i].properties = GEOGRIDDATA[i]\n\n      // inject id\n      GEOGRID.features[i].properties.id = i\n    }\n  }\n  const newGrid = JSON.parse(JSON.stringify(GEOGRID))\n  return newGrid\n}\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (accessData) => {\n  // get colors from settings\n  let coordinates = accessData.features.map((d) => d.geometry.coordinates)\n  let values = accessData.features.map((d) => d.properties)\n  let heatmap = []\n  for (let i = 0; i < coordinates.length; i++) {\n    heatmap.push({\n      coordinates: coordinates[i],\n      values: values[i],\n    })\n  }\n  return heatmap\n}\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n  const expectUpdateModules = new Set(\n    settings.cityIO.cityIOmodules\n      .filter((val) => val.expectUpdate)\n      .map((val) => val.name),\n  )\n  const cityIOKeys = new Set(Object.keys(store.getState().CITYIO))\n\n  const loadingModules = [...cityIOKeys].filter((i) =>\n    expectUpdateModules.has(i),\n  )\n\n  let postURL = settings.cityIO.baseURL + tableName + endPoint\n\n  const options = {\n    method: 'post',\n    url: postURL,\n    data: data,\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n  }\n  axios(options)\n    .then((res) => {\n      if (res.data.status === 'ok') {\n        store.dispatch(addLoadingModules(loadingModules))\n      }\n    })\n    .catch((error) => {\n      console.log('ERROR:', error)\n    })\n}\n\n// /**\n//  * Description. uses deck api to\n//  * collect objects in a region\n//  * @argument{object} e  picking event\n//  */\nexport const _multipleObjPicked = (e, pickingRadius, deckGLRef) => {\n  const dim = pickingRadius\n  const x = e.x - dim / 2\n  const y = e.y - dim / 2\n  let multipleObj = deckGLRef.current.pickObjects({\n    x: x,\n    y: y,\n    width: dim,\n    height: dim,\n  })\n  return multipleObj\n}\n\n// /**\n//  * Description. allow only to pick cells that are\n//  *  not of CityScope TUI & that are interactable\n//  * so to not overlap TUI activity\n//  */\nexport const _handleGridcellEditing = (\n  e,\n  selectedType,\n  setSelectedCellsState,\n  pickingRadius,\n  deckGLRef,\n) => {\n  const { height, color, name } = selectedType\n  const multiSelectedObj = _multipleObjPicked(e, pickingRadius, deckGLRef)\n  multiSelectedObj.forEach((selected) => {\n    const thisCellProps = selected.object.properties\n    if (thisCellProps && thisCellProps.interactive) {\n      thisCellProps.color = testHex(color) ? hexToRgb(color) : color\n      thisCellProps.height = height\n      thisCellProps.name = name\n    }\n  })\n  setSelectedCellsState(multiSelectedObj)\n}\n\nvar currentDateMidnight = new Date()\n// set initial midnight to GMT 0\ncurrentDateMidnight.setHours(0, 0, 0, 0)\n\nexport const _setupSunEffects = (effectsRef, tableHeader) => {\n  // get time zone from the tz value if exist\n  if (tableHeader.tz) {\n    currentDateMidnight.setHours(tableHeader.tz, 0, 0, 0)\n  }\n  const ambientLight = new AmbientLight({\n    color: [255, 255, 255],\n    intensity: 0.85,\n  })\n  const dirLight = new _SunLight({\n    timestamp: 0,\n    color: [255, 255, 255],\n    intensity: 1.0,\n    _shadow: true,\n  })\n  const lightingEffect = new LightingEffect({ ambientLight, dirLight })\n  lightingEffect.shadowColor = [0, 0, 0, 0.5]\n  effectsRef.current = [lightingEffect]\n}\n\nexport const updateSunDirection = (time, effectsRef) => {\n  const thisLocationTime = currentDateMidnight.getTime() + time * 1000\n  var date = new Date(thisLocationTime)\n\n  effectsRef.current[0].directionalLights[0].timestamp = Date.UTC(\n    date.getFullYear(),\n    date.getMonth(),\n    date.getDay(),\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n  )\n}\n","import React, { useState } from \"react\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function TypeInfo(props) {\n    const COLOR_SCALE = [\"#85C4C8\", \"#C22E00\", \"#1E96BE\", \"#EC9370\", \"#F6D18A\"];\n\n    const radialRadius = 50;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    // method to create data for radial chart\n    const careateData = () => {\n        // array for data\n        let data = [];\n        // check type info: if string, parse, else object\n        let info = props.typeInfo;\n        // get the type data\n        info.forEach((attr, index) => {\n            data.push({\n                angle: attr.proportion,\n                label: JSON.stringify(attr.use),\n                color: COLOR_SCALE[index],\n            });\n        });\n\n        return data;\n    };\n\n    const data = careateData();\n\n    /*\n    const boxStyle = { height: \"10px\", width: \"10px\" };\n\n    function buildValue(hoveredCell) {\n        const { radius, angle, angle0 } = hoveredCell;\n        const truedAngle = (angle + angle0) / 2;\n        return {\n            x: radius * Math.cos(truedAngle),\n            y: radius * Math.sin(truedAngle),\n        };\n    }\n    */\n\n    return (\n        <>\n            <RadialChart\n                colorType=\"literal\"\n                animation={true}\n                className={\"donut-chart-example\"}\n                innerRadius={radialRadius / 2 - radialRadius / 5}\n                radius={radialRadius / 2}\n                getLabel={(d) => d.label}\n                showLabels={false}\n                getAngle={(d) => d.angle}\n                data={data}\n                onValueMouseOver={(evt) => {\n                    setHoveredRadial(evt);\n                }}\n                onSeriesMouseOut={() => setHoveredRadial(false)}\n                width={radialRadius}\n                height={radialRadius}\n                padAngle={0.1}\n            >\n                {hoveredRadial !== false && (\n                    <Hint value={hoveredRadial}>\n                        <div\n                            style={{\n                                background: \"rgba(0,0,0,0.8)\",\n                                fontSize: 10,\n                            }}\n                        >\n                            <Typography variant={\"caption\"} gutterBottom>\n                                {hoveredRadial.label}\n                            </Typography>\n                        </div>\n                    </Hint>\n                )}\n            </RadialChart>\n        </>\n    );\n}\n","import React from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport {\n    Collapse,\n    Typography,\n    CardContent,\n    Box,\n    Avatar,\n    ListItemAvatar,\n    ListItem,\n    ListItemText,\n    Grid,\n    Card,\n} from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { listenToEditMenu } from \"../../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport { testHex, hexToRgb } from \"../../../../utils/utils\";\nimport TypeInfo from \"./TypeInfo\";\n\nfunction EditMenu(props) {\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    let selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const height = selectedType ? selectedType.height : null;\n\n    const marks = [\n        { value: 0, label: \"min\" },\n        { value: 100, label: \"max\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    const parseTypeInfo = (typeInfo) => {\n        //! check type info: if string, parse, else object\n        let info =\n            typeof typeInfo == \"string\" ? JSON.parse(typeInfo) : typeInfo;\n        return info;\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type, index) => {\n            // get type description if exist\n            let description = LanduseTypesList[type].description\n                ? LanduseTypesList[type].description\n                : null;\n\n            let col = LanduseTypesList[type].color;\n            // get the LBCS/NAICS types info\n            let LBCS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].LBCS\n            );\n            let NAICS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].NAICS\n            );\n\n            if (testHex(col)) {\n                col = hexToRgb(col);\n            }\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n            let typeHasHeightProps = false;\n            if (LanduseTypesList[type].height) {\n                typeHasHeightProps = true;\n            }\n\n            iconsArr.push(\n                <div key={Math.random()}>\n                    <ListItem\n                        alignItems=\"flex-start\"\n                        button\n                        variant=\"raised\"\n                        selected={selected}\n                        onClick={(event) =>\n                            handleListItemClick(\n                                event,\n                                type,\n                                LanduseTypesList[type]\n                            )\n                        }\n                    >\n                        <ListItemAvatar>\n                            <Avatar\n                                style={{\n                                    backgroundColor: rgbCol,\n                                    color: \"black\",\n                                }}\n                            >\n                                {type.charAt(0)}\n                            </Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText primary={type} />\n                    </ListItem>\n\n                    <Collapse in={selected}>\n                        <Box spacing={1} p={1} m={1}>\n                            <Card elevation={15}>\n                                <CardContent>\n                                    <Typography variant=\"h5\">\n                                        Type Information\n                                    </Typography>\n\n                                    {description && (\n                                        <Typography variant=\"caption\">\n                                            {description}\n                                        </Typography>\n                                    )}\n                                    <Box spacing={1} p={1} m={1} />\n                                    <Grid container spacing={3}>\n                                        <Grid\n                                            item\n                                            xs={6}\n                                            l={6}\n                                            md={6}\n                                            xl={6}\n                                            container\n                                        >\n                                            {LBCS && (\n                                                <>\n                                                    <Typography variant=\"caption\">\n                                                        LBCS\n                                                    </Typography>\n\n                                                    <TypeInfo typeInfo={LBCS} />\n                                                </>\n                                            )}\n                                        </Grid>\n                                        <Grid\n                                            item\n                                            xs={6}\n                                            l={6}\n                                            md={6}\n                                            xl={6}\n                                            container\n                                        >\n                                            {NAICS && (\n                                                <>\n                                                    <Typography variant=\"caption\">\n                                                        NAICS\n                                                    </Typography>\n                                                    <TypeInfo\n                                                        typeInfo={NAICS}\n                                                    />\n                                                </>\n                                            )}\n                                        </Grid>\n\n                                        {typeHasHeightProps && (\n                                            <>\n                                                <Grid\n                                                    item\n                                                    xs={10}\n                                                    l={10}\n                                                    md={10}\n                                                    xl={10}\n                                                    container\n                                                >\n                                                    <Typography gutterBottom>\n                                                        Set Height\n                                                    </Typography>\n\n                                                    <Slider\n                                                        value={height}\n                                                        valueLabelDisplay=\"auto\"\n                                                        onChange={(\n                                                            event,\n                                                            value\n                                                        ) =>\n                                                            dispatch(\n                                                                listenToEditMenu(\n                                                                    {\n                                                                        ...selectedType,\n                                                                        height: value,\n                                                                    }\n                                                                )\n                                                            )\n                                                        }\n                                                        getAriaLabel={(index) =>\n                                                            index.toString()\n                                                        }\n                                                        min={marks[0].value}\n                                                        max={marks[1].value}\n                                                        marks={marks}\n                                                    />\n                                                </Grid>\n                                            </>\n                                        )}\n                                    </Grid>\n                                </CardContent>\n                            </Card>\n                        </Box>\n                    </Collapse>\n\n                    <Divider />\n                </div>\n            );\n        });\n        return <List>{iconsArr}</List>;\n    };\n\n    return <>{createTypesIcons(props.cityioData.GEOGRID.properties.types)}</>;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { DiscreteColorLegend } from \"react-vis\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// ! https://github.com/uber/react-vis/blob/premodern/showcase/legends/searchable-discrete-color.js\n\nexport default function ABMLegend(props) {\n    const tripsAttr = props.trips.tripsData;\n    const modes = tripsAttr.mode;\n    const profiles = tripsAttr.profile;\n\n    const prepareLegendData = (string) => {\n        let data = string === \"mode\" ? modes : profiles;\n\n        let legendData = [];\n        for (const key in data) {\n            legendData.push({ title: data[key].name, color: data[key].color });\n        }\n        return legendData;\n    };\n\n    return (\n        <>\n            <Typography variant=\"h6\" gutterBottom>\n                {props.tripTypeValue === \"mode\" ? \"Mode Choise\" : \"Profiles \"}\n            </Typography>\n            <DiscreteColorLegend\n                height={300}\n                width={150}\n                items={prepareLegendData(props.tripTypeValue)}\n            />\n        </>\n    );\n}\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    listenToSlidersEvents,\n    listenToABMmode,\n} from \"../../../../../redux/actions\";\nimport ABMLegend from \"./ABMLegend\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst marks = [\n    {\n        value: 0,\n        label: \"12AM\",\n    },\n    {\n        value: 21600,\n        label: \"6AM\",\n    },\n    {\n        value: 43200,\n        label: \"12PM\",\n    },\n    {\n        value: 64800,\n        label: \"6PM\",\n    },\n    {\n        value: 86400,\n        label: \"12AM\",\n    },\n];\n\nfunction ABMSubmenu(props) {\n    const classes = useStyles();\n    const sliders = useSelector((state) => state.SLIDERS);\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const handleSetSpeedValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                speed: newValue,\n            })\n        );\n    };\n\n    const [tripTypeValue, settripTypeValue] = React.useState(\"mode\");\n\n    const handleABMmodeChange = (event) => {\n        dispatch(listenToABMmode(event.target.value));\n        settripTypeValue(event.target.value);\n    };\n\n    return (\n        <div className={classes.root}>\n            <FormControl component=\"fieldset\">\n                <RadioGroup\n                    aria-label=\"tripType\"\n                    name=\"tripType\"\n                    value={tripTypeValue}\n                    onChange={handleABMmodeChange}\n                >\n                    <FormControlLabel\n                        value=\"mode\"\n                        control={<Radio />}\n                        label=\"Mode Choice\"\n                    />\n                    <FormControlLabel\n                        value=\"profile\"\n                        control={<Radio />}\n                        label=\"Profile\"\n                    />\n                </RadioGroup>\n            </FormControl>\n\n            <ABMLegend trips={props} tripTypeValue={tripTypeValue} />\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Simulation Range\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n            <Typography\n                className={classes.subtitle2}\n                variant=\"subtitle2\"\n                id=\"continuous-slider\"\n                gutterBottom\n            >\n                Simulation Speed\n            </Typography>\n            <Slider\n                min={0}\n                max={100}\n                value={sliders.speed}\n                onChange={handleSetSpeedValue}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"continuous-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ABMSubmenu;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../../redux/actions\";\n\nfunction ShadowSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector((state) => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\",\n        },\n        {\n            value: 21600,\n            label: \"6AM\",\n        },\n        {\n            value: 43200,\n            label: \"12PM\",\n        },\n        {\n            value: 64800,\n            label: \"6PM\",\n        },\n        {\n            value: 86400,\n            label: \"12AM\",\n        },\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Time of day\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ShadowSubmenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { listenToAccessToggle } from \"../../../../../redux/actions\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { ContinuousColorLegend } from \"react-vis\";\n\nimport settings from \"../../../../../settings/settings.json\";\n\nfunction AccessSubmenu(props) {\n    const accessToggle = useSelector((state) => state.ACCESS_TOGGLE);\n\n    const { cityioData } = props;\n\n    const ACCESS_PROPERTIES =\n        cityioData && cityioData.access && cityioData.access.properties\n            ? cityioData.access.properties\n            : [];\n\n    const dispatch = useDispatch();\n    const c = settings.map.layers.heatmap.colors;\n    const l = c.length - 1;\n    return (\n        <List>\n            <ListItem>\n                <ContinuousColorLegend\n                    width={500}\n                    startColor={\n                        \"rgb(\" + c[0][0] + \",\" + c[0][1] + \",\" + c[0][2] + \")\"\n                    }\n                    endColor={\n                        \"rgb(\" + c[l][0] + \",\" + c[l][1] + \",\" + c[l][2] + \")\"\n                    }\n                    startTitle=\"No Access\"\n                    endTitle=\"Full Access\"\n                />\n            </ListItem>\n            {ACCESS_PROPERTIES.map((p, i) => (\n                <ListItem key={p}>\n                    <ListItemText\n                        primary={p}\n                        style={{ textTransform: \"capitalize\" }}\n                    />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            checked={accessToggle === i}\n                            onChange={() => {\n                                dispatch(listenToAccessToggle(i));\n                            }}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AccessSubmenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport settings from \"../../../../settings/settings.json\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ABMSubmenu from \"./ABMSubmenu\";\nimport ShadowSubmenu from \"./ShadowSubmenu\";\nimport AccessSubmenu from \"./AccessSubmenu\";\nimport Switch from \"@material-ui/core/Switch\";\n\nfunction TogglesMenu(props) {\n    const { handleToggle } = props;\n\n    const { menuState, cityioData } = useSelector((state) => ({\n        menuState: state.MENU,\n        cityioData: state.CITYIO,\n    }));\n\n    const togglesMeta = settings.menu.toggles;\n    const listOfToggles = Object.keys(togglesMeta);\n\n    /**\n     * gets props with initial menu state\n     * and turn on the layer on init\n     */\n    let togglesCompsArray = [];\n    // array of loaded API modules\n    const loadedModules = Object.keys(cityioData);\n    // create each toggle\n    for (let i = 0; i < listOfToggles.length; i++) {\n        // check if the mdoule of this toggle\n        // was loaded on the API\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\n\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\n\n        if (loadedModules.includes(requireModule) || requireModule === false) {\n            const thisToggle = (\n                <div key={listOfToggles[i]}>\n                    <ListItem>\n                        <Switch\n                            edge=\"start\"\n                            onChange={handleToggle(listOfToggles[i])}\n                            checked={checked}\n                        />\n                        <ListItemText\n                            primary={togglesMeta[listOfToggles[i]].displayName}\n                        />\n                    </ListItem>\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"SHADOWS\" && (\n                            <Collapse in={checked}>\n                                <ShadowSubmenu />\n                            </Collapse>\n                        )\n                    }\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"ABM\" && (\n                            <Collapse in={checked}>\n                                <ABMSubmenu tripsData={cityioData.ABM2.attr} />\n                            </Collapse>\n                        )\n                    }\n                    {listOfToggles[i] === \"ACCESS\" && (\n                        <Collapse\n                            in={checked}\n                            style={{\n                                marginLeft: 24,\n                            }}\n                        >\n                            <AccessSubmenu cityioData={cityioData} />\n                        </Collapse>\n                    )}\n                </div>\n            );\n            togglesCompsArray.push(thisToggle);\n        }\n    }\n\n    return <List>{togglesCompsArray}</List>;\n}\n\nexport default TogglesMenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLoadingState } from \"../../../../../../redux/actions\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport axios from \"axios\";\nimport {\n    Button,\n    TextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from \"@material-ui/core\";\n\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\n\nexport default function SaveAsScenario(props) {\n    const maxNumOfScenarios = 10;\n    const [open, setOpen] = React.useState(false);\n    const [name, setName] = React.useState(\"\");\n    const dispatch = useDispatch();\n    const { tableName, toggleDrawer } = props;\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n\n    const getScenarioIndex = () => {\n        var getURL = `${settings.cityIO.baseURL}${tableName}/meta/hashes/`;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const metaDataKeys = Object.keys(res.data);\n                const scenarioIndices = metaDataKeys\n                    .filter((str) => str.includes(\"scenarios\"))\n                    .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n                console.log(\"successfully got scenarios\");\n                const newScenarioIndex = scenarioIndices.length\n                    ? Math.max(...scenarioIndices) + 1\n                    : 0;\n                postScenario(newScenarioIndex);\n            })\n            .catch((err) => {\n                console.log(\"Error getting scenarios\", err);\n            });\n    };\n\n    const postScenario = (id) => {\n        const data = {\n            GEOGRIDDATA: cityioData.GEOGRIDDATA,\n            info: {\n                id,\n                name,\n            },\n        };\n\n        var postURL = `${settings.cityIO.baseUR}update/${tableName}/scenarios${id}/`;\n\n        const options = {\n            method: \"post\",\n            url: postURL,\n            data,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                console.log(\"Successfully saved grid data and network\");\n                dispatch(setLoadingState(false));\n                toggleDrawer();\n                handleClose();\n            })\n            .catch((error) => {\n                console.log(\"%c\" + error);\n                console.log(\"ERROR:\", error);\n                handleClose();\n            });\n    };\n\n    return (\n        <>\n            <Button\n                disabled={scenarioNames.length >= maxNumOfScenarios}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleClickOpen}\n                startIcon={<CloudUploadIcon />}\n            >\n                Save Scenario\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Save Scenario</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Name:</DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        fullWidth\n                        value={name}\n                        onChange={(event) => setName(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"default\">\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            dispatch(setLoadingState(true));\n                            getScenarioIndex();\n                        }}\n                        color=\"default\"\n                    >\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    setScenarioNames,\n    setLoadingState,\n} from \"../../../../../../redux/actions\";\nimport axios from \"axios\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport { ListItem, Button, Typography, List } from \"@material-ui/core\";\nimport { _postMapEditsToCityIO } from \"../../../../../../utils/utils\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { getScenarioIndices } from \"../../../../CityIO/utils\";\n\nfunction ScenarioItems(props) {\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n    const dispatch = useDispatch();\n\n    const getScenario = (tableName, id) => {\n        const getURL = `${settings.cityIO.baseURL}${tableName}/scenarios${id}/`;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const { GEOGRIDDATA } = res.data;\n                _postMapEditsToCityIO(\n                    GEOGRIDDATA,\n                    cityioData.tableName,\n                    \"/GEOGRIDDATA\"\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const deleteScenario = (tableName, id) => {\n        const getURL =\n\t\t`${settings.cityIO.baseURL}clear/${tableName}/scenarios${id}/`\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                getScenarioIndices(\n                    cityioData.tableName,\n                    (data) => dispatch(setScenarioNames(data)),\n                    (state) => dispatch(setLoadingState(state))\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const generateListItems = () =>\n        scenarioNames.map((scenario) => (\n            <ListItem key={scenario.id}>\n                <Button\n                    style={{ textTransform: \"none\" }}\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        getScenario(cityioData.tableName, scenario.id);\n                    }}\n                >\n                    <Typography variant=\"h6\">{scenario.name}</Typography>\n                </Button>\n                <Button\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        deleteScenario(cityioData.tableName, scenario.id);\n                    }}\n                >\n                    <CancelIcon />\n                </Button>\n            </ListItem>\n        ));\n\n    return <List>{generateListItems()}</List>;\n}\n\nexport default ScenarioItems;\n","import React from \"react\";\nimport SaveAsScenario from \"./components/SaveAsScenario\";\nimport ScenarioItems from \"./components/ScenarioItems\";\nimport { List, ListItem, Divider } from \"@material-ui/core\";\n\nexport default function SaveMenu(props) {\n    const { tableName } = props;\n\n    return (\n        <List>\n            <ListItem>\n                <SaveAsScenario tableName={tableName} />\n            </ListItem>\n            <ListItem>\n                <Divider />\n            </ListItem>\n            <ListItem>\n                <ScenarioItems />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToMenuUI } from \"../../../redux/actions\";\nimport EditMenu from \"./EditMenu\";\nimport TogglesMenu from \"./TogglesMenu\";\nimport SaveMenu from \"./SaveMenu\";\nimport { Button, Typography, List, ListItem } from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\n\nfunction MenuContainer(props) {\n    const { tableName } = props;\n    const menuState = useSelector((state) => state.MENU);\n    const dispatch = useDispatch();\n\n    const handleToggle = (value) => () => {\n        const i = menuState.indexOf(value);\n        const updatedMenuState = [...menuState];\n        if (i === -1) {\n            updatedMenuState.push(value);\n        } else {\n            updatedMenuState.splice(i, 1);\n        }\n\n        dispatch(listenToMenuUI(updatedMenuState));\n    };\n\n    return (\n        <>\n            <List>\n                <ListItem>\n                    <Typography variant={\"h2\"}>Grid Edit</Typography>\n                </ListItem>\n                <ListItem>\n                    <Button\n                        startIcon={\n                            menuState.includes(\"EDIT\") ? (\n                                <>\n                                    <CloudUploadIcon />\n                                    Send to cityIO\n                                </>\n                            ) : (\n                                <>\n                                    <EditIcon />\n                                    Edit Mode\n                                </>\n                            )\n                        }\n                        color=\"default\"\n                        onClick={handleToggle(\"EDIT\")}\n                    ></Button>\n                </ListItem>\n\n                <EditMenu />\n\n                <ListItem>\n                    <Typography variant={\"h2\"}>Scenarios</Typography>\n                </ListItem>\n                <ListItem>\n                    <SaveMenu\n                        tableName={tableName}\n                        handleToggle={handleToggle}\n                    />\n                </ListItem>\n                <ListItem>\n                    <Typography variant={\"h2\"}>View Options</Typography>\n                </ListItem>\n                <ListItem>\n                    <Button\n                        startIcon={\n                            <>\n                                <NavigationIcon />\n                                Reset View\n                            </>\n                        }\n                        color=\"default\"\n                        onClick={handleToggle(\"RESET_VIEW\")}\n                    />\n                </ListItem>\n            </List>\n\n            <TogglesMenu handleToggle={handleToggle} />\n        </>\n    );\n}\n\nexport default MenuContainer;\n","import React from \"react\";\nimport { testHex, hexToRgb } from \"../../../../../utils/utils\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \"Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 10,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}:\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    return (\n        <div\n            style={{\n                borderRadius: \"10%\",\n                position: \"fixed\",\n                pointerEvents: \"none\",\n                backgroundColor: \"rgba(0,0,0,0.5)\",\n                padding: \"1vw\",\n                color: \"rgba(255,255,255,0.9)\",\n                zIndex: 10,\n                left: mousePos.clientX,\n                top: mousePos.clientY,\n                fontFamily:'monospace',\n                fontSize: \"0.65em\",\n                fontWeight: 500,\n            }}\n        >\n            <p>\n                Type:\n                {props.hoveredObj.object.properties.name}\n            </p>\n            <p>\n                Floors:\n                {props.hoveredObj.object.properties.height}\n            </p>\n            <p>\n                ID:\n                {props.hoveredObj.object.properties.id}\n            </p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { PaintBrush } from \"./PaintBrush\";\nimport { CellMeta } from \"../CellMeta\";\n\nexport default function PaintBrushContainer({\n    editOn,\n    mousePos,\n    selectedType,\n    pickingRadius,\n    mouseDown,\n    hoveredObj,\n}) {\n    if (editOn) {\n        return (\n            selectedType && (\n                <PaintBrush\n                    mousePos={mousePos}\n                    selectedType={selectedType}\n                    divSize={pickingRadius}\n                    mouseDown={mouseDown}\n                    hoveredCells={hoveredObj}\n                />\n            )\n        );\n    } else {\n        return (\n            hoveredObj && (\n                <CellMeta mousePos={mousePos} hoveredObj={hoveredObj} />\n            )\n        );\n    }\n}\n","import { Component } from \"react\";\n\nclass AnimationComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.animationFrame = null;\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    _animate() {\n        const {\n            toggles: { rotateOn, ABMOn },\n            state: { viewState, sliders },\n            updaters: { listenToSlidersEvents, sunEffects, setViewState },\n            dispatch,\n        } = this.props;\n        if (rotateOn) {\n            let bearing = viewState.bearing ? viewState.bearing : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            setViewState({\n                ...viewState,\n                bearing: bearing,\n            });\n        }\n\n        if (ABMOn) {\n            const time = sliders.time[1];\n            const speed = sliders.speed;\n            const startHour = sliders.time[0];\n            const endHour = sliders.time[2];\n\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n\n            dispatch(\n                listenToSlidersEvents({\n                    ...sliders,\n                    time: [sliders.time[0], t, sliders.time[2]],\n                })\n            );\n\n            // update sun position\n            if (sunEffects) {\n                sunEffects.updateSunDirection(t);\n            }\n        }\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default AnimationComponent;\n","import { ColumnLayer } from 'deck.gl'\nimport settings from '../../../../settings/settings.json'\nimport { useSelector } from 'react-redux'\n\nexport default function AccessLayer({ data, cellSize }) {\n  // return new HeatmapLayer({\n  //   id: 'ACCESS',\n  //   colorRange: settings.map.layers.heatmap.colors,\n  //   radiusPixels: 200,\n  //   opacity: 0.5,\n  //   threshold: 0.5,\n  //   data,\n  //   getPosition: (d) => d.coordinates,\n  //   getWeight: (d) => d.values[accessToggle],\n  //   updateTriggers: {\n  //     getWeight: [accessToggle],\n  //   },\n  // })\n  const accessToggle = useSelector((state) => [state.ACCESS_TOGGLE])\n  return new ColumnLayer({\n    id: 'column-layer',\n    data,\n    shadowEnabled: false,\n\n    material: false,\n    diskResolution: 12,\n    radius: cellSize,\n    extruded: true,\n    pickable: true,\n    elevationScale: 100,\n    getPosition: (d) => d.coordinates,\n    colorRange: settings.map.layers.heatmap.colors,\n    getFillColor: (d) => [255 * d.values[accessToggle], 82, 120, 200],\n    getLineColor: [0, 0, 0],\n    getElevation: (d) => d.values[accessToggle],\n    updateTriggers: {\n      getElevation: [accessToggle],\n      getFillColor: [accessToggle],\n    },\n    transitions: {\n      getFillColor: 500,\n      getElevation: 200,\n    },\n  })\n}\n","import { PathLayer } from \"deck.gl\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nexport default function AggregatedTripsLayer({ data, cityioData, ABMmode }) {\n    return new PathLayer({\n        id: \"AGGREGATED_TRIPS\",\n        shadowEnabled: false,\n        data,\n        getPath: (d) => {\n            const noisePath =\n                Math.random() < 0.5\n                    ? Math.random() * 0.00005\n                    : Math.random() * -0.00005;\n            for (let i in d.path) {\n                d.path[i][0] = d.path[i][0] + noisePath;\n                d.path[i][1] = d.path[i][1] + noisePath;\n                d.path[i][2] = d.mode[0] * 2;\n            }\n            return d.path;\n        },\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n        opacity: 0.2,\n        getWidth: 1.5,\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { TripsLayer } from '@deck.gl/geo-layers'\nimport { hexToRgb } from '../../../../utils/utils'\n\n//  * remap line width\nconst _remapValues = (value) => {\n  let remap = value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30\n  return remap\n}\n\nexport default function ABMLayer({\n  data,\n  cityioData,\n  ABMmode,\n  zoomLevel,\n  sliders,\n}) {\n  return new TripsLayer({\n    id: 'ABM',\n    data,\n    getPath: (d) => d.path,\n    getTimestamps: (d) => d.timestamps,\n    getColor: (d) => {\n      let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color)\n      return col\n    },\n    shadowEnabled: false,\n    getWidth: 1,\n    widthScale: _remapValues(zoomLevel),\n    opacity: 0.8,\n    rounded: true,\n    trailLength: 500,\n    currentTime: sliders.time[1],\n\n    updateTriggers: {\n      getColor: ABMmode,\n    },\n    transitions: {\n      getColor: 500,\n    },\n  })\n}\n","import { GeoJsonLayer } from \"deck.gl\";\nimport { _handleGridcellEditing } from \"../../../../utils/utils\";\n\nexport default function GridLayer({\n    data,\n    editOn,\n    state: { selectedType, keyDownState, selectedCellsState, pickingRadius },\n    updaters: { setSelectedCellsState, setDraggingWhileEditing, setHoveredObj },\n    deckGL,\n}) {\n    return new GeoJsonLayer({\n        id: \"GRID\",\n        data,\n        pickable: true,\n        extruded: true,\n        wireframe: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 2,\n        getElevation: (d) => d.properties.height,\n        getFillColor: (d) => d.properties.color,\n\n        onClick: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDrag: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDragStart: () => {\n            if (selectedType && editOn && keyDownState !== \"Shift\") {\n                setDraggingWhileEditing(true);\n            }\n        },\n\n        onHover: (e) => {\n            if (e.object) {\n                setHoveredObj(e);\n            }\n        },\n\n        onDragEnd: () => {\n            setDraggingWhileEditing(false);\n        },\n        updateTriggers: {\n            getFillColor: selectedCellsState,\n            getElevation: selectedCellsState,\n        },\n        transitions: {\n            getFillColor: 500,\n            getElevation: 500,\n        },\n    });\n}\n","import { TextLayer } from \"@deck.gl/layers\";\n\nexport default function TextualLayer({ data, coordinates }) {\n    /*\n     * this layer takes textual layer procuded by a 3rd party\n     * module, and renders a text message near the grid cell\n     * defined in the data id attribute.\n     *\n     * data format:\n      [\n      {\"id\": 0, \"info\": \"yes!\" },   {\"id\": 10, \"info\": \"I'm on ID 10!\" }\n      ]\n     *\n     * coordinates format:\n     [\n       {\"info\": \"yes!\", coordinates: [-122.466233, 37.684638]},\n     ]\n     */\n\n    if (data && coordinates && coordinates.features) {\n        let textLayerData = [];\n\n        data.forEach((infoIteam) => {\n            textLayerData.push({\n                coordinates: [\n                    coordinates.features[infoIteam.id].geometry\n                        .coordinates[0][0][0],\n                    coordinates.features[infoIteam.id].geometry\n                        .coordinates[0][0][1],\n                    100,\n                ],\n                info: infoIteam.info,\n            });\n        });\n\n        return new TextLayer({\n            id: \"text-layer\",\n            data: textLayerData,\n            pickable: true,\n            getPosition: (d) => d.coordinates,\n            getText: (d) => d.info,\n            getColor: [255, 255, 255],\n            getSize: 30,\n            getAngle: 0,\n            getTextAnchor: \"middle\",\n            getAlignmentBaseline: \"center\",\n        });\n    }\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport PaintBrush from './components/PaintBrush'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { listenToSlidersEvents } from '../../../redux/actions'\nimport {\n  _proccessAccessData,\n  _proccessGridData,\n  _postMapEditsToCityIO,\n} from '../../../utils/utils'\nimport { StaticMap } from 'react-map-gl'\nimport DeckGL from '@deck.gl/react'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport settings from '../../../settings/settings.json'\nimport AnimationComponent from './components/AnimationComponent'\nimport { updateSunDirection, _setupSunEffects } from '../../../utils/utils'\nimport {\n  AccessLayer,\n  AggregatedTripsLayer,\n  ABMLayer,\n  GridLayer,\n  TextualLayer,\n} from './deckglLayers'\n\nexport default function Map() {\n  const [draggingWhileEditing, setDraggingWhileEditing] = useState(false)\n  const [selectedCellsState, setSelectedCellsState] = useState(null)\n  const [viewState, setViewState] = useState(settings.map.initialViewState)\n  const [keyDownState, setKeyDownState] = useState(null)\n  const [mousePos, setMousePos] = useState(null)\n  const [mouseDown, setMouseDown] = useState(null)\n  const [hoveredObj, setHoveredObj] = useState(null)\n  const [access, setAccess] = useState(null)\n  const [textualData, setTextualData] = useState(null)\n  const [GEOGRID, setGEOGRID] = useState(null)\n  const [ABM, setABM] = useState({})\n  const [loaded, setLoaded] = useState(false)\n  const effectsRef = useRef()\n  const deckGL = useRef()\n\n  const dispatch = useDispatch()\n\n  const pickingRadius = 40\n\n  const [\n    cityioData,\n    sliders,\n    menu,\n\n    selectedType,\n    ABMmode,\n  ] = useSelector((state) => [\n    state.CITYIO,\n    state.SLIDERS,\n    state.MENU,\n\n    state.SELECTED_TYPE,\n    state.ABM_MODE,\n  ])\n\n  var ABMOn = menu.includes('ABM')\n  var rotateOn = menu.includes('ROTATE')\n  var shadowsOn = menu.includes('SHADOWS')\n  var editOn = menu.includes('EDIT')\n  var resetViewOn = menu.includes('RESET_VIEW')\n\n  useEffect(() => {\n\n      \n    // fix deck view rotate\n    _rightClickViewRotate()\n    // setup sun effects\n    _setupSunEffects(effectsRef, cityioData.GEOGRID.properties.header)\n    // zoom map on CS table location\n    _setViewStateToTableHeader()\n    setLoaded(true)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (!loaded) return\n    updateSunDirection(sliders.time[1], effectsRef)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sliders.time])\n\n  useEffect(() => {\n    if (!loaded) return\n    let shadowColor = shadowsOn ? [0, 0, 0, 0.5] : [0, 0, 0, 0]\n    effectsRef.current[0].shadowColor = shadowColor\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shadowsOn])\n\n  useEffect(() => {\n    setGEOGRID(_proccessGridData(cityioData))\n\n    if (cityioData.access) {\n      setAccess(_proccessAccessData(cityioData.access))\n    }\n\n    if (cityioData.textual) {\n      setTextualData(cityioData.textual)\n    }\n\n    if (cityioData.ABM2) {\n      setABM(cityioData.ABM2)\n    }\n  }, [cityioData])\n\n  useEffect(() => {\n    if (!loaded) return\n    if (!editOn) {\n      let dataProps = []\n\n      for (let i = 0; i < GEOGRID.features.length; i++) {\n        dataProps[i] = GEOGRID.features[i].properties\n      }\n      _postMapEditsToCityIO(dataProps, cityioData.tableName, '/GEOGRIDDATA')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editOn])\n\n  useEffect(() => {\n    if (!loaded) return\n    _setViewStateToTableHeader()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [resetViewOn])\n\n  const onViewStateChange = ({ viewState }) => {\n    setViewState(viewState)\n  }\n\n  // /**\n  //  * resets the camera viewport\n  //  * to cityIO header data\n  //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n  //  */\n  const _setViewStateToTableHeader = () => {\n    const header = cityioData.GEOGRID.properties.header\n\n    setViewState({\n      ...viewState,\n      longitude: header.longitude,\n      latitude: header.latitude,\n      zoom: 15,\n      pitch: 0,\n      bearing: 360 - header.rotation,\n      orthographic: true,\n    })\n  }\n\n  // /**\n  //  * Description. fix deck issue\n  //  * with rotate right botton\n  //  */\n  const _rightClickViewRotate = () => {\n    document\n      .getElementById('deckgl-wrapper')\n      .addEventListener('contextmenu', (evt) => evt.preventDefault())\n  }\n\n  const layersKey = {\n    ABM: ABMLayer({\n      data: ABM.trips,\n      cityioData,\n      ABMmode,\n      zoomLevel: viewState.zoom,\n      sliders,\n    }),\n    AGGREGATED_TRIPS: AggregatedTripsLayer({\n      data: ABM.trips,\n      cityioData,\n      ABMmode,\n    }),\n    GRID: GridLayer({\n      data: GEOGRID,\n      editOn: menu.includes('EDIT'),\n      state: {\n        selectedType,\n        keyDownState,\n        selectedCellsState,\n        pickingRadius,\n      },\n      updaters: {\n        setSelectedCellsState,\n        setDraggingWhileEditing,\n        setHoveredObj,\n      },\n      deckGL,\n    }),\n    ACCESS: AccessLayer({\n      data: access,\n      cellSize: cityioData.GEOGRID.properties.header.cellSize,\n    }),\n    TEXTUAL: TextualLayer({\n      data: textualData && textualData,\n      coordinates: GEOGRID,\n    }),\n  }\n\n  const layerOrder = ['TEXTUAL', 'ABM', 'AGGREGATED_TRIPS', 'GRID', 'ACCESS']\n\n  const _renderLayers = () => {\n    let layers = []\n    for (var layer of layerOrder) {\n      if (menu.includes(layer)) {\n        layers.push(layersKey[layer])\n      }\n    }\n    return layers\n  }\n\n  return (\n    <div\n      className=\"baseMap\"\n      onKeyDown={(e) => {\n        setKeyDownState(e.nativeEvent.key)\n      }}\n      onKeyUp={() => setKeyDownState(null)}\n      onMouseMove={(e) => setMousePos(e.nativeEvent)}\n      onMouseUp={() => setMouseDown(false)}\n      onMouseDown={() => setMouseDown(true)}\n    >\n      <PaintBrush\n        editOn={editOn}\n        mousePos={mousePos}\n        selectedType={selectedType}\n        pickingRadius={pickingRadius}\n        mouseDown={mouseDown}\n        hoveredObj={hoveredObj}\n      />\n      <AnimationComponent\n        toggles={{ ABMOn, rotateOn }}\n        state={{ sliders, viewState }}\n        updaters={{\n          listenToSlidersEvents,\n          updateSunDirection,\n          setViewState,\n        }}\n        dispatch={dispatch}\n      />\n\n      <DeckGL\n        ref={deckGL}\n        viewState={viewState}\n        onViewStateChange={onViewStateChange}\n        layers={_renderLayers()}\n        effects={effectsRef.current}\n        controller={{\n          touchZoom: true,\n          touchRotate: true,\n          dragPan: !draggingWhileEditing,\n          dragRotate: !draggingWhileEditing,\n          keyboard: false,\n        }}\n      >\n        <StaticMap\n          asyncRender={false}\n          dragRotate={true}\n          reuseMaps={true}\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n          mapStyle={settings.map.mapStyle.sat}\n          preventStyleDiffing={true}\n        />\n      </DeckGL>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from \"react\";\nimport { CircularGridLines, RadarChart, DiscreteColorLegend } from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport \"./Radar.css\";\n\nconst radarSize = 300;\nconst colorRange = [\"#ff5278\", \"#660016\"];\n\nexport default function Radar(props) {\n    const [radarData, setRadarData] = useState(null);\n\n    const createRadarData = (indicators) => {\n        let r = {};\n        let f = {};\n        let domains = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"radar\") {\n                r[indicators[i].name] = [indicators[i].value];\n                f[indicators[i].name] = [indicators[i].ref_value];\n                indicators[i].domain = [0, 1];\n                domains.push(indicators[i]);\n            }\n        }\n        return { radarData: [r, f], domains: domains };\n    };\n\n    useEffect(() => {\n        if (\n            props &&\n            props.cityioData &&\n            props.cityioData.indicators &&\n            props.cityioData.indicators.length > 0\n        ) {\n            const d = createRadarData(props.cityioData.indicators);\n            setRadarData(d);\n        }\n    }, [props]);\n\n    return (\n        <div>\n            {radarData && radarData.domains && (\n                <>\n                    <RadarChart\n                        className=\"Radar blur\"\n                        animation\n                        data={radarData.radarData}\n                        domains={radarData.domains}\n                        colorRange={colorRange}\n                        style={{\n                            polygons: {\n                                fillOpacity: 0.2,\n                                strokeWidth: 2,\n                            },\n                            axes: {\n                                text: {\n                                    opacity: 0,\n                                    fontWeight: 700,\n                                    fill: \"white\",\n                                    fontFamily: \"Roboto Mono\",\n                                },\n                                strokeWidth: 0,\n                            },\n                            labels: {\n                                fontFamily: \"Roboto Mono\",\n\n                                textAnchor: \"middle\",\n                                fontSize: 10,\n                                fill: \"white\",\n                            },\n                        }}\n                        margin={{\n                            left: radarSize / 6,\n                            top: radarSize / 6,\n                            bottom: radarSize / 6,\n                            right: radarSize / 6,\n                        }}\n                        width={radarSize}\n                        height={radarSize}\n                    >\n                        <CircularGridLines\n                            style={{\n                                fill: \"white\",\n                                fillOpacity: 0.1,\n                                backgroundColor: \"#FFF\",\n                                opacity: 0.5,\n                                stroke: \"white\",\n                                width: 0.1,\n                            }}\n                            tickValues={[...new Array(11)].map(\n                                (v, i) => i / 10 - 1\n                            )}\n                        />\n                    </RadarChart>\n                    <DiscreteColorLegend\n                        items={[\"Design\", \"Reference\"]}\n                        colors={colorRange}\n                        style={{\n                            fontFamily: \"Roboto Mono\",\n                        }}\n                    />\n                </>\n            )}\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalBarSeries,\n} from \"react-vis\";\nimport \"react-vis/dist/style.css\";\nimport { Typography, Box } from \"@material-ui/core\";\n\nexport default function BarChart(props) {\n    const radarSize = 250;\n\n    /**\n   data format \n    [\n    { x: 2, y: 10 },\n    { x: 4, y: 5 },\n    { x: 12, y: 15 },\n    ]\n     */\n\n    const [barChartData, setBarChartData] = useState(null);\n    const [hoveredNode, setHoveredNode] = useState(null);\n\n    useEffect(() => {\n        if (\n            props &&\n            props.cityioData &&\n            props.cityioData.indicators &&\n            props.cityioData.indicators.length > 0\n        ) {\n            const d = generateData(props.cityioData.indicators);\n\n            setBarChartData(d.barChartData);\n        }\n    }, [props]);\n\n    const generateData = (indicators) => {\n        let dataArr = [];\n\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"bar\") {\n                dataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].value,\n                });\n            }\n        }\n\n        return {\n            barChartData: dataArr,\n        };\n    };\n\n    return (\n        <>\n            {barChartData && (\n                <>\n                    <Box flexDirection=\"column\">\n                        <Box alignContent=\"center\" p={3}>\n                            <FlexibleWidthXYPlot\n                                opacity={0.2}\n                                xType=\"ordinal\"\n                                width={radarSize}\n                                height={radarSize}\n                                stackBy=\"y\"\n                                yDomain={[0, 1]}\n                            >\n                                <XAxis\n                                    style={{\n                                        text: {\n                                            fill: \"#FFF\",\n                                            fontFamily: \"Roboto Mono\",\n                                        },\n                                    }}\n                                    tickLabelAngle={90}\n                                />\n                                <YAxis style={{ text: { fill: \"#FFF\" } }} />\n                                <VerticalBarSeries\n                                    animation={true}\n                                    onValueMouseOver={(d) => {\n                                        setHoveredNode(d);\n                                    }}\n                                    data={barChartData}\n                                />\n                            </FlexibleWidthXYPlot>\n                        </Box>\n                        <Box alignContent=\"center\">\n                            {hoveredNode && (\n                                <>\n                                    <Typography variant=\"caption\" gutterBottom>\n                                        {hoveredNode.x}\n                                    </Typography>\n                                    <Box m={3} />\n                                    <Typography gutterBottom>\n                                        {hoveredNode.y}\n                                    </Typography>\n                                </>\n                            )}\n                        </Box>\n                    </Box>\n                </>\n            )}\n        </>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { rgbToHex } from \"../../../../utils/utils\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\n\nexport default function AreaCalc(props) {\n    const radialRadius = 250;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n    const [areaData, setAreaData] = useState(null);\n\n    useEffect(() => {\n        const calcArea = () => {\n            let gridProps = props.cityioData.GEOGRID.properties;\n            let cellSize = gridProps.header.cellSize;\n            let geoGridData = props.cityioData.GEOGRIDDATA;\n\n            let calcAreaObj = {};\n            geoGridData.forEach((gridCellData) => {\n                let typeName = gridCellData.name;\n                if (\n                    //    if this type is not null\n                    gridCellData.name !== \"None\"\n                ) {\n                    if (calcAreaObj.hasOwnProperty(typeName)) {\n                        calcAreaObj[typeName].count =\n                            calcAreaObj[typeName].count + 1;\n                        // avoid landuse with no height\n                        let height =\n                            gridCellData.height < 1 ? 1 : gridCellData.height;\n                        calcAreaObj[typeName].area =\n                            calcAreaObj[typeName].area + height * cellSize;\n                    } else {\n                        calcAreaObj[typeName] = {};\n                        calcAreaObj[typeName].area = 0;\n                        calcAreaObj[typeName].count = 0;\n                        calcAreaObj[typeName].name = typeName;\n                        calcAreaObj[typeName].color = rgbToHex(\n                            gridCellData.color[0],\n                            gridCellData.color[1],\n                            gridCellData.color[2]\n                        );\n                    }\n                }\n            });\n            //  convert to react-vis happy data format\n            let radialData = [];\n            for (const k in calcAreaObj) {\n                radialData.push(calcAreaObj[k]);\n            }\n\n            let data = {\n                children: radialData,\n                color: 1,\n            };\n\n            return data;\n        };\n        const d = calcArea();\n        setAreaData(d);\n    }, [props]);\n\n    return (\n        <List>\n            {areaData && areaData.children && (\n                <ListItem alignItems=\"center\">\n                    <RadialChart\n                        colorType=\"literal\"\n                        animation={true}\n                        className={\"donut-chart-example\"}\n                        innerRadius={radialRadius / 2 - radialRadius / 5}\n                        radius={radialRadius / 2}\n                        getLabel={(d) => d.name}\n                        labelsRadiusMultiplier={0.95}\n                        labelsStyle={{\n                            textAnchor: \"middle\",\n                            font: \"sans-serif\",\n                            fontSize: 11,\n                            fill: \"#FFF\",\n                            textShadow: \"2px 2px 2px #000\",\n                            fontFamily: \"Roboto Mono\",\n                        }}\n                        showLabels\n                        getAngle={(d) => d.area}\n                        data={areaData.children}\n                        onValueMouseOver={(evt) => setHoveredRadial(evt)}\n                        onSeriesMouseOut={() => setHoveredRadial(false)}\n                        width={radialRadius}\n                        height={radialRadius}\n                        padAngle={0.01}\n                    >\n                        {hoveredRadial !== false && (\n                            <Hint value={hoveredRadial}>\n                                <div\n                                    style={{\n                                        background: \"rgba(0,0,0,0.8)\",\n                                        fontSize: 14,\n                                    }}\n                                >\n                                    <Typography\n                                        variant={\"caption\"}\n                                        gutterBottom\n                                    >\n                                        Area: {hoveredRadial.area} sqm\n                                    </Typography>\n                                </div>\n                            </Hint>\n                        )}\n                    </RadialChart>\n                </ListItem>\n            )}\n\n            {hoveredRadial.name && (\n                <List>\n                    <ListItem>\n                        <Typography variant=\"caption\">\n                            {hoveredRadial.name}\n                        </Typography>\n                    </ListItem>\n                    <ListItem>\n                        <Typography>{hoveredRadial.area} sqm</Typography>\n                    </ListItem>\n                </List>\n            )}\n        </List>\n    );\n}\n","import React from \"react\";\nimport { List, ListItem, Divider } from \"@material-ui/core\";\nimport Radar from \"./Radar\";\nimport BarChart from \"./BarChart\";\nimport AreaCalc from \"./AreaCalc\";\n\nfunction VisContainer(props) {\n    return (\n        <>\n            {props.cityIOdata && (\n                <List>\n                    <ListItem alignItems=\"center\">\n                        <AreaCalc cityioData={props.cityIOdata} />\n                    </ListItem>\n\n                    <Divider />\n\n                    <ListItem>\n                        <Radar cityioData={props.cityIOdata} />\n                    </ListItem>\n\n                    <Divider />\n\n                    <ListItem>\n                        <BarChart cityioData={props.cityIOdata} />\n                    </ListItem>\n                </List>\n            )}\n        </>\n    );\n}\n\nexport default VisContainer;\n","import MenuContainer from './MenuContainer'\nimport MapContainer from './DeckglMap'\nimport LoadingSpinner from './CityIO/LoadingSpinner'\nimport VisContainer from './VisContainer'\nimport {\n  makeStyles,\n  Grid,\n  Card,\n  CardContent,\n  Container,\n} from '@material-ui/core'\nimport Page from '../../layouts/Page'\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 'auto',\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n  },\n}))\n\n\nexport default function CSjsMain(props) {\n  const classes = useStyles()\n  const tableName = props.tableName\n  const cityIOdata = props.cityIOdata\n\n  return (\n    <Page className={classes.root} title=\"CitySCopeJS\">\n      <LoadingSpinner />\n      <Container maxWidth={null}>\n        <Grid container spacing={5}>\n          <Grid item xs={6} l={3} md={3} xl={2} container>\n            <Grid item container direction=\"column\" spacing={2}>\n              <Grid item xs={12} l={12} md={12} xl={12}>\n                <Card\n                  elevation={15}\n                  style={{\n                    maxHeight: '85vh',\n                    overflow: 'auto',\n                  }}\n                >\n                  <CardContent>\n                    <MenuContainer tableName={tableName} />\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={6} l={6} md={6} xl={8}>\n            <Card\n              elevation={15}\n              style={{\n                height: '85vh',\n                width: '100%',\n                position: 'relative',\n              }}\n            >\n              {/* <Test/> */}\n              <MapContainer />\n            </Card>\n          </Grid>\n          <Grid item xs={6} l={3} md={3} xl={2}>\n            <Card\n              elevation={15}\n              style={{\n                maxHeight: '85vh',\n                overflow: 'auto',\n              }}\n            >\n              <VisContainer cityIOdata={cityIOdata} />\n            </Card>\n          </Grid>\n        </Grid>\n      </Container>\n    </Page>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport CityIO from './CityIO/cityIO'\nimport CityIOviewer from '../CityIOviewer'\nimport LoadingSpinner from './CityIO/LoadingSpinner'\nimport CSjsMain from './CSjsMain'\n\nexport default function CityScopeJS() {\n  // get the table name for cityIO comp\n  const [tableName, setTableName] = useState()\n  const [isDone, setIsdone] = useState(false)\n  // on init, get the adress URL\n  // to search for  a table\n  useEffect(() => {\n    let url = window.location.toString()\n    let pre = 'cityscope='\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length).toLowerCase()\n\n    \n    // check URL for proper CS project link\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\n      setTableName(cityscopePrjName)\n    } else {\n      /** if failed to get table name from\n       * url location, resote to the\n       * CityIO viewer\n       *\n       */\n      setIsdone(true)\n    }\n  }, [])\n\n  // wait for 'ready' flag from cityIO when app is ready to start\n  const isReady = useSelector((state) => state.READY)\n  const cityIOdata = useSelector((state) => state.CITYIO)\n\n  return (\n    <>\n      {tableName && <CityIO tableName={tableName} />}\n      {isReady && <CSjsMain cityIOdata={cityIOdata} tableName={tableName} />}\n      {isDone && <CityIOviewer />}\n      <LoadingSpinner />\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n    addLoadingModules,\n    removeLoadingModules,\n} from \"../../../redux/actions\";\nimport settings from \"../../../settings/settings.json\";\n\nconst getAPICall = async (URL) => {\n    try {\n        // ! should add 'retry' here\n        // ! https://stackoverflow.com/questions/56074531/how-to-retry-5xx-requests-using-axios\n        const response = await axios.get(URL);\n        return response.data;\n    } catch (err) {\n        console.log(err);\n    }\n};\n\nexport default function CityIO(props) {\n    const { tableName } = props;\n    const [hashId, setHashId] = useState(null);\n    const [hashes, setHashes] = useState({});\n    const cityioURL = `${settings.cityIO.baseURL}${tableName}/`;\n    const cityioData = useSelector((state) => state.CITYIO);\n\n    const dispatch = useDispatch();\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    useEffect(() => {\n        const timer = setTimeout(update, settings.cityIO.interval);\n        console.log(\"reading cityIO every -> \" + settings.cityIO.interval + \"ms\");\n        return () => clearTimeout(timer);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    async function update() {\n        // recursively get hashes\n        const newHashId = await getAPICall(cityioURL + \"/meta/id/\");\n        if (hashId !== newHashId) {\n            setHashId(newHashId);\n        }\n        setTimeout(update, settings.cityIO.interval);\n    }\n\n    async function getModules() {\n        const newHashes = await getAPICall(cityioURL + \"/meta/hashes/\");\n        const promises = [];\n        const loadingModules = [];\n        const pickedModules = settings.cityIO.cityIOmodules.map((x) => x.name);\n        // for each of the modules in settings, add api call to promises\n        pickedModules.forEach((module) => {\n            if (hashes[module] !== newHashes[module]) {\n                promises.push(getAPICall(`${cityioURL}/${module}/`));\n                loadingModules.push(module);\n            } else {\n                promises.push(null);\n            }\n        });\n        dispatch(addLoadingModules(loadingModules));\n        const modules = await Promise.all(promises);\n        setHashes(newHashes);\n\n        // update cityio object with modules data\n        const modulesData = pickedModules.reduce((obj, k, i) => {\n            if (modules[i]) {\n                console.log(`updating ${k}`);\n                return { ...obj, [k]: modules[i] };\n            } else {\n                return obj;\n            }\n        }, cityioData);\n        modulesData.tableName = tableName;\n\n        dispatch(removeLoadingModules(loadingModules));\n\n        // send to cityio\n        dispatch(getCityioData(modulesData));\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        dispatch(setReadyState(true));\n        dispatch(setLoadingState(false));\n    }\n\n    useEffect(() => {\n        //! only update if hashId changes\n        if (!hashId) {\n            return;\n        }\n        // reset the state of loading flag\n        dispatch(setLoadingState(true));\n        \n        getModules();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [hashId]);\n\n    return null;\n}\n","import { HeatmapLayer } from \"deck.gl\";\nimport settings from \"../../../../../settings/settings.json\";\n\nexport default function AccessLayer({ active, data, accessToggle }) {\n    return new HeatmapLayer({\n        visible: active,\n        id: \"ACCESS\",\n        colorRange: settings.map.layers.heatmap.colors,\n        radiusPixels: 200,\n        opacity: 0.5,\n        threshold: 0.5,\n        data,\n        getPosition: (d) => d.coordinates,\n        getWeight: (d) => d.values[accessToggle],\n        updateTriggers: {\n            getWeight: [accessToggle],\n        },\n    });\n}\n","import { PathLayer } from \"deck.gl\";\nimport { hexToRgb } from \"../../../../../utils/utils\";\n\nexport default function AggregatedTripsLayer({\n    active,\n    data,\n    cityioData,\n    ABMmode,\n}) {\n    return new PathLayer({\n        visible: active,\n        id: \"AGGREGATED_TRIPS\",\n        _shadow: false,\n        data,\n        getPath: (d) => {\n            const noisePath =\n                Math.random() < 0.5\n                    ? Math.random() * 0.00005\n                    : Math.random() * -0.00005;\n            for (let i in d.path) {\n                d.path[i][0] = d.path[i][0] + noisePath;\n                d.path[i][1] = d.path[i][1] + noisePath;\n                d.path[i][2] = d.mode[0] * 2;\n            }\n            return d.path;\n        },\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n        opacity: 0.2,\n        getWidth: 1.5,\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\nimport { hexToRgb } from \"../../../../../utils/utils\";\n\n//  * remap line width\nconst _remapValues = (value) => {\n    let remap =\n        value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n    return remap;\n};\n\nexport default function ABMLayer({\n    active,\n    data,\n    cityioData,\n    ABMmode,\n    zoomLevel,\n    time,\n}) {\n    return new TripsLayer({\n        id: \"ABM\",\n        data,\n        getPath: (d) => d.path,\n        getTimestamps: (d) => d.timestamps,\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n        visible: active,\n        getWidth: 1,\n        widthScale: _remapValues(zoomLevel),\n        opacity: 0.8,\n        rounded: true,\n        trailLength: 500,\n        currentTime: time,\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { GeoJsonLayer } from \"deck.gl\";\n\nexport default function GridLayer({ active, data }) {\n    return new GeoJsonLayer({\n        visible: active,\n        id: \"GRID\",\n        data,\n        extruded: true,\n        wireframe: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 2,\n        getElevation: (d) => d.properties.height,\n        getFillColor: (d) => d.properties.color,\n\n        transitions: {\n            getFillColor: 500,\n            getElevation: 500,\n        },\n    });\n}\n","import { useState, useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport {\n  _proccessAccessData,\n  _proccessGridData,\n  _setupSunEffects,\n  updateSunDirection,\n} from '../../../../utils/utils'\nimport { StaticMap } from 'react-map-gl'\nimport DeckGL from '@deck.gl/react'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport settings from '../../../../settings/settings.json'\nimport {\n  AccessLayer,\n  AggregatedTripsLayer,\n  ABMLayer,\n  GridLayer,\n} from './deckglLayers'\n\nexport default function PrjDeckGLMap(props) {\n  const [viewState, setViewState] = useState(settings.map.initialViewState)\n  const [access, setAccess] = useState(null)\n  const [GEOGRID, setGEOGRID] = useState(null)\n  const [ABM, setABM] = useState({})\n  const effectsRef = useRef()\n  const deckGL = useRef()\n  const [cityioData] = useSelector((state) => [state.CITYIO])\n  const viewSettings = useSelector((state) => state.UI_WEBSOCKET_DATA)\n\n  useEffect(() => {\n    if (!effectsRef.current) {\n      return\n    }\n    updateSunDirection(props.viewSettings.time, effectsRef)\n  }, [props.viewSettings])\n\n  const _setViewStateToTableHeader = () => {\n    const header = cityioData.GEOGRID.properties.header\n\n    setViewState({\n      ...viewState,\n      longitude: header.longitude,\n      latitude: header.latitude,\n      zoom: 15,\n      pitch: 0,\n      bearing: 360 - header.rotation,\n      orthographic: true,\n    })\n  }\n\n  useEffect(() => {\n    // fix deck view rotate\n    _rightClickViewRotate()\n    // setup sun effects\n    _setupSunEffects(effectsRef, cityioData.GEOGRID.properties.header)\n\n    // on init, check if prev. local storage with\n    // view state exist. If so, load it.\n    if (localStorage.getItem('deckGLviewState')) {\n      console.log('loading prev. deckGLviewState...')\n      let vs = localStorage.getItem('deckGLviewState')\n      setViewState(JSON.parse(vs))\n    } else {\n      // zoom map on CS table location\n      _setViewStateToTableHeader()\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    effectsRef.current[0].shadowColor = [0, 0, 0, 1]\n  }, [cityioData.GEOGRID.properties.header])\n\n  useEffect(() => {\n    setGEOGRID(_proccessGridData(cityioData))\n    if (cityioData.access) {\n      setAccess(_proccessAccessData(cityioData))\n    }\n    if (cityioData.ABM2) {\n      setABM(cityioData.ABM2)\n    }\n  }, [cityioData])\n\n  const onViewStateChange = ({ viewState }) => {\n    //    save current view state to local sotrage\n    localStorage.setItem('deckGLviewState', JSON.stringify(viewState))\n\n    setViewState(viewState)\n  }\n\n  const _rightClickViewRotate = () => {\n    document\n      .getElementById('deckgl-wrapper')\n      .addEventListener('contextmenu', (evt) => evt.preventDefault())\n  }\n\n  const layersKey = {\n    ABM: ABMLayer({\n      active: viewSettings.ABMLayer.active,\n      data: ABM.trips,\n      cityioData: cityioData,\n      ABMmode: viewSettings.ABMLayer.ABMmode,\n      zoomLevel: viewSettings.ABMLayer.zoomLevel,\n      time: viewSettings.time,\n    }),\n    AGGREGATED_TRIPS: AggregatedTripsLayer({\n      active: viewSettings.AggregatedTripsLayer.active,\n      data: ABM.trips,\n      cityioData: cityioData,\n      ABMmode: viewSettings.AggregatedTripsLayer.ABMmode,\n    }),\n    GRID: GridLayer({\n      active: viewSettings.GridLayer.active,\n      data: GEOGRID,\n    }),\n    ACCESS: AccessLayer({\n      active: viewSettings.AccessLayer.active,\n      data: access,\n      accessToggle: viewSettings.AccessLayer.accessToggle,\n    }),\n  }\n\n  const layerOrder = ['ABM', 'AGGREGATED_TRIPS', 'GRID', 'ACCESS']\n\n  const _renderLayers = () => {\n    let layers = []\n    for (var layer of layerOrder) {\n      layers.push(layersKey[layer])\n    }\n    return layers\n  }\n\n  return (\n    <DeckGL\n      ref={deckGL}\n      viewState={viewState}\n      onViewStateChange={onViewStateChange}\n      layers={_renderLayers()}\n      effects={effectsRef.current}\n      controller={{\n        keyboard: false,\n      }}\n    >\n      <StaticMap\n        asyncRender={false}\n        dragRotate={true}\n        reuseMaps={true}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        mapStyle={settings.map.mapStyle.sat}\n        preventStyleDiffing={true}\n      />\n    </DeckGL>\n  )\n}\n","import { Matrix3d, RectPoints, Vector } from \"./Keystoner\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1,\n    ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./Keystoner\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 20;\nconst halfAnchor = anchorSize / 1.5;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"1px solid white\",\n        cursor: \"move\",\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor,\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor,\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor,\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor,\n    },\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {},\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={(evt) => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation),\n        }}\n    />\n);\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport default class Keystoner extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n\n      if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }  \n\n\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n\n            console.log(\"saving edited projMap...\", JSON.stringify(prevState));\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n      \n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n\n\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <>\n              \n         \n\n                <div\n          \n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </>\n        );\n    }\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        bottom: \"1vh\",\n        zIndex: 1001,\n        maxWidth: \"50vw\",\n    },\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import { useState, useEffect } from 'react'\nimport PrjDeckGLMap from './PrjDeckGLMap'\nimport Keystoner from './Components/Keystoner'\nimport DeleteLocalStorage from './Components/deleteLocalStorage'\n\nexport default function Keystone() {\n  const [editMode, setEditMode] = useState(false)\n\n  const clearLocalStraoge = () => {\n    if (localStorage.getItem('projMap')) {\n      localStorage.removeItem('projMap')\n    }\n    if (localStorage.getItem('deckGLviewState')) {\n      localStorage.removeItem('deckGLviewState')\n    }\n    window.location.reload()\n  }\n\n  useEffect(() => {\n    const onKeyDown = ({ key }) => {\n      if (key === ' ') {\n        setEditMode((editMode) => !editMode)\n        console.log(key, editMode)\n      }\n    }\n    document.addEventListener('keydown', onKeyDown)\n    return () => {\n      document.removeEventListener('keydown', onKeyDown)\n    }\n  }, [editMode])\n\n  return (\n    <>\n      {editMode && (\n        <div onClick={() => clearLocalStraoge()}>\n          <DeleteLocalStorage />\n        </div>\n      )}\n\n      <div\n        // ! this div's props are\n        // ! controling the projection z-index\n        // ! on top of the menus\n\n        style={{\n          height: '100%',\n          width: '100vw',\n          overflow: 'hidden',\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          zIndex: 1000,\n        }}\n      >\n        <div>\n          <Keystoner\n            style={{\n              height: '100vh',\n              width: '100vw',\n            }}\n            isEditMode={editMode}\n          >\n            <PrjDeckGLMap />\n          </Keystoner>\n        </div>\n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport settings from '../settings/settings.json'\nimport { Button } from '@material-ui/core/'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}))\nexport default function TableNameInput({ setSelectedTable }) {\n  const classes = useStyles()\n  const [tableList, setTableList] = useState()\n\n  useEffect(() => {\n    /**\n     * Gets all tables on init\n     */\n    let buttonsArr = []\n    const cityIOlistURL = settings.cityIO.ListOfTables\n    const cityIOtableBaseUrl = settings.cityIO.baseURL\n\n    axios.get(cityIOlistURL).then((res) => {\n      res.data.forEach((tableName) => {\n        const geogridUrl = `${cityIOtableBaseUrl}${tableName}/GEOGRID/`\n        buttonsArr.push(\n          <Button\n            key={Math.random()}\n            variant=\"outlined\"\n            color=\"secondary\"\n            onClick={() => {\n              axios\n                .get(geogridUrl)\n                .then((res) => {\n                  if (res.status === 200) {\n                    setSelectedTable(tableName)\n                  }\n                })\n                .catch((err) => {\n                  console.log(err)\n                })\n            }}\n          >\n            {tableName}\n          </Button>,\n        )\n      })\n      setTableList(buttonsArr)\n    })\n  }, [setSelectedTable])\n\n  return <div className={classes.root}>{tableList}</div>\n}\n","import { useEffect } from 'react'\n\nimport { useDispatch } from 'react-redux'\nimport { setUIWebsocketData, setUIWebsocketReady } from '../../../redux/actions'\nimport settings from '../../../settings/settings.json'\n\n/*\nhttps://stackoverflow.com/questions/39728000/react-native-with-websocket-doesnt-work\n*/\n\nconst UIWebsocket = () => {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    var socket = new WebSocket(settings.SOCKETS.URL)\n\n    socket.onopen = () => {\n      socket.send('CityScopeJS')\n      socket.onmessage = ({ data }) => {\n        dispatch(setUIWebsocketReady(true))\n        dispatch(setUIWebsocketData(JSON.parse(data)))\n      }\n    }\n  }, [dispatch])\n  return null\n}\n\nexport default UIWebsocket\n","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport CityIO from './CityIO/'\nimport Keystone from './Keystone'\nimport { Container, Typography, makeStyles, Box } from '@material-ui/core'\nimport TableNameInput from '../../Components/TableNameInput'\nimport Page from '../../layouts/Page'\nimport UIWebsocket from './UIWebsocket'\n\nexport default function CityScopeJS() {\n  // wait for 'ready' flag from cityIO when app is ready to start\n  const isCityIOready = useSelector((state) => state.READY)\n  const isSocketUIready = useSelector((state) => state.UI_WEBSOCKET_READY)\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: 'auto',\n        height: '100%',\n        paddingBottom: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n      },\n    },\n  }))\n\n  const [selectedTable, setSelectedTable] = useState(null)\n\n  const ListOfTables = () => {\n    return (\n      <Container maxWidth=\"md\">\n        <Typography color=\"textPrimary\" variant=\"h1\">\n          Projection tool\n        </Typography>\n        <Box mt={'3em'} />\n        <Typography color=\"textPrimary\">\n          This tool is used to project and display CityScopeJS tables in passive\n          mode, such as projectors, TVs, or other non-interactive displays.\n        </Typography>\n        <Box mt={'2em'} />\n        <Typography color=\"textPrimary\" variant=\"caption\">\n          start by selecting your CityScopeJS project. Press 'Spacebar' to\n          toggle keystone. Note: Not all CityScope projects below are ready for\n          CityScopeJS.\n        </Typography>\n        <Box mt={'2em'} />\n        <TableNameInput setSelectedTable={setSelectedTable} />\n      </Container>\n    )\n  }\n\n  const classes = useStyles()\n  return (\n    <>\n      <UIWebsocket />\n      <Page className={classes.root} title=\"Keystone\">\n        {!isCityIOready && <ListOfTables />}\n        {selectedTable && <CityIO tableName={selectedTable} />}\n\n        {isCityIOready && isSocketUIready && <Keystone />}\n      </Page>\n    </>\n  )\n}\n","import { Navigate } from 'react-router-dom'\nimport MainLayout from './layouts/MainLayout'\nimport NotFoundView from './views/Errors/NotFoundView'\nimport GridEditor from './views/GridEditor'\nimport CityScopeJS from './views/CityScopeJS'\nimport ProjectionMapping from './views/ProjectionMapping'\n\nconst routes = [\n  {\n    path: '/',\n    element: <MainLayout />,\n    children: [\n      { path: '/', element: <CityScopeJS /> },\n      { path: '/editor/', element: <GridEditor /> },\n      { path: '/projection', element: <ProjectionMapping /> },\n      { path: '/cityioviewer', element: <Navigate to=\"/\" /> },\n\n      { path: '*', element: <Navigate to=\"/404\" /> },\n      { path: '404', element: <NotFoundView /> },\n    ],\n  },\n]\n\nexport default routes\n","import React from \"react\";\nimport { useRoutes } from \"react-router-dom\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport GlobalStyles from \"./theme/GlobalStyles\";\nimport theme from \"./theme\";\nimport routes from \"./routes\";\n\nconst App = () => {\n    const routing = useRoutes(routes);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <GlobalStyles />\n            {routing}\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport Provider from \"./redux/Provider\";\nimport store from \"./redux/store\";\n\n// ! basename={process.env.PUBLIC_URL}\n\nReactDOM.render(\n    <Provider store={store}>\n        {/* https://github.com/facebook/create-react-app/issues/1765 */}\n        <HashRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </HashRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}