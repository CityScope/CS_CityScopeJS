{"version":3,"sources":["redux/reducers/cityIOdataSlice.js","theme/typography.js","theme/index.js","settings/settings.js","utils/utils.js","Components/LoadingModules/index.js","Components/CityIO/index.js","redux/reducers/menuSlice.js","views/CityScopeJS/MenuContainer/TypesMenu/index.js","views/CityScopeJS/MenuContainer/LayersMenu/index.js","views/CityScopeJS/MenuContainer/ViewSettingsMenu/index.js","views/CityScopeJS/MenuContainer/ScenariosMenu/index.js","Components/ResizableDrawer.js","views/CityScopeJS/MenuContainer/EditMenu/index.js","views/CityScopeJS/MenuContainer/TableInfo/index.js","views/CityScopeJS/MenuContainer/index.js","views/CityScopeJS/DeckglMap/components/PaintBrush/PaintBrush.js","views/CityScopeJS/DeckglMap/components/CellMeta.js","views/CityScopeJS/DeckglMap/components/PaintBrush/index.js","views/CityScopeJS/DeckglMap/deckglLayers/AccessLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/AggregatedTripsLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/ABMLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GridLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/TextualLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GeojsonLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/MeshLayer.js","views/CityScopeJS/DeckglMap/index.js","views/CityScopeJS/VisContainer/RadarChart/index.js","views/CityScopeJS/VisContainer/BarChart/index.js","views/CityScopeJS/VisContainer/AreaCalc/index.js","views/CityScopeJS/VisContainer/index.js","views/CityScopeJS/index.js","views/CityIOviewer/TableListLoading.js","views/CityIOviewer/CityIOlist.js","views/CityIOviewer/SelectedTable/index.js","views/CityIOviewer/SearchTablesList.js","views/CityIOviewer/CityIOdeckGLmap/legoio.png","views/CityIOviewer/CityIOdeckGLmap/index.js","views/CityIOviewer/index.js","views/RenderedView/RenderedViewMap.js","views/RenderedView/index.js","views/ProjectionMapping/Keystone/Components/ViewStateInputs.js","views/ProjectionMapping/Keystone/ProjectionDeckMap/DeckMap.js","views/ProjectionMapping/Keystone/ProjectionDeckMap/index.js","views/ProjectionMapping/Keystone/Components/anchor.tsx","views/ProjectionMapping/Keystone/Components/Keystoner.tsx","views/ProjectionMapping/Keystone/Components/deleteLocalStorage.js","views/ProjectionMapping/Keystone/index.js","views/ProjectionMapping/index.js","views/GridEditor/EditorMap/EditorBrush.js","redux/reducers/editorMenuSlice.js","views/GridEditor/EditorMap/index.js","views/GridEditor/EditorMenu/GridPropsMenu/CenterMapButton/index.js","views/GridEditor/EditorMenu/GridPropsMenu/index.js","views/GridEditor/EditorMenu/GridMakerMenu/gridCreator.js","views/GridEditor/EditorMenu/GridMakerMenu/index.js","views/GridEditor/EditorMenu/TypesEditorMenu/index.js","views/GridEditor/EditorMenu/CommitGridMenu/index.js","views/GridEditor/EditorMenu/index.js","views/GridEditor/index.js","App.js","redux/reducers/index.js","index.js"],"names":["cityIOdataSlice","createSlice","name","initialState","cityIOisDone","cityIOtableName","reducers","updateCityIOdata","state","action","cityIOdata","payload","toggleCityIOisDone","updateCityIOtableName","actions","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","h1","fontWeight","letterSpacing","h2","h3","h4","h5","h6","overline","theme","createTheme","palette","mode","primary","main","light","secondary","text","shape","borderRadius","overrides","MuiOutlinedInput","notchedOutline","borderColor","generalSettings","location","window","csjsLocation","queryString","parse","search","console","log","getCSJSLocation","cityIOSettings","docsURL","cityIO","baseURL","serverLocation","getServerLocation","ListOfTables","interval","cityIOmodules","expectUpdate","mapSettings","map","mapStyle","sat","blue","inverse","normal","layers","ABM","endTime","startTime","animationSpeed","initialViewState","maxZoom","zoom","pitch","bearing","expectedLayers","GRID_LAYER_CHECKBOX","displayName","cityIOmoduleName","initState","initSliderValue","ABM_LAYER_CHECKBOX","AGGREGATED_TRIPS_LAYER_CHECKBOX","ACCESS_LAYER_CHECKBOX","TEXTUAL_LAYER_CHECKBOX","GEOJSON_LAYER_CHECKBOX","MESH_LAYER_CHECKBOX","viewControlCheckboxes","ROTATE_CHECKBOX","ANIMATION_CHECKBOX","viewControlButtons","RESET_VIEW_BUTTON","ORTHO_VIEW_BUTTON","NORTH_VIEW_BUTTON","GridEditorSettings","dark","GEOGRIDDATA","color","height","id","interactive","GEOGRID","features","properties","header","tableName","cellSize","latitude","longitude","tz","ncols","nrows","rotation","projection","types","Office","LBCS","proportion","use","NAICS","Park","Residential","type","getAPICall","URL","axios","get","response","data","error","hexToRgb","hex","result","exec","parseInt","testHex","hexString","test","postToCityIO","endPoint","postURL","options","method","url","headers","Accept","then","res","status","catch","cityIObaseURL","fetchJSON","fetch","json","getTableID","getModule","LoadingModules","props","loadingModules","verticalPosition","barHeight","module","index","Box","sx","position","bottom","width","zIndex","LinearProgress","Typography","variant","style","marginRight","removeElement","array","elem","indexOf","splice","CityIO","settings","dispatch","useDispatch","useSelector","cityIOdataState","useState","mainHash","setMainHash","hashes","setHashes","listLoadingModules","setListLoadingModules","cityioURL","getCityIOmetaHash","newMainHash","setTimeout","newHashes","promises","modulesToUpdate","x","forEach","push","Promise","all","modulesFromCityIO","modulesData","reduce","obj","moduleName","m","useEffect","timer","clearTimeout","getModules","menuSlice","editMenuState","typesMenuState","layersMenuState","viewSettingsMenuState","animationMenuState","toggleAnimationState","animationSpeedSliderValue","updateLayersMenuState","updateTypesMenuState","updateEditMenuState","updateViewSettingsMenuState","updateAnimationMenuState","TypesListMenu","landUseTypesList","selectedType","setSelectedType","localTypesState","setLocalTypesState","SELECTED_TYPE","description","typesList","listMenuItemsArray","Object","keys","thisType","col","ListItem","Button","fullWidth","size","border","onClick","typeProps","thisTypeName","Math","random","Card","CardContent","Slider","valueLabelDisplay","onChange","e","val","update","newHeight","assign","onChangeCommitted","min","value","max","JSON","stringify","List","display","flexDirection","maxHeight","overflow","overflowY","createTypesIcons","LayersMenu","cityIOkeys","menuItem","isOn","slider","setLayersMenuState","sliderVal","setSliderVal","toggleListArr","Grid","container","includes","item","xs","FormControlLabel","control","Checkbox","checked","target","label","_","updateSliderVal","makeLayerControlsMenu","ViewSettingsMenu","setViewSettingsMenuState","useLayoutEffect","buttonsArr","thisButton","VIEW_CONTROL_BUTTONS","handleButtonClicks","ButtonGroup","createViewControlButtons","menuItemList","hasSlider","createCheckboxes","ScenariosMenu","scenariosButtonsList","setScenariosButtonsList","scenarioToRestore","setScenariosToRestore","saveDialogState","setSaveDialogState","loadDialogState","setLoadDialogState","scenarioTextInput","setScenarioTextInput","handleClose","handleRestoreThisState","hash","finally","createScenariosButtons","scenarios","scenario","i","Tooltip","arrow","placement","title","handleOpenDialog","substring","IconButton","tempArr","scnToDelete","filter","handleDeleteThisState","scenariosButtons","flexGrow","Badge","badgeContent","length","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","TextField","DialogActions","newScenario","autoFocus","maxDrawerWidth","document","documentElement","clientWidth","innerWidth","ResizableDrawer","children","direction","defaultDrawerWidth","floor","drawerWidth","setDrawerWidth","handleMouseUp","removeEventListener","handleMouseMove","useCallback","newWidth","body","offsetLeft","offsetWidth","clientX","onMouseDown","addEventListener","padding","dividerWidth","left","undefined","right","cursor","backgroundColor","Drawer","anchor","ModalProps","keepMounted","PaperProps","EditMenu","EDIT_BUTTON","editMenu","setEditMenu","endIcon","event","currentTarget","TableInfo","gutterBottom","MenuContainer","menuItemsArray","MenuItems","PaintBrush","mousePos","hoveredCells","isInteractiveCell","object","divSize","colorTrans","mouseX","mouseY","clientY","msg","mouseDown","pointerEvents","top","CellMeta","hoveredObj","PaintBrushContainer","editOn","pickingRadius","BrushSelector","AccessLayer","opacity","accessData","access","HeatmapLayer","colorRange","threshold","getPosition","d","geometry","coordinates","getWeight","updateTriggers","AggregatedTripsLayer","ABMmode","ABM2","PathLayer","shadowEnabled","trips","getPath","path","getColor","attr","getWidth","transitions","ABMLayer","zoomLevel","time","TripsLayer","getTimestamps","timestamps","widthScale","trailLength","currentTime","handleGridCellEditing","setSelectedCellsState","deckGLRef","multiSelectedObj","dim","y","current","pickObjects","multipleObjPicked","selected","thisCellProps","processGridData","newGEOGRID","GridLayer","keyDownState","selectedCellsState","updaters","setDraggingWhileEditing","setHoveredObj","deckGLref","GeoJsonLayer","pickable","extruded","wireframe","lineWidthScale","lineWidthMinPixels","getElevation","getFillColor","onDrag","onDragStart","onHover","onDragEnd","TextualLayer","textLayerData","infoIteam","info","TextLayer","getText","getSize","getAngle","getTextAnchor","getAlignmentBaseline","GeojsonLayer","geojson","stroked","filled","fill","getLineColor","stroke","MeshLayer","SimpleMeshLayer","loaders","OBJLoader","mesh","pntArr","first","last","getOrientation","ceil","getScale","DeckGLMap","menuState","draggingWhileEditing","viewState","setViewState","setKeyDownState","setMousePos","setMouseDown","setGEOGRIDDATA","useRef","editModeToggle","layersMenu","viewControlButton","toggleRotateCamera","animationTime","setAnimationTime","animation","animate","t","requestAnimationFrame","cancelAnimationFrame","setViewStateToTableHeader","lastCell","firstCell","midGrid","orthographic","evt","preventDefault","dataProps","layersKey","AGGREGATED_TRIPS","GRID","ACCESS","TEXTUAL","GEOJSON","MESH","layerOrder","onKeyDown","nativeEvent","key","onKeyUp","onMouseMove","onMouseUp","ref","onViewStateChange","layerNameString","renderDeckLayers","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","asyncRender","reuseMaps","mapboxApiAccessToken","process","preventStyleDiffing","scales","r","angleLines","suggestedMin","suggestedMax","grid","circular","pointLabels","ticks","optionsNoData","noData","labels","datasets","borderWidth","RadarChart","ChartJS","register","RadialLinearScale","PointElement","LineElement","Filler","Legend","radarData","setRadarData","indicators","viz_type","ref_value","createRadarData","CategoryScale","LinearScale","BarElement","Title","maintainAspectRatio","aspectRatio","responsive","BarChart","barChartData","setBarChartData","createBarChartData","AreaCalc","chartData","setChartData","ArcElement","geoGridData","gridCellData","typeName","createChartData","VisContainer","margin","spacing","md","lg","xl","CityScopeJS","TableListLoading","progress","setProgress","BorderLinearProgress","styled","setInterval","oldProgress","diff","clearInterval","CityIOlist","getTablesList","tablesList","setTableList","isLoading","setIsLoading","fetchCityIOtables","cityIOlistURL","tablesArr","requestArr","oldArray","tableURL","tableHeader","toString","SelectedTable","selectedTable","clicked","cityscopeJSendpoint","projectionEndpoint","setOpen","component","Link","href","toLowerCase","SearchTablesList","setSelectedTable","defaultProps","getOptionLabel","option","Autocomplete","disablePortal","renderInput","params","newValue","CityIOdeckGLmap","markerInfo","setMarkerInfo","setClicked","setZoom","INIT_VIEW","zHeight","viewport","setViewport","setInitialViewState","isHovering","getElementById","markersArr","table","coord","from","to","TileLayer","minZoom","tileSize","renderSubLayers","tile","bbox","west","south","east","north","BitmapLayer","image","_imageCoordinateSystem","COORDINATE_SYSTEM","CARTESIAN","bounds","LineLayer","getSourcePosition","getTargetPosition","getPixelOffset","IconLayer","iconAtlas","icon","transitionDuration","transitionInterpolator","FlyToInterpolator","iconMapping","marker","mask","getIcon","sizeScale","views","GlobeView","Boolean","getCursor","isDragging","onViewportChange","ContextProvider","_MapContext","Provider","CityIOviewer","cube","CubeGeometry","xlen","ylen","zlen","RenderedViewMap","refMap","refDeckgl","renderDivRef","renderedImage","setRenderedImage","prompt","setPrompt","userSeed","setUserSeed","serverURL","setServerURL","midGridCoordinates","createElement","mergeCanvas","blobToDataUrl","blob","a","FileReader","onload","readAsDataURL","Container","maxWidth","mt","mb","Paper","p","required","defaultValue","InputProps","inputProps","mapGL","getMap","deck","mapboxCanvas","getCanvas","redraw","deckglCanvas","canvas","context","getContext","globalAlpha","drawImage","jpegFile","toDataURL","scrollIntoView","behavior","toBlob","formData","FormData","append","responseType","dataUrl","request","message","disabled","CircularProgress","Stack","minHeight","preserveDrawingBuffer","WebkitFilter","src","alt","RenderedView","ViewStateInputs","viewToggles","Number","isFinite","parseFloat","noValidate","autoComplete","DeckMap","TUIobject","tui","viewStateEditMode","editMode","active","MAP_STYLE","localStorage","getItem","vs","setItem","ProjectionDeckMap","layersVisibilityControl","setTime","visible","intensity","toggleArray","curr_active","TEXT","fadeTrail","halfAnchor","styles","AnchorComponent","vector","translation","onMouseEnter","className","transform","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","Keystoner","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","setState","onAnchorMouseUp","isEditMode","newVector","this","getBoundingClientRect","ls","prevProps","prevState","anchorStyle","anchorClassName","React","DeleteLocalStorage","alignItems","justify","startIcon","Keystone","tableRatio","setEditMode","setViewStateEditMode","removeItem","reload","ProjectionMapping","SelectionTarget","editorMenuSlice","editorMapCenter","gridMaker","gridProps","typesEditorState","updateEditorMapCenter","updateGridProps","updateGridMaker","updateTypesEditorState","EditorMap","setGrid","editorMenuState","selectedRow","createdGrid","pickedCellsState","latCenter","lonCenter","pickedObject","feature","cellInfo","rightButton","CenterMapButton","mapCenter","GridProps","formValues","setFormValues","handleFormUpdates","helperText","deg_to_rad","deg","PI","rad_to_deg","rad","randomProperty","GridMakerMenu","loading","setLoading","tableData","handleGridCreation","top_left_lon","top_left_lat","userPrj","cell_size","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","rndType","geojsonPolygon","polygon_xy","polygon_ll","v","ll","gridCreator","LoadingButton","resolve","loadingPosition","tableInitialState","columns","field","lookup","No","Web","TUI","LandUseTypesList","typesArray","createTypesArray","TypesEditorMenu","tableState","setTableState","setSelectedRow","rowColor","setRowColor","paging","selection","rowStyle","rowData","onRowClick","row","editable","onRowAdd","newData","onRowUpdate","oldData","CommitGridMenu","reqResponse","setReqResponse","generatedGrid","generatedGridBool","postGridToCityIO","DATA","GEOGRIDStructure","geoJsonFeatures","GEOGRIDObject","struct","newTypesList","oldType","element","makeGEOGRIDobject","GEOGRIDDATAObject","GEOGRIDDATA_object","makeGEOGRIDDATAobject","table_url","new_table_grid","reqResponseUI","EditorMenu","GridEditor","App","setTableName","viewSelectorState","setViewSelectorState","selectView","view","parsed","cityscope","render","ThemeProvider","CssBaseline","combineReducers","cityIOdataSliceReducer","menuSliceReducer","editorMenuSliceReducer","store","configureStore","reducer","rootReducer","ReactDOM"],"mappings":"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","file":"static/js/main.869f3595.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const cityIOdataSlice = createSlice({\n  name: \"cityIOdataState\",\n  initialState: {},\n  cityIOisDone: false,\n  cityIOtableName: \"\",\n  reducers: {\n    updateCityIOdata: (state, action) => {\n      state.cityIOdata = action.payload;\n    },\n    toggleCityIOisDone: (state, action) => {\n      state.cityIOisDone = action.payload;\n    },\n    updateCityIOtableName: (state, action) => {\n      state.cityIOtableName = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateCityIOdata,\n  toggleCityIOisDone,\n  updateCityIOtableName,\n} = cityIOdataSlice.actions;\nexport default cityIOdataSlice.reducer;\n","const typography = {\n    fontFamily: `\"Roboto Mono\", sans-serif`,\n    fontSize: 11,\n    fontWeightLight: 100,\n    fontWeightRegular: 500,\n    fontWeightMedium: 700,\n\n    h1: {\n        fontWeight: 700,\n        fontSize: 45,\n        letterSpacing: \"-1px\",\n    },\n    h2: {\n        fontWeight: 800,\n        fontSize: 29,\n        letterSpacing: \"-0.24px\",\n    },\n    h3: {\n        fontWeight: 700,\n        fontSize: 24,\n        letterSpacing: \"-0.06px\",\n    },\n    h4: {\n        fontWeight: 500,\n        fontSize: 20,\n        letterSpacing: \"-0.06px\",\n    },\n    h5: {\n        fontWeight: 500,\n        fontSize: 16,\n        letterSpacing: \"-0.05px\",\n    },\n    h6: {\n        fontWeight: 500,\n        fontSize: 14,\n        letterSpacing: \"-0.05px\",\n    },\n    overline: {\n        fontWeight: 500,\n    },\n};\n\nexport default typography;\n","import typography from \"./typography\";\nimport { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  typography,\n  palette: {\n\n    mode: \"dark\",\n    primary: {\n      main: \"#FFF\",\n      light: \"#ff5278\",\n    },\n    secondary: {\n      main: \"#ff5278\",\n    },\n    text: {\n      primary: \"#fff\",\n      secondary: \"#ff5278\",\n    },\n  },\n  shape: {\n    borderRadius: 10,\n  },\n  overrides: {\n    MuiOutlinedInput: {\n      notchedOutline: {\n        borderColor: \"#ff5278\",\n      },\n    },\n  },\n});\n\nexport default theme;\n","// import { cityIOModeBool } from \"../utils/utils\";\nimport queryString from \"query-string\";\n\nconst getServerLocation = () => {\n  const location = window.location;\n  const parsed = queryString.parse(location.search);\n\n  const serverLocation =\n    \"cityio_local\" in parsed\n      ? \"http://127.0.0.1:5000/api/\"\n      : \"https://cityio.media.mit.edu/api/\";\n  console.log(\"cityIO server location: \", serverLocation);\n  return serverLocation;\n};\n// get the location of the app (local or remote)\nconst getCSJSLocation = () => {\n  const location = window.location;\n  const parsed = queryString.parse(location.search);\n  const csjsLocation =\n    \"csjs_local\" in parsed\n      ? \"http://localhost:3000/CS_cityscopeJS/\"\n      : \"https://cityscope.media.mit.edu/CS_cityscopeJS/\";\n  console.log(\"cityScopeJS location: \", csjsLocation);\n  return csjsLocation;\n};\n\nexport const generalSettings = {\n  csjsURL: getCSJSLocation(),\n};\n\nexport const cityIOSettings = {\n  docsURL:\n    \"https://raw.githubusercontent.com/CityScope/CS_cityscopeJS/master/docs/\",\n  cityIO: {\n    baseURL: getServerLocation(),\n\n    ListOfTables: \"tables/list/\",\n    interval: 500,\n    cityIOmodules: [\n      { name: \"header\", expectUpdate: false },\n      { name: \"GEOGRID\", expectUpdate: false },\n      { name: \"ABM2\", expectUpdate: true },\n      { name: \"geojson\", expectUpdate: true },\n      { name: \"grid\", expectUpdate: false },\n      { name: \"access\", expectUpdate: true },\n      { name: \"GEOGRIDDATA\", expectUpdate: false },\n      { name: \"indicators\", expectUpdate: true },\n      { name: \"textual\", expectUpdate: true },\n      { name: \"scenarios\", expectUpdate: true },\n      { name: \"tui\", expectUpdate: true },\n    ],\n  },\n};\nexport const mapSettings = {\n  map: {\n    mapStyle: {\n      sat: \"mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd?fresh=true\",\n      blue: \"mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq?fresh=true\",\n      inverse: \"mapbox://styles/relnox/cjlu6w5sc1dy12rmn4kl2zljn?fresh=true\",\n      normal: \"mapbox://styles/relnox/cl8dv36nv000t14qik9yg4ys6?fresh=true\"\n    },\n    layers: {\n      ABM: {\n        endTime: 86400,\n        startTime: 43200,\n        animationSpeed: 10,\n      },\n    },\n    initialViewState: {\n      maxZoom: 22,\n      zoom: 15,\n      pitch: 0,\n      bearing: 0,\n    },\n  },\n};\n\nexport const expectedLayers = {\n  GRID_LAYER_CHECKBOX: {\n    displayName: \"CS Grid\",\n    cityIOmoduleName: \"GEOGRID\",\n    initState: true,\n    initSliderValue: 50,\n  },\n  ABM_LAYER_CHECKBOX: {\n    displayName: \"Animated Trips\",\n    cityIOmoduleName: \"ABM2\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  AGGREGATED_TRIPS_LAYER_CHECKBOX: {\n    displayName: \"Aggregated Trips\",\n    cityIOmoduleName: \"ABM2\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  ACCESS_LAYER_CHECKBOX: {\n    displayName: \"Heatmap\",\n    cityIOmoduleName: \"access\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  TEXTUAL_LAYER_CHECKBOX: {\n    displayName: \"Text\",\n    cityIOmoduleName: \"text\",\n    initState: false,\n    initSliderValue: 100,\n  },\n  GEOJSON_LAYER_CHECKBOX: {\n    displayName: \"GeoJson\",\n    cityIOmoduleName: \"geojson\",\n    initState: false,\n    initSliderValue: 50,\n  },\n  MESH_LAYER_CHECKBOX: {\n    displayName: \"Mesh <beta>\",\n    cityIOmoduleName: \"GEOGRID\",\n    initState: false,\n    initSliderValue: 100,\n  },\n};\n\nexport const viewControlCheckboxes = {\n  ROTATE_CHECKBOX: {\n    displayName: \"Rotate Camera\",\n    initState: false,\n    initSliderValue: 100,\n  },\n\n  ANIMATION_CHECKBOX: {\n    displayName: \"Toggle Animation\",\n    initState: false,\n    initSliderValue: 100,\n  },\n};\n\nexport const viewControlButtons = {\n  RESET_VIEW_BUTTON: {\n    displayName: \"Reset View\",\n    initState: false,\n  },\n  ORTHO_VIEW_BUTTON: {\n    displayName: \"Ortho View\",\n    initState: false,\n  },\n  NORTH_VIEW_BUTTON: {\n    displayName: \"North View\",\n    initState: false,\n  },\n};\n\nexport const GridEditorSettings = {\n  map: {\n    mapStyle: {\n      sat: \"mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd?fresh=true\",\n      dark: \"mapbox://styles/relnox/cjl58dpkq2jjp2rmzyrdvfsds?fresh=true\",\n      blue: \"mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq?fresh=true\",\n    },\n  },\n\n  GEOGRIDDATA: {\n    color: [0, 0, 0],\n    height: [0, 50, 100],\n    id: 0,\n    interactive: \"Web\",\n    name: \"name\",\n  },\n\n  GEOGRID: {\n    features: [],\n    properties: {\n      header: {\n        tableName: \"test\",\n        cellSize: 50,\n        latitude: 42.3664655,\n        longitude: -71.0854323,\n        tz: -5,\n        ncols: 20,\n        nrows: 20,\n        rotation: 0,\n        projection:\n          \"+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000 +y_0=750000 +ellps=GRS80 +datum=NAD83 +units=m +no_def\",\n      },\n\n      types: {\n        Office: {\n          LBCS: [\n            {\n              proportion: 1,\n              use: {\n                \"2310\": 1,\n              },\n            },\n          ],\n          NAICS: [\n            {\n              proportion: 1,\n              use: {\n                \"5400\": 1,\n              },\n            },\n          ],\n          interactive: \"Web\",\n          color: \"#FF5277\",\n          height: [0, 50, 100],\n        },\n        Park: {\n          LBCS: [\n            {\n              proportion: 1,\n              use: {\n                \"7240\": 1,\n              },\n            },\n          ],\n          NAICS: null,\n          interactive: \"Web\",\n          color: \"#38C9FF\",\n        },\n        Residential: {\n          LBCS: [\n            {\n              proportion: 1,\n              use: {\n                \"1100\": 1,\n              },\n            },\n          ],\n          NAICS: null,\n          interactive: \"Web\",\n          color: \"#FFFF33\",\n          height: [0, 50, 100],\n        },\n      },\n    },\n    type: \"FeatureCollection\",\n  },\n};\n","import axios from \"axios\";\nimport {cityIOSettings} from \"../settings/settings\";\n\n/**\n * Get API call using axios\n */\n\nexport const getAPICall = async (URL) => {\n  try {\n    const response = await axios.get(URL);\n    return response.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n/**\n * convert rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n  function valToHex(c) {\n    var hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n  }\n  return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n\n\n\n/**\n * convert hex to rgb array\n */\nexport function hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n      ]\n    : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n  let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n  return isHex;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const postToCityIO = (data, tableName, endPoint) => {\n  let postURL = cityIOSettings.cityIO.baseURL + \"table/\" + tableName + endPoint;\n\n  const options = {\n    method: \"post\",\n    url: postURL,\n    data: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n  axios(options)\n    .then((res) => {\n      if (res.data.status === \"ok\") {\n        console.log(`--> cityIO endpoint ${postURL} was updated <--`);\n      }\n    })\n    .catch((error) => {\n      console.log(\"ERROR:\", error);\n    });\n};\n\nconst cityIObaseURL = cityIOSettings.cityIO.baseURL;\n\nexport const fetchJSON = async (url, options) => {\n  const response = await fetch(url, options);\n  const data = await response.json();\n  return data;\n};\n\nexport const getTablePrevCommitHash = async (id) =>\n  await fetchJSON(`${cityIObaseURL}commit/${id}/`).then((c) => {\n    return { parent: c.parent, meta: c };\n  });\n\nexport const getTableID = async (tableName) =>\n  await fetchJSON(\n    `${cityIObaseURL}table/${tableName}/meta/hashes/GEOGRIDDATA/`\n  );\n\nexport const getCommit = async (id) =>\n  await fetchJSON(`${cityIObaseURL}commit/${id}/`);\n\nexport const getModule = async (id) =>\n  await fetchJSON(`${cityIObaseURL}module/${id}/`);\n","import { Typography, Box } from \"@mui/material\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nconst LoadingModules = (props) => {\n  const { loadingModules, verticalPosition, barHeight } = props;\n  return (\n    <>\n      {loadingModules.map((module, index) => {\n        return (\n          <Box\n            key={\"box_\" + module}\n            sx={{\n              position: \"fixed\",\n              bottom: verticalPosition === \"bottom\" ? (index + 1) * 10 : \"auto\",\n              width: \"100%\",\n              zIndex: 10000,\n            }}\n          >\n            <LinearProgress\n              sx={{ height: barHeight || 10 }}\n              color={\"secondary\"}\n            />\n            <Typography\n              variant=\"caption\"\n              color=\"primary\"\n              style={{ marginRight: \"1vw\" }}\n            >\n              Loading {module}\n            </Typography>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n\nexport default LoadingModules;\n","import { useEffect, useState } from \"react\";\nimport { cityIOSettings } from \"../../settings/settings\";\nimport {\n  updateCityIOdata,\n  toggleCityIOisDone,\n} from \"../../redux/reducers/cityIOdataSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getAPICall } from \"../../utils/utils\";\nimport LoadingModules from \"../../Components/LoadingModules\";\n\nconst removeElement = (array, elem) => {\n  var index = array.indexOf(elem);\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n  return array;\n};\n\nconst CityIO = (props) => {\n  const settings = cityIOSettings;\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const { tableName } = props;\n\n  const [mainHash, setMainHash] = useState(null);\n  const [hashes, setHashes] = useState({});\n  const [listLoadingModules, setListLoadingModules] = useState([]);\n  const cityioURL = `${settings.cityIO.baseURL}table/${tableName}/`;\n\n  /**\n   * start fetching API hashes to check for new data\n   */\n  useEffect(() => {\n    const timer = setTimeout(getCityIOmetaHash, settings.cityIO.interval);\n    console.log(\"reading cityIO every \" + settings.cityIO.interval + \"ms\");\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * gets the main hash of this cityIO table\n   * on a constant loop to check for updates\n   */\n  async function getCityIOmetaHash() {\n    // recursively get hashes\n    const newMainHash = await getAPICall(cityioURL + \"meta/id/\");\n    // is it a new hash?\n    if (mainHash !== newMainHash) {\n      setMainHash(newMainHash);\n    }\n    // do it forever\n    setTimeout(getCityIOmetaHash, settings.cityIO.interval);\n  }\n\n  useEffect(() => {\n    //! only update if hashId changes\n    if (!mainHash) {\n      return;\n    }\n    // if we have a new hash, start getting submodules\n    getModules();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mainHash]);\n\n  async function getModules() {\n    console.log(\"--- starting update ---\");\n    // wait to get all of this table's hashes\n    const newHashes = await getAPICall(cityioURL + \"meta/hashes/\");\n    // init array of GET promises\n    const promises = [];\n    // init array of modules names\n    const loadingModules = [];\n    // get an array of modules to update\n    const modulesToUpdate = settings.cityIO.cityIOmodules.map((x) => x.name);\n    // for each of the modules in settings, add api call to promises\n    modulesToUpdate.forEach((module) => {\n      // if this module has an old hash\n      // we assume it is about to be updated\n      if (hashes[module] !== newHashes[module]) {\n        // add this module URL to an array of GET requests\n        promises.push(getAPICall(`${cityioURL}${module}/`));\n        // and also add this module name to array\n        // of modules that we await for\n        loadingModules.push(module);\n      } else {\n        promises.push(null);\n      }\n      setListLoadingModules(loadingModules);\n    });\n\n    // GET all modules data\n    const modulesFromCityIO = await Promise.all(promises);\n    setHashes(newHashes);\n\n    // update cityio object with modules data\n    let modulesData = modulesToUpdate.reduce((obj, moduleName, index) => {\n      // if this module has data\n      if (modulesFromCityIO[index]) {\n        setListLoadingModules(removeElement(listLoadingModules, moduleName));\n\n        return { ...obj, [moduleName]: modulesFromCityIO[index] };\n      } else {\n        return obj;\n      }\n    }, cityIOdata);\n    let m = { ...modulesData, tableName: tableName };\n    dispatch(updateCityIOdata(m));\n    console.log(\"--- done updating from cityIO ---\");\n    dispatch(toggleCityIOisDone(true));\n  }\n\n  return <LoadingModules loadingModules={listLoadingModules} />;\n};\n\nexport default CityIO;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const menuSlice = createSlice({\n  name: \"menuState\",\n  initialState: {\n    editMenuState: {},\n    typesMenuState: {},\n    layersMenuState: {},\n    viewSettingsMenuState: {},\n    animationMenuState: {\n      toggleAnimationState: false,\n      animationSpeedSliderValue: 10,\n    },\n  },\n  reducers: {\n    updateLayersMenuState: (state, action) => {\n      state.layersMenuState = action.payload;\n    },\n\n    updateTypesMenuState: (state, action) => {\n      state.typesMenuState = action.payload;\n    },\n\n    updateEditMenuState: (state, action) => {\n      state.editMenuState = action.payload;\n    },\n\n    updateViewSettingsMenuState: (state, action) => {\n      state.viewSettingsMenuState = action.payload;\n    },\n\n    updateAnimationMenuState: (state, action) => {\n      state.animationMenuState = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateLayersMenuState,\n  updateTypesMenuState,\n  updateEditMenuState,\n  updateViewSettingsMenuState,\n  updateAnimationMenuState,\n} = menuSlice.actions;\nexport default menuSlice.reducer;\n","import { useEffect, useState } from \"react\";\nimport {\n  Slider,\n  Card,\n  Typography,\n  ListItem,\n  CardContent,\n  Button,\n  List,\n} from \"@mui/material\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateTypesMenuState } from \"../../../../redux/reducers/menuSlice\";\n\nexport default function TypesListMenu() {\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const landUseTypesList = cityIOdata.GEOGRID.properties.types;\n  const [selectedType, setSelectedType] = useState();\n  const [localTypesState, setLocalTypesState] = useState();\n  // handle selected type\n  const handleListItemClick = (typeProps, thisTypeName) => {\n    typeProps = { ...typeProps, thisTypeName: thisTypeName };\n    setSelectedType(typeProps);\n  };\n\n  useEffect(() => {\n    dispatch(\n      updateTypesMenuState({\n        SELECTED_TYPE: selectedType,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedType]);\n\n  // get the LBCS/NAICS types info\n  const LBCS = selectedType && selectedType.LBCS;\n  const NAICS = selectedType && selectedType.NAICS;\n  // get type description text if exist\n  let description =\n    selectedType && selectedType.description ? selectedType.description : null;\n\n  // create the types themselves\n  const createTypesIcons = (typesList) => {\n    let listMenuItemsArray = [];\n    Object.keys(typesList).forEach((thisType, index) => {\n      // get color\n      let col = typesList[thisType].color;\n\n      if (typeof col !== \"string\") {\n        col =\n          \"rgb(\" +\n          typesList[thisType].color[0] +\n          \",\" +\n          typesList[thisType].color[1] +\n          \",\" +\n          typesList[thisType].color[2] +\n          \")\";\n      }\n      // check if this type has height prop\n      listMenuItemsArray.push(\n        <div key={`li_types_top_div_${index}`}>\n          <ListItem key={`li_menu_${index}`}>\n            <Button\n              fullWidth\n              size=\"small\"\n              key={Math.random()}\n              variant=\"outlined\"\n              sx={{\n                \"&.MuiButton-text\": { color: { col } },\n                border: \"solid 1px \" + col,\n              }}\n              onClick={() => handleListItemClick(typesList[thisType], thisType)}\n            >\n              <Typography color={col} variant=\"caption\">\n                {thisType}\n              </Typography>\n            </Button>\n          </ListItem>\n\n          {selectedType && selectedType.thisTypeName === thisType && (\n            <ListItem key={`li_types_${index}`}>\n              <Card\n                variant=\"outlined\"\n                key={`li_types_card_${index}`}\n                sx={{ width: \"100%\" }}\n              >\n                <CardContent>\n                  {description && (\n                    <Typography variant=\"caption\">{description}</Typography>\n                  )}\n\n                  {selectedType &&\n                    selectedType.thisTypeName &&\n                    selectedType.height && (\n                      <div key={`li_types_div_${index}`}>\n                        <Typography>Set Height</Typography>\n\n                        <Slider\n                          key={`li_types_slider_${selectedType.thisTypeName}`}\n                          valueLabelDisplay=\"auto\"\n                          size=\"small\"\n                          // on change update the local state\n                          onChange={(e, val) =>\n                            setLocalTypesState((localTypesState) => {\n                              const update = { ...localTypesState };\n                              const newHeight = [\n                                selectedType.height[0],\n                                val,\n                                selectedType.height[2],\n                              ];\n                              Object.assign(update, { height: newHeight });\n                              return update;\n                            })\n                          }\n                          // on change committed update the redux state\n                          onChangeCommitted={(e, val) => {\n                            setSelectedType({\n                              ...selectedType,\n                              height: [\n                                selectedType.height[0],\n                                val,\n                                selectedType.height[2],\n                              ],\n                            });\n                          }}\n                          min={selectedType.height[0]}\n                          value={\n                            localTypesState &&\n                            localTypesState[selectedType] &&\n                            localTypesState[selectedType].height[1]\n                          }\n                          max={selectedType.height[2]}\n                        />\n                      </div>\n                    )}\n                  {LBCS && (\n                    <div>\n                      <Typography>LBCS</Typography>\n                      <Typography variant=\"caption\">\n                        {JSON.stringify(LBCS, null, \"\\t\")}\n                      </Typography>\n                    </div>\n                  )}\n                  {NAICS && (\n                    <div>\n                      <Typography>NAICS</Typography>\n                      <Typography variant=\"caption\">\n                        {JSON.stringify(NAICS, null, \"\\t\")}\n                      </Typography>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </ListItem>\n          )}\n        </div>\n      );\n    });\n\n    return (\n      <List\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          maxHeight: 400,\n          overflow: \"hidden\",\n          overflowY: \"scroll\",\n        }}\n      >\n        {listMenuItemsArray}\n      </List>\n    );\n  };\n\n  return <>{createTypesIcons(landUseTypesList)}</>;\n}\n","import {\n  Slider,\n  Checkbox,\n  Typography,\n  FormControlLabel,\n  Grid,\n} from \"@mui/material\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { expectedLayers } from \"../../../../settings/settings\";\nimport { updateLayersMenuState } from \"../../../../redux/reducers/menuSlice\";\n\nfunction LayersMenu() {\n  const dispatch = useDispatch();\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n\n  // get the keys from cityIOdata\n  const cityIOkeys = Object.keys(cityIOdata);\n\n  // initial layer menu state\n  let initState = {};\n  const [layersMenuState, setLayersMenuState] = useState(() => {\n    for (const menuItem in expectedLayers) {\n      initState[menuItem] = {\n        isOn: expectedLayers[menuItem].initState,\n        slider: expectedLayers[menuItem].initSliderValue,\n      };\n    }\n    return initState;\n  });\n\n  useEffect(() => {\n    dispatch(updateLayersMenuState(layersMenuState));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [layersMenuState]);\n\n  // update the layer slider value\n  const [sliderVal, setSliderVal] = useState({});\n  const updateSliderVal = (menuItem, val) => {\n    setSliderVal({ ...sliderVal, [menuItem]: val });\n\n    setLayersMenuState({\n      ...layersMenuState,\n      [menuItem]: {\n        ...layersMenuState[menuItem],\n        slider: val,\n      },\n    });\n  };\n\n  const toggleListArr = [];\n  const makeLayerControlsMenu = () => {\n    // loop through the keys in cityIOdata and make a list of keys\n    for (const menuItem in expectedLayers) {\n      const moduleName = expectedLayers[menuItem].cityIOmoduleName;\n      // if the module name is in the data for this CS instance, make a checkbox\n      if (cityIOkeys.includes(moduleName)) {\n        toggleListArr.push(\n          <Grid container key={`grid_con_` + menuItem}>\n            <Grid item xs={4} key={`grid_i_1_` + menuItem}>\n              <FormControlLabel\n                key={\"formControl_\" + menuItem}\n                control={\n                  <Checkbox\n                    checked={\n                      layersMenuState[menuItem] &&\n                      layersMenuState[menuItem].isOn\n                    }\n                    key={\"checkbox_\" + menuItem}\n                    color=\"primary\"\n                    onChange={(e) => {\n                      setLayersMenuState({\n                        ...layersMenuState,\n                        [menuItem]: {\n                          ...layersMenuState[menuItem],\n                          isOn: e.target.checked,\n                        },\n                      });\n                    }}\n                  />\n                }\n                label={\n                  <Typography variant=\"caption\" key={\"label_\" + menuItem}>\n                    {expectedLayers[menuItem].displayName}\n                  </Typography>\n                }\n              />\n            </Grid>\n            {layersMenuState[menuItem] && layersMenuState[menuItem].isOn && (\n              <Grid item xs={8} key={`grid_i_2_` + menuItem}>\n                <Slider\n                  size=\"small\"\n                  key={\"slider_\" + menuItem}\n                  valueLabelDisplay=\"auto\"\n                  onChangeCommitted={(_, val) => updateSliderVal(menuItem, val)}\n                />\n              </Grid>\n            )}\n          </Grid>\n        );\n      }\n    }\n    return toggleListArr;\n  };\n\n  return <Grid container>{makeLayerControlsMenu()}</Grid>;\n}\n\nexport default LayersMenu;\n","import { useLayoutEffect, useState } from \"react\";\nimport {\n  ButtonGroup,\n  Button,\n  Typography,\n  Slider,\n  Checkbox,\n  List,\n  ListItem,\n} from \"@mui/material\";\nimport {\n  viewControlCheckboxes,\n  viewControlButtons,\n} from \"../../../../settings/settings\";\nimport { updateViewSettingsMenuState } from \"../../../../redux/reducers/menuSlice\";\nimport { useDispatch } from \"react-redux\";\n\nfunction ViewSettingsMenu() {\n  const dispatch = useDispatch();\n\n  const [viewSettingsMenuState, setViewSettingsMenuState] = useState(() => {\n    let initState = {};\n    for (const menuItem in viewControlCheckboxes) {\n      initState[menuItem] = {\n        isOn: viewControlCheckboxes[menuItem].initState,\n        slider:\n          viewControlCheckboxes[menuItem].initSliderValue &&\n          viewControlCheckboxes[menuItem].initSliderValue,\n      };\n    }\n    return initState;\n  });\n\n  // return the menu state to parent component\n  useLayoutEffect(() => {\n    //  dispatch this menu state to the redux store\n    dispatch(updateViewSettingsMenuState(viewSettingsMenuState));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewSettingsMenuState]);\n\n  const [sliderVal, setSliderVal] = useState({});\n  const updateSliderVal = (menuItem, val) => {\n    setSliderVal({ ...sliderVal, [menuItem]: val });\n\n    setViewSettingsMenuState({\n      ...viewSettingsMenuState,\n      [menuItem]: {\n        ...viewSettingsMenuState[menuItem],\n        slider: val,\n      },\n    });\n  };\n\n  const handleButtonClicks = (thisButton) => {\n    setViewSettingsMenuState({\n      ...viewSettingsMenuState,\n      VIEW_CONTROL_BUTTONS: thisButton,\n    });\n  };\n\n  // create a button group for the view control buttons\n  const createViewControlButtons = (viewControlButtons) => {\n    const buttonsArr = [];\n    for (const thisButton in viewControlButtons) {\n      buttonsArr.push(\n        <Button\n          key={Math.random()}\n          size=\"small\"\n          onClick={() => handleButtonClicks(thisButton)}\n        >\n          {viewControlButtons[thisButton].displayName}\n        </Button>\n      );\n    }\n    return <ButtonGroup color=\"primary\">{buttonsArr}</ButtonGroup>;\n  };\n\n  const createCheckboxes = (menuItemList) => {\n    const toggleListArr = [];\n    for (const menuItem in menuItemList) {\n      // check if we add slider to this menuItem\n      const hasSlider = menuItemList[menuItem].initSliderValue;\n\n      toggleListArr.push(\n        <div key={\"viewSettingDiv_\" + menuItem}>\n          <ListItem key={\"viewSettingListItem_\" + menuItem}>\n            <Checkbox\n              key={\"viewSettingCheckBox_\" + menuItem}\n              checked={\n                viewSettingsMenuState[menuItem] &&\n                viewSettingsMenuState[menuItem].isOn\n              }\n              name={menuItem}\n              onChange={(e) =>\n                setViewSettingsMenuState({\n                  ...viewSettingsMenuState,\n                  [menuItem]: {\n                    ...viewSettingsMenuState[menuItem],\n                    isOn: e.target.checked,\n                  },\n                })\n              }\n            />\n\n            <Typography\n              variant={\"caption\"}\n              key={\"viewSettingCaption_\" + menuItem}\n            >\n              {menuItemList[menuItem].displayName}\n            </Typography>\n          </ListItem>\n          {hasSlider &&\n            viewSettingsMenuState[menuItem] &&\n            viewSettingsMenuState[menuItem].isOn && (\n              <ListItem key={\"viewSettingListItemSlider_\" + menuItem}>\n                <Slider\n                  size=\"small\"\n                  key={\"viewSettingSlider_\" + menuItem}\n                  valueLabelDisplay=\"auto\"\n                  onChangeCommitted={(_, val) => updateSliderVal(menuItem, val)}\n                />\n              </ListItem>\n            )}\n        </div>\n      );\n    }\n    return toggleListArr;\n  };\n\n  return (\n    <List>\n      {createViewControlButtons(viewControlButtons)}\n      {createCheckboxes(viewControlCheckboxes)}\n    </List>\n  );\n}\n\nexport default ViewSettingsMenu;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Typography,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  ListItem,\n  Button,\n  List,\n  Dialog,\n  IconButton,\n  Tooltip,\n  Badge,\n  Grid,\n  TextField,\n} from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { postToCityIO, getModule, getTableID } from \"../../../../utils/utils\";\n\nexport default function ScenariosMenu() {\n  const [scenariosButtonsList, setScenariosButtonsList] = useState([]);\n  const [scenarioToRestore, setScenariosToRestore] = useState();\n  const [saveDialogState, setSaveDialogState] = useState(false);\n  const [loadDialogState, setLoadDialogState] = useState(false);\n  const [scenarioTextInput, setScenarioTextInput] = useState({\n    name: \"\",\n    description: \"\",\n  });\n  // get cityIO data from redux store\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  // get cityio name from redux store\n  const cityIOtableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  const handleSaveThisState = () => {\n    handleClose();\n    getTableID(cityIOtableName).then((id) => {\n      const newScenario = {\n        // ! to be updated from dynamic ui element\n        name: scenarioTextInput.name || `${id}`,\n        hash: id,\n        description:\n          scenarioTextInput.description || `no description for ${id} yet.`,\n      };\n      const tempArr = cityIOdata.scenarios ? [...cityIOdata.scenarios] : [];\n      tempArr.push(newScenario);\n      postToCityIO(tempArr, cityIOtableName, `/scenarios/`);\n    });\n  };\n\n  const handleClose = () => {\n    setLoadDialogState(false);\n    setSaveDialogState(false);\n  };\n\n  const handleOpenDialog = (scenario) => {\n    // store to state the scenario to be restored\n    setScenariosToRestore(scenario);\n    // open dialog\n    setLoadDialogState(true);\n  };\n\n  const handleRestoreThisState = async () => {\n    if (!scenarioToRestore) return;\n    await getModule(scenarioToRestore.hash)\n      .then((module) => {\n        postToCityIO(module, cityIOtableName, `/GEOGRIDDATA/`);\n      })\n      .finally(() => {\n        handleClose();\n      });\n  };\n\n  const handleDeleteThisState = (scenario) => {\n    // copy the scenarios array\n    const tempArr = [...cityIOdata.scenarios];\n    // find the clicked scenario in the array\n    var scnToDelete = tempArr.filter((obj) => {\n      return obj.hash === scenario.hash;\n    });\n    // find the index of the scenario to delete\n    var index = tempArr.indexOf(scnToDelete[0]);\n    if (index !== -1) {\n      // remove the scenario from the array\n      tempArr.splice(index, 1);\n    }\n    // post the new array to the server\n    postToCityIO(tempArr, cityIOtableName, `/scenarios/`);\n  };\n\n  const createScenariosButtons = () => {\n    const scenariosButtons = cityIOdata.scenarios.map((scenario, i) => {\n      return (\n        <ListItem key={`scenario_grid_item_${i}`}>\n          <Tooltip\n            key={\"scenario_tt_\" + i}\n            arrow\n            placement=\"right\"\n            title={scenario.description || `No description`}\n          >\n            <Button\n              key={\"scenario_button_\" + i}\n              fullWidth\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={() => handleOpenDialog(scenario)}\n            >\n              <List>\n                <ListItem>\n                  <Typography>\n                    {scenario.name.substring(0, 12) + `...`}\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"caption\">\n                    {scenario.description.substring(0, 20) + `...`}\n                  </Typography>\n                </ListItem>\n              </List>\n            </Button>\n          </Tooltip>\n\n          <IconButton\n            key={\"scenario_ib_\" + i}\n            onClick={(e) => {\n              handleDeleteThisState(scenario);\n            }}\n            aria-label=\"delete\"\n            size=\"small\"\n          >\n            <DeleteIcon\n              color=\"primary\"\n              key={\"scenario_delicon_\" + i}\n              fontSize=\"inherit\"\n            />\n          </IconButton>\n        </ListItem>\n      );\n    });\n    return scenariosButtons;\n  };\n\n  useEffect(() => {\n    // check if there are any scenarios in the cityIOdata\n    if (!cityIOdata.scenarios) return;\n    const scenariosButtons = createScenariosButtons();\n    setScenariosButtonsList(scenariosButtons);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  return (\n    <Grid sx={{ flexGrow: 1 }} container>\n      <Badge\n        sx={{ width: \"100%\" }}\n        badgeContent={\n          (cityIOdata.scenarios && cityIOdata.scenarios.length) || 0\n        }\n        color=\"primary\"\n      >\n        <Button\n          fullWidth={true}\n          key={\"save_state_button\"}\n          variant=\"outlined\"\n          onClick={() => setSaveDialogState(true)}\n        >\n          <Typography>Save This Scenario</Typography>\n        </Button>\n      </Badge>\n\n      <List>{scenariosButtonsList}</List>\n\n      <Dialog open={saveDialogState} onClose={handleClose}>\n        <DialogTitle id=\"save-dialog-title\">{\"Save this Scenario\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Give your scenario a name and a description to help you remember\n            what it is about.\n          </DialogContentText>\n          <List>\n            <ListItem>\n              <TextField\n                id=\"name-basic\"\n                label=\"Scenario Name\"\n                variant=\"outlined\"\n                fullWidth\n                onChange={(e) =>\n                  setScenarioTextInput({\n                    ...scenarioTextInput,\n                    name: e.target.value,\n                  })\n                }\n              />\n            </ListItem>\n            <ListItem>\n              <TextField\n                id=\"desc-basic\"\n                label=\"Description (optional)\"\n                fullWidth\n                variant=\"outlined\"\n                onChange={(e) =>\n                  setScenarioTextInput({\n                    ...scenarioTextInput,\n                    description: e.target.value,\n                  })\n                }\n              />\n            </ListItem>\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleSaveThisState} autoFocus>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={loadDialogState} onClose={handleClose}>\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Revert to saved scenario?\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            You can revert to this saved scenario by clicking the button below.\n            Reverting will delete all changes made since the last commit.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleRestoreThisState} autoFocus>\n            Revert\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Grid>\n  );\n}\n","import { useState, useCallback } from \"react\";\nimport { Drawer, Box } from \"@mui/material\";\n\nconst dividerWidth = 5;\nconst maxDrawerWidth =\n  Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0) -\n  1;\n\n \nconst minDrawerWidth = 50;\n\nexport default function ResizableDrawer({ children, direction, width }) {\n  const defaultDrawerWidth = Math.floor(maxDrawerWidth / 4);\n  const [drawerWidth, setDrawerWidth] = useState(width || defaultDrawerWidth);\n\n  const handleMouseDown = (e) => {\n    document.addEventListener(\"mouseup\", handleMouseUp, true);\n    document.addEventListener(\"mousemove\", handleMouseMove, true);\n  };\n\n  const handleMouseUp = () => {\n    document.removeEventListener(\"mouseup\", handleMouseUp, true);\n    document.removeEventListener(\"mousemove\", handleMouseMove, true);\n  };\n\n  const handleMouseMove = useCallback((e) => {\n    let newWidth = null;\n\n    if (direction === \"right\") {\n      newWidth =\n        document.body.offsetLeft + document.body.offsetWidth - e.clientX + 20;\n    } else {\n      newWidth = document.body.offsetLeft + e.clientX + 20;\n    }\n    if (newWidth > minDrawerWidth && newWidth < maxDrawerWidth) {\n      setDrawerWidth(newWidth);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <Box\n        onMouseDown={(e) => handleMouseDown(e)}\n        sx={{\n          width: `${dividerWidth}px`,\n          padding: dividerWidth + \"px 0 0\",\n          position: \"fixed\",\n          height: \"1000vh\",\n          left:\n            direction === \"left\"\n              ? drawerWidth + \"px\"\n              : undefined,\n          right: direction === \"right\" ? drawerWidth + \"px\" : undefined,\n          zIndex: 1,\n          cursor: \"ew-resize\",\n          backgroundColor: \"gray\",\n        }}\n      />\n      <Drawer\n        anchor={direction}\n        open={true}\n        variant=\"persistent\"\n        ModalProps={{\n          keepMounted: true,\n        }}\n        PaperProps={{ style: { width: drawerWidth } }}\n        sx={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        {children}\n      </Drawer>\n    </>\n  );\n}\n","import { Button, Typography } from \"@mui/material\";\nimport { updateEditMenuState } from \"../../../../redux/reducers/menuSlice\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function EditMenu() {\n  const dispatch = useDispatch();\n  const [editMenu, setEditMenu] = useState({ EDIT_BUTTON: false });\n\n  // controls the menu state for the edit button\n  const handleEditButtonClicks = (event) => {\n    setEditMenu({\n      ...editMenu,\n      [event.currentTarget.id]: !editMenu[event.currentTarget.id],\n    });\n  };\n\n  useEffect(() => {\n    // dispatch the edit menu state to the redux store\n    dispatch(updateEditMenuState(editMenu));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editMenu]);\n\n  return (\n    <Button\n      fullWidth\n      id={\"EDIT_BUTTON\"}\n      variant=\"outlined\"\n      endIcon={editMenu.EDIT_BUTTON ? <CloudUploadIcon /> : <EditIcon />}\n      onClick={(e) => handleEditButtonClicks(e)}\n    >\n      <Typography>\n        {editMenu.EDIT_BUTTON ? \"submit edits\" : \"start editing\"}\n      </Typography>\n    </Button>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { Typography } from \"@mui/material\";\n\nfunction TableInfo() {\n  const cityIOtableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      <Typography gutterBottom>CityScope</Typography>\n      <Typography variant=\"h3\">{cityIOtableName}</Typography>\n    </>\n  );\n}\n\nexport default TableInfo;\n","import { List, ListItem, CardContent, Card } from \"@mui/material\";\nimport TypesMenu from \"./TypesMenu\";\nimport LayersMenu from \"./LayersMenu\";\nimport ViewSettingsMenu from \"./ViewSettingsMenu\";\nimport ScenariosMenu from \"./ScenariosMenu\";\nimport ResizableDrawer from \"../../../Components/ResizableDrawer\";\nimport EditMenu from \"./EditMenu\";\nimport TableInfo from \"./TableInfo\";\n\nfunction MenuContainer() {\n  const menuItemsArray = [\n    <TableInfo />,\n    <EditMenu />,\n    <TypesMenu />,\n    <ScenariosMenu />,\n    <LayersMenu />,\n    <ViewSettingsMenu />,\n  ];\n\n  const MenuItems = () => {\n    const m = [];\n\n    menuItemsArray.forEach((item, index) => {\n      m.push(\n        <ListItem key={index}>\n          <Card variant=\"outlined\" sx={{ width: \"100%\" }}>\n            <CardContent>{item}</CardContent>\n          </Card>\n        </ListItem>\n      );\n    });\n    return m;\n  };\n\n  return (\n    <ResizableDrawer direction=\"left\" width={300}>\n      <List>\n        <MenuItems />\n      </List>\n    </ResizableDrawer>\n  );\n}\n\nexport default MenuContainer;\n","import { testHex, hexToRgb } from \"../../../../../utils/utils\";\nimport ErrorOutlineIcon from \"@mui/icons-material/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \": Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 10,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n                fontFamily: \"Roboto Mono\",\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}\n            </div>\n        </div>\n    );\n};\n","import { Typography } from \"@mui/material\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n  if (!props.mousePos) return null;\n  const mousePos = props.mousePos;\n  const hoveredObj = props.hoveredObj;\n\n  return (\n    <div\n      style={{\n        borderRadius: \"10%\",\n        position: \"fixed\",\n        pointerEvents: \"none\",\n        backgroundColor: \"rgba(0,0,0,0.5)\",\n        padding: \"1vw\",\n        color: \"rgba(255,255,255,0.9)\",\n        zIndex: 10,\n        left: mousePos.clientX,\n        top: mousePos.clientY,\n        //\n      }}\n    >\n      <Typography>Type: {hoveredObj.object.properties.name}</Typography>\n      <Typography>Height: {hoveredObj.object.properties.height}</Typography>\n      <Typography>ID: {hoveredObj.object.properties.id}</Typography>\n    </div>\n  );\n};\n","import { PaintBrush } from \"./PaintBrush\";\nimport { CellMeta } from \"../CellMeta\";\n\nexport default function PaintBrushContainer({\n  editOn,\n  mousePos,\n  selectedType,\n  pickingRadius,\n  mouseDown,\n  hoveredObj,\n}) {\n  const BrushSelector = () => {\n    if (\n      editOn &&\n      selectedType &&\n      Object.keys(selectedType).length &&\n      hoveredObj\n    ) {\n      return (\n        <PaintBrush\n          mousePos={mousePos}\n          selectedType={selectedType}\n          divSize={pickingRadius}\n          mouseDown={mouseDown}\n          hoveredCells={hoveredObj}\n        />\n      );\n    } else if (hoveredObj) {\n      return <CellMeta mousePos={mousePos} hoveredObj={hoveredObj} />;\n    } else {\n      return null;\n    }\n  };\n  return <BrushSelector />;\n}\n","import { HeatmapLayer } from \"deck.gl\";\n\nexport default function AccessLayer({ data, opacity }) {\n  const accessData = data.access && data.access.features;\n  const colors = [\n    [233, 62, 58],\n    [237, 104, 60],\n    [243, 144, 63],\n    [253, 199, 12],\n    [255, 243, 59],\n  ];\n  return new HeatmapLayer({\n    id: \"ACCESS\",\n    colorRange: colors,\n    // intensity:  opacity,\n    threshold: 0.5,\n    data: accessData && accessData,\n    getPosition: (d) => d.geometry.coordinates,\n    getWeight: (d) =>\n      d.properties[Math.floor(opacity * 100) % data.access.properties.length],\n    updateTriggers: {\n      getWeight: opacity,\n    },\n  });\n}\n","import { PathLayer } from \"@deck.gl/layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nexport default function AggregatedTripsLayer({ data, ABMmode, opacity }) {\n  if (data.ABM2) {\n    return new PathLayer({\n      id: \"AGGREGATED_TRIPS\",\n      shadowEnabled: false,\n      data: data.ABM2.trips,\n      getPath: (d) => d.path,\n      getColor: (d) => hexToRgb(data.ABM2.attr.mode[d.mode].color),\n\n      opacity,\n      getWidth: 5,\n\n      updateTriggers: {\n        getColor: ABMmode,\n      },\n      transitions: {\n        getColor: 500,\n      },\n    });\n  }\n}\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\n//  * remap line width\nconst _remapValues = (value) => {\n  let remap = value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n  return remap;\n};\n\nexport default function ABMLayer({ data, ABMmode, zoomLevel, time, opacity }) {\n  if (data.ABM2) {\n    return new TripsLayer({\n      opacity,\n      id: \"ABM\",\n      data: data.ABM2.trips,\n      getPath: (d) => d.path,\n      getTimestamps: (d) => d.timestamps,\n      getColor: (d) => hexToRgb(data.ABM2.attr.mode[d.mode].color),\n      shadowEnabled: false,\n      getWidth: 1,\n      widthScale: _remapValues(zoomLevel),\n      trailLength: 500,\n      currentTime: time,\n\n      updateTriggers: {\n        getColor: ABMmode,\n      },\n      transitions: {\n        getColor: 500,\n      },\n    });\n  }\n}\n","import { GeoJsonLayer } from \"deck.gl\";\nimport { hexToRgb, testHex } from \"../../../../utils/utils\";\n\n/**\n * Description. uses deck api to\n * collect objects in a region\n * @argument{object} e  picking event\n */\nexport const multipleObjPicked = (e, pickingRadius, deckGLRef) => {\n  const dim = pickingRadius;\n  const x = e.x - dim / 2;\n  const y = e.y - dim / 2;\n  let multipleObj = deckGLRef.current.pickObjects({\n    x: x,\n    y: y,\n    width: dim,\n    height: dim,\n  });\n  return multipleObj;\n};\n\n/**\n * Description. allow only to pick cells that are\n *  not of CityScope TUI & that are interactable\n * so to not overlap TUI activity\n */\nconst handleGridCellEditing = (\n  e,\n  selectedType,\n  setSelectedCellsState,\n  pickingRadius,\n  deckGLRef\n) => {\n  const { height, color, name } = selectedType;\n  const multiSelectedObj = multipleObjPicked(e, pickingRadius, deckGLRef);\n  multiSelectedObj.forEach((selected) => {\n    const thisCellProps = selected.object.properties;\n    if (thisCellProps && thisCellProps.interactive) {\n      thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n      thisCellProps.height = height;\n      thisCellProps.name = name;\n    }\n  });\n  setSelectedCellsState(multiSelectedObj);\n};\n\n/**\n * Description. gets `props` with geojson\n * and process the interactive area\n */\nexport const processGridData = (cityIOdata) => {\n  //  get the static grid\n  const GEOGRID = cityIOdata.GEOGRID;\n  // create a copy of the GEOGRID object\n  const newGEOGRID = JSON.parse(JSON.stringify(GEOGRID));\n\n  // if GEOGRRIDDATA exist and is the same length as our grid\n  if (\n    cityIOdata.GEOGRIDDATA &&\n    cityIOdata.GEOGRIDDATA.length === cityIOdata.GEOGRID.features.length\n  ) {\n    // get the grid data\n    const GEOGRIDDATA = cityIOdata.GEOGRIDDATA;\n    // update GEOGRID features from GEOGRIDDATA on cityio\n    for (let i = 0; i < GEOGRID.features.length; i++) {\n      newGEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n      // inject id with ES7 copy of the object\n      newGEOGRID.features[i].properties = {\n        ...newGEOGRID.features[i].properties,\n        id: i,\n      };\n    }\n  }\n  return newGEOGRID;\n};\n\nexport default function GridLayer({\n  data,\n  editOn,\n  state: {\n    selectedType,\n    keyDownState,\n    selectedCellsState,\n    pickingRadius,\n    opacity,\n  },\n  updaters: { setSelectedCellsState, setDraggingWhileEditing, setHoveredObj },\n  deckGLref,\n}) {\n  return new GeoJsonLayer({\n    opacity,\n    id: \"GRID\",\n    data,\n    pickable: true,\n    extruded: true,\n    wireframe: true,\n    lineWidthScale: 1,\n    lineWidthMinPixels: 2,\n    getElevation: (d) => d.properties.height[1],\n    getFillColor: (d) => d.properties.color,\n\n    onClick: (event) => {\n      if (selectedType && editOn && keyDownState !== \"Shift\")\n        handleGridCellEditing(\n          event,\n          selectedType,\n          setSelectedCellsState,\n          pickingRadius,\n          deckGLref\n        );\n    },\n\n    onDrag: (event) => {\n      if (selectedType && editOn && keyDownState !== \"Shift\")\n        handleGridCellEditing(\n          event,\n          selectedType,\n          setSelectedCellsState,\n          pickingRadius,\n          deckGLref\n        );\n    },\n\n    onDragStart: () => {\n      if (selectedType && editOn && keyDownState !== \"Shift\") {\n        setDraggingWhileEditing(true);\n      }\n    },\n\n    onHover: (e) => {\n      if (e.object) {\n        setHoveredObj(e);\n      }\n    },\n\n    onDragEnd: () => {\n      setDraggingWhileEditing(false);\n    },\n    updateTriggers: {\n      getFillColor: selectedCellsState,\n      getElevation: selectedCellsState,\n    },\n    transitions: {\n      getFillColor: 300,\n      getElevation: 300,\n    },\n  });\n}\n","import { TextLayer } from \"@deck.gl/layers\";\n\nexport default function TextualLayer({ data, coordinates, opacity }) {\n  if (!data || !data.text) return;\n  /*\n     * this layer takes textual layer procured by a 3rd party\n     * module, and renders a text message near the grid cell\n     * defined in the data id attribute.\n     *\n     * data format:\n      [\n      {\"id\": 0, \"info\": \"yes!\" },   {\"id\": 10, \"info\": \"I'm on ID 10!\" }\n      ]\n     *\n     * coordinates format:\n     [\n       {\"info\": \"yes!\", coordinates: [-122.466233, 37.684638]},\n     ]\n     */\n\n  let textLayerData = [];\n\n  data.text.forEach((infoIteam) => {\n    textLayerData.push({\n      coordinates: [\n        coordinates.features[infoIteam.id].geometry.coordinates[0][0][0],\n        coordinates.features[infoIteam.id].geometry.coordinates[0][0][1],\n        100,\n      ],\n      info: infoIteam.info,\n    });\n  });\n\n  return new TextLayer({\n    opacity,\n    id: \"text-layer\",\n    data: textLayerData,\n    pickable: true,\n    getPosition: (d) => d.coordinates,\n    getText: (d) => d.info,\n    getColor: [255, 255, 255],\n    getSize: 30,\n    getAngle: 0,\n    getTextAnchor: \"middle\",\n    getAlignmentBaseline: \"center\",\n  });\n}\n\n// new TextLayer({\n//   id: \"text\",\n//   data: cityIOdata.GEOGRID && cityIOdata.GEOGRID.features,\n//   getPosition: (d) => {\n//     const pntArr = d.geometry.coordinates[0];\n//     const first = pntArr[1];\n//     const last = pntArr[pntArr.length - 2];\n//     const center = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n//     return center;\n//   },\n\n//   getText: (d) => {\n//     var length = 10;\n//     return d.properties.name.length > length\n//       ? d.properties.name.substring(0, length - 3) + \"...\"\n//       : d.properties.name;\n//   },\n//   getColor: (d) => [0, 0, 0],\n//   getSize: 8,\n// }),\n","import { GeoJsonLayer } from \"@deck.gl/layers\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nexport default function GeojsonLayer({ data: cityIOdata, opacity }) {\n  if (cityIOdata.geojson) {\n    return new GeoJsonLayer({\n      id: \"GeojsonLayer\",\n      data: cityIOdata.geojson,\n      opacity: opacity,\n      pickable: true,\n      wireframe: false,\n      stroked: true,\n      filled: true,\n      extruded: true,\n      lineWidthScale: 1,\n      getFillColor: (d) => hexToRgb(d.properties.fill),\n      getLineColor: (d) => hexToRgb(d.properties.stroke),\n      lineWidthMinPixels: 2,\n      getElevation: (d) => d.properties.height,\n      updateTriggers: {\n        getFillColor: cityIOdata,\n        getElevation: cityIOdata,\n      },\n      transitions: {\n        getFillColor: 500,\n        getElevation: 500,\n      },\n    });\n  }\n}\n","import { SimpleMeshLayer } from \"@deck.gl/mesh-layers\";\nimport { OBJLoader } from \"@loaders.gl/obj\";\n\nexport default function MeshLayer({ data, opacity }) {\n  if (data && data.features) {\n    return new SimpleMeshLayer({\n      id: \"mesh-layer\",\n      data: data.features,\n      loaders: [OBJLoader],\n      mesh: \"./obj/model.obj\",\n      getPosition: (d) => {\n        const pntArr = d.geometry.coordinates[0];\n        const first = pntArr[1];\n        const last = pntArr[pntArr.length - 2];\n        const center = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n        return center;\n      },\n      getColor: (d) =>\n        // d.properties.color,\n        [255, 255, 255, 255],\n\n      getOrientation: (d) => [-180, Math.ceil(Math.random() * 4) * 90, -90],\n      getScale: (d) =>\n        d.properties.height > 0\n          ? [\n              data.properties.header.cellSize / 2,\n              opacity * d.properties.height ,\n              data.properties.header.cellSize / 2,\n            ]\n          : [0, 0, 0],\n      updateTriggers: {\n        getScale: opacity,\n      },\n    });\n  }\n}\n","import { useState, useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport PaintBrush from \"./components/PaintBrush\";\nimport { postToCityIO } from \"../../../utils/utils\";\nimport Map from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { mapSettings } from \"../../../settings/settings\";\nimport {\n  AccessLayer,\n  AggregatedTripsLayer,\n  ABMLayer,\n  GridLayer,\n  TextualLayer,\n  GeojsonLayer,\n  MeshLayer,\n} from \"./deckglLayers\";\nimport { processGridData } from \"./deckglLayers/GridLayer\";\n\nexport default function DeckGLMap() {\n  // get cityio data from redux store\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  // get menu state from redux store\n  const menuState = useSelector((state) => state.menuState);\n  const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n  const [selectedCellsState, setSelectedCellsState] = useState();\n  const [viewState, setViewState] = useState(mapSettings.map.initialViewState);\n  const [keyDownState, setKeyDownState] = useState();\n  const [mousePos, setMousePos] = useState();\n  const [mouseDown, setMouseDown] = useState();\n  const [hoveredObj, setHoveredObj] = useState();\n  const [GEOGRIDDATA, setGEOGRIDDATA] = useState();\n  const deckGLref = useRef();\n  const pickingRadius = 40;\n  const editModeToggle = menuState.editMenuState.EDIT_BUTTON;\n  const selectedType = menuState.typesMenuState.SELECTED_TYPE;\n  const layersMenu = menuState.layersMenuState;\n  const viewControlButton =\n    menuState.viewSettingsMenuState.VIEW_CONTROL_BUTTONS;\n\n  // ! constant animation speed for now - will be updated with slider\n\n  const toggleAnimationState =\n    menuState.viewSettingsMenuState.ANIMATION_CHECKBOX;\n  const toggleRotateCamera = menuState.viewSettingsMenuState.ROTATE_CHECKBOX;\n\n  const [animationTime, setAnimationTime] = useState(0);\n  const [animation] = useState({});\n  const animate = () => {\n    if (toggleAnimationState && toggleAnimationState.isOn) {\n      // use variable outside of closure to allow toggle\n      setAnimationTime((t) => {\n        return t > mapSettings.map.layers.ABM.endTime\n          ? mapSettings.map.layers.ABM.startTime\n          : t + toggleAnimationState.slider;\n      });\n      animation.id = window.requestAnimationFrame(animate); // draw next frame\n    }\n  };\n  // ! self executing function to toggle animation state\n  (function () {\n    if (toggleAnimationState && !toggleAnimationState.isOn) {\n      window.cancelAnimationFrame(animation.id);\n      return;\n    }\n  })();\n\n  useEffect(() => {\n    animation.id = window.requestAnimationFrame(animate); // start animation\n    return () => {\n      window.cancelAnimationFrame(animation.id);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toggleAnimationState]);\n\n  // toggle camera rotation on and off\n  useEffect(() => {\n    if (toggleRotateCamera && toggleRotateCamera.isOn) {\n      let bearing = viewState.bearing || 0;\n      bearing < 360\n        ? (bearing += (animationTime / 100000000) * toggleRotateCamera.slider)\n        : (bearing = 0);\n      setViewState({\n        ...viewState,\n        bearing: bearing,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toggleRotateCamera, animationTime]);\n\n  // **\n  //  * resets the camera viewport\n  //  * to cityIO header data\n  //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n  //  *\n  const setViewStateToTableHeader = (viewControlButton) => {\n    const lastCell =\n      cityIOdata.GEOGRID.features[cityIOdata.GEOGRID.features.length - 1]\n        .geometry.coordinates[0][0];\n    const firstCell = cityIOdata.GEOGRID.features[0].geometry.coordinates[0][0];\n    const midGrid = [\n      (firstCell[0] + lastCell[0]) / 2,\n      (firstCell[1] + lastCell[1]) / 2,\n    ];\n\n    const header = cityIOdata.GEOGRID.properties.header;\n\n    setViewState({\n      ...viewState,\n      longitude: midGrid[0],\n      latitude: midGrid[1],\n      zoom: viewControlButton === \"RESET_VIEW_BUTTON\" ? 15 : viewState.zoom,\n      pitch: viewControlButton === \"RESET_VIEW_BUTTON\" ? 0 : 45,\n      bearing:\n        viewControlButton === \"NORTH_VIEW_BUTTON\" ? 0 : 360 - header.rotation,\n      orthographic: viewControlButton === \"ORTHO_VIEW_BUTTON\" ? true : false,\n    });\n  };\n\n  useEffect(() => {\n    setViewStateToTableHeader(viewControlButton);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewControlButton]);\n\n  // fix deck view rotate\n  useEffect(() => {\n    document\n      // ! a more aggressive method which prevents all right click context menu\n      // .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // zoom map on CS table location\n    setViewStateToTableHeader();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // update the grid layer with every change to GEOGRIDDATA\n  useEffect(() => {\n    setGEOGRIDDATA(processGridData(cityIOdata));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata.GEOGRIDDATA]);\n\n  // post GEOGRIDDATA changes to cityIO\n  useEffect(() => {\n    if (!editModeToggle && GEOGRIDDATA) {\n      let dataProps = [];\n      for (let i = 0; i < GEOGRIDDATA.features.length; i++) {\n        dataProps[i] = GEOGRIDDATA.features[i].properties;\n      }\n      postToCityIO(dataProps, cityIOdata.tableName, \"/GEOGRIDDATA/\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editModeToggle]);\n\n  const onViewStateChange = ({ viewState }) => {\n    viewState.orthographic =\n      viewControlButton === \"ORTHO_VIEW_BUTTON\" ? true : false;\n    setViewState(viewState);\n  };\n\n  const layersKey = {\n    ABM: ABMLayer({\n      data: cityIOdata,\n      ABMmode: 0,\n      zoomLevel: viewState.zoom,\n      time: animationTime,\n      opacity:\n        layersMenu &&\n        layersMenu.ABM_LAYER_CHECKBOX &&\n        layersMenu.ABM_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    AGGREGATED_TRIPS: AggregatedTripsLayer({\n      data: cityIOdata,\n      ABMmode: 0,\n      opacity:\n        layersMenu &&\n        layersMenu.AGGREGATED_TRIPS_LAYER_CHECKBOX &&\n        layersMenu.AGGREGATED_TRIPS_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    GRID: GridLayer({\n      data: GEOGRIDDATA,\n      editOn: editModeToggle,\n      state: {\n        selectedType,\n        keyDownState,\n        selectedCellsState,\n        pickingRadius,\n        opacity:\n          layersMenu &&\n          layersMenu.GRID_LAYER_CHECKBOX &&\n          layersMenu.GRID_LAYER_CHECKBOX.slider * 0.01,\n      },\n      updaters: {\n        setSelectedCellsState,\n        setDraggingWhileEditing,\n        setHoveredObj,\n      },\n      deckGLref,\n    }),\n\n    ACCESS: AccessLayer({\n      data: cityIOdata,\n      opacity:\n        layersMenu &&\n        layersMenu.ACCESS_LAYER_CHECKBOX &&\n        layersMenu.ACCESS_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    TEXTUAL: TextualLayer({\n      data: cityIOdata,\n      coordinates: GEOGRIDDATA && GEOGRIDDATA,\n      opacity:\n        layersMenu &&\n        layersMenu.TEXTUAL_LAYER_CHECKBOX &&\n        layersMenu.TEXTUAL_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    GEOJSON: GeojsonLayer({\n      data: cityIOdata,\n      opacity:\n        layersMenu &&\n        layersMenu.GEOJSON_LAYER_CHECKBOX &&\n        layersMenu.GEOJSON_LAYER_CHECKBOX.slider * 0.01,\n    }),\n\n    MESH: MeshLayer({\n      data: GEOGRIDDATA,\n      opacity:\n        layersMenu &&\n        layersMenu.MESH_LAYER_CHECKBOX &&\n        layersMenu.MESH_LAYER_CHECKBOX.slider * 0.01,\n    }),\n  };\n\n  const layerOrder = [\n    \"GRID\",\n    \"TEXTUAL\",\n    \"MESH\",\n    \"GEOJSON\",\n    \"ACCESS\",\n    \"AGGREGATED_TRIPS\",\n    \"ABM\",\n  ];\n\n  const renderDeckLayers = () => {\n    let layers = [];\n    for (var layerNameString of layerOrder) {\n      // toggle layers on and off\n      if (\n        layersMenu &&\n        layersMenu[layerNameString + \"_LAYER_CHECKBOX\"] &&\n        layersMenu[layerNameString + \"_LAYER_CHECKBOX\"].isOn\n      ) {\n        layers.push(layersKey[layerNameString]);\n      }\n    }\n    return layers;\n  };\n\n  return (\n    <>\n      <div\n        onKeyDown={(e) => {\n          setKeyDownState(e.nativeEvent.key);\n        }}\n        onKeyUp={() => setKeyDownState(null)}\n        onMouseMove={(e) => setMousePos(e.nativeEvent)}\n        onMouseUp={() => setMouseDown(false)}\n        onMouseDown={() => setMouseDown(true)}\n      >\n        <PaintBrush\n          editOn={editModeToggle}\n          mousePos={mousePos}\n          selectedType={selectedType}\n          pickingRadius={pickingRadius}\n          mouseDown={mouseDown}\n          hoveredObj={hoveredObj}\n        />\n\n        <DeckGL\n          ref={deckGLref}\n          viewState={viewState}\n          onViewStateChange={onViewStateChange}\n          layers={renderDeckLayers()}\n          controller={{\n            touchZoom: true,\n            touchRotate: true,\n            dragPan: !draggingWhileEditing,\n            dragRotate: !draggingWhileEditing,\n            keyboard: false,\n          }}\n        >\n          <Map\n            asyncRender={false}\n            dragRotate={true}\n            reuseMaps={true}\n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n            mapStyle={mapSettings.map.mapStyle.sat}\n            preventStyleDiffing={true}\n          />\n        </DeckGL>\n      </div>\n    </>\n  );\n}\n","import {\n  Chart as ChartJS,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Radar } from \"react-chartjs-2\";\nimport { useSelector } from \"react-redux\";\nimport { useState, useEffect } from \"react\";\n\nconst options = {\n  scales: {\n    r: {\n      angleLines: {\n        color: \"#696969\",\n      },\n      suggestedMin: 0,\n            suggestedMax: 1,\n      grid: {\n        color: \"#696969\",\n        circular: true,\n      },\n      pointLabels: {\n        color: \"#C0C0C0\",\n      },\n      ticks: {\n        color: \"#696969\",\n      },\n    },\n  },\n};\n\nconst optionsNoData = {\n  scales: {\n    r: {\n      angleLines: {\n        color: \"#363636\",\n      },\n      grid: {\n        color: \"#363636\",\n        circular: true,\n      },\n      pointLabels: {\n        color: \"#363636\",\n      },\n      ticks: {\n        color: \"#363636\",\n      },\n    },\n  },\n};\n\nconst noData = {\n  labels: [null, null, null],\n  datasets: [\n    {\n      label: \"No indicator data...\",\n      data: [null, null, null],\n      backgroundColor: \"#363636\",\n      borderColor: \"#363636\",\n      borderWidth: 1,\n    },\n  ],\n};\n\nexport default function RadarChart() {\n  ChartJS.register(\n    RadialLinearScale,\n    PointElement,\n    LineElement,\n    Filler,\n    Tooltip,\n    Legend\n  );\n\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const [radarData, setRadarData] = useState();\n\n  const createRadarData = (indicators) => {\n    let radarData = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Project Values\",\n          data: [],\n          backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderWidth: 1,\n        },\n        {\n          label: \"Reference Values\",\n          data: [],\n          backgroundColor: \"rgba(0, 33, 132, 0.2)\",\n          borderColor: \"rgba(0, 99, 255, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    for (let i = 0; i < indicators.length; i++) {\n      if (indicators[i].viz_type === \"radar\") {\n        radarData.labels.push(indicators[i].name);\n        radarData.datasets[0].data.push(indicators[i].value);\n        radarData.datasets[1].data.push(indicators[i].ref_value);\n      }\n    }\n    return radarData;\n  };\n\n  useEffect(() => {\n    if (!cityIOdata.indicators) {\n      setRadarData(noData);\n    } else {\n      const d = createRadarData(cityIOdata.indicators);\n      setRadarData(d);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  return (\n    <>\n      {radarData && (\n        <Radar\n          data={radarData}\n          options={cityIOdata.indicators ? options : optionsNoData}\n        />\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  maintainAspectRatio: true,\n  aspectRatio: 1, \n\n  scales: {\n    r: {\n      angleLines: {\n        color: \"#696969\",\n      },\n      grid: {\n        color: \"#696969\",\n        circular: true,\n      },\n      pointLabels: {\n        color: \"#C0C0C0\",\n      },\n      ticks: {\n        color: \"#696969\",\n      },\n    },\n  },\n  responsive: true,\n};\n\nexport const noData = {\n  labels: [\"no data...\"],\n  datasets: [\n    {\n      label: \"No indicator data...\",\n      data: [0],\n      backgroundColor: \"#696969\",\n    },\n  ],\n};\n\nexport default function BarChart() {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const [barChartData, setBarChartData] = useState();\n\n  useEffect(() => {\n    if (!cityIOdata.indicators) {\n      setBarChartData(noData);\n    } else {\n      const d = createBarChartData(cityIOdata.indicators);\n      setBarChartData(d);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  const createBarChartData = (indicators) => {\n    let barChartData = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Chart Data\",\n          data: [],\n          backgroundColor: \"rgba(255, 99, 132, 0.3)\",\n          borderColor: \"rgba(255, 99, 132, 1)\",\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    for (let i = 0; i < indicators.length; i++) {\n      if (indicators[i].viz_type === \"bar\") {\n        barChartData.labels.push(indicators[i].name);\n        barChartData.datasets[0].data.push(indicators[i].value);\n      }\n    }\n    return barChartData;\n  };\n\n  return (\n    <>\n      {barChartData && (\n        <Bar options={options} data={barChartData ? barChartData : noData} />\n      )}\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nexport default function AreaCalc() {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [],\n  });\n\n  ChartJS.register(ArcElement, Tooltip, Legend);\n\n  let geoGridData = cityIOdata.GEOGRIDDATA;\n\n  const createChartData = () => {\n    const data = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Area Calculation\",\n          data: [],\n          backgroundColor: [],\n          borderColor: [],\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    geoGridData.forEach((gridCellData) => {\n      let typeName = gridCellData.name;\n      if (!typeName || typeName === \"None\" || typeName === \"\") {\n        typeName = \"Unknown type...\";\n      }\n      // check if this type is already in the array of labels (if not, add it)\n      if (data.labels.includes(typeName)) {\n        const index = data.labels.indexOf(typeName);\n        // add the value to the data array at existing label\n        data.datasets[0].data[index] =\n          gridCellData.height && gridCellData.height !== 0\n            ? data.datasets[0].data[index] + 1\n            : data.datasets[0].data[index] + 1;\n      } else {\n        data.labels.push(typeName);\n        data.datasets[0].data.push(0);\n        data.datasets[0].backgroundColor.push(\n          `rgba(${gridCellData.color[0]}, ${gridCellData.color[1]}, ${gridCellData.color[2]}, 0.2)`\n        );\n        data.datasets[0].borderColor.push(\n          `rgba(${gridCellData.color[0]}, ${gridCellData.color[1]}, ${gridCellData.color[2]}, 0.8)`\n        );\n      }\n    });\n    setChartData(data);\n  };\n\n  useEffect(() => {\n    if (!cityIOdata.GEOGRID.properties) return;\n    createChartData(cityIOdata);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cityIOdata]);\n\n  return <>{geoGridData && <Doughnut data={chartData} />}</>;\n}\n","import { Card, CardContent, Grid, Box } from \"@mui/material\";\nimport RadarChart from \"./RadarChart\";\nimport BarChart from \"./BarChart\";\nimport AreaCalc from \"./AreaCalc\";\nimport ResizableDrawer from \"../../../Components/ResizableDrawer\";\n\nfunction VisContainer() {\n  return (\n    <ResizableDrawer direction=\"right\" width={window.innerWidth / 3}>\n      <Box sx={{ margin: 1 }}>\n        <Grid container spacing={1} direction={\"row\"}>\n          <Grid item xs={12} md={12} lg={12} xl={12}>\n            <Card variant=\"outlined\">\n              <CardContent>\n                <RadarChart />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={12} lg={6} xl={6}>\n            <Card variant=\"outlined\">\n              <CardContent>\n                <AreaCalc />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={12} lg={6} xl={6}>\n            <Card variant=\"outlined\">\n              <CardContent>\n                <BarChart />\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n    </ResizableDrawer>\n  );\n}\n\nexport default VisContainer;\n","import CityIO from \"../../Components/CityIO\";\nimport { useSelector } from \"react-redux\";\nimport MenuContainer from \"./MenuContainer\";\nimport DeckGLMap from \"./DeckglMap/index\";\nimport VisContainer from \"./VisContainer\";\nimport LoadingModules from \"../../Components/LoadingModules\";\n\nexport default function CityScopeJS() {\n  const cityIOisDone = useSelector(\n    (state) => state.cityIOdataState.cityIOisDone\n  );\n  const tableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      {!cityIOisDone && <LoadingModules loadingModules={[tableName]} />}\n      {/* if we got a cityIO table name, start cityIO module */}\n      {tableName && <CityIO tableName={tableName} />}\n      {/* if cityIO module is done loading, start the CSjs app */}\n      {cityIOisDone && (\n        <>\n          <DeckGLMap />\n          <MenuContainer />\n          <VisContainer />\n        </>\n      )}\n    </>\n  );\n}\n","import Box from \"@mui/material/Box\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport { styled } from \"@mui/material/styles\";\nimport { useEffect, useState } from \"react\";\n\nexport default function TableListLoading() {\n  const [progress, setProgress] = useState(0);\n\n  const BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\n    height: 10,\n  }));\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((oldProgress) => {\n        if (oldProgress === 100) {\n          return 0;\n        }\n        const diff = Math.random() * 10;\n        return Math.min(oldProgress + diff, 100);\n      });\n    }, 500);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <Box sx={{ width: \"100%\", position: \"fixed\", bottom: \"0px\" }}>\n      <BorderLinearProgress variant=\"determinate\" value={progress} />\n    </Box>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport TableListLoading from \"./TableListLoading\";\nimport axios from \"axios\";\nimport { cityIOSettings } from \"../../settings/settings\";\n\nexport default function CityIOlist(props) {\n  const getTablesList = props.getTablesList;\n  const [tablesList, setTableList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    tablesList && getTablesList(tablesList);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tablesList]);\n\n  const fetchCityIOtables = async () => {\n    // ! https://stackoverflow.com/questions/37213783/waiting-for-all-promises-called-in-a-loop-to-finish\n    const cityIOlistURL =\n      cityIOSettings.cityIO.baseURL + cityIOSettings.cityIO.ListOfTables;\n    // get all URLs\n    const tablesArr = await axios.get(cityIOlistURL);\n    // create array of all requests\n    const requestArr = tablesArr.data.map(async (tableName) => {\n      // const tableName = urlStr.split('/').pop()\n      const url = `${cityIOSettings.cityIO.baseURL}table/${tableName}/`;\n      return axios\n        .get(`${url}GEOGRID/properties/header/`)\n        .then((res) =>\n          setTableList((oldArray) => [\n            ...oldArray,\n            { tableURL: url, tableName: tableName, tableHeader: res.data },\n          ])\n        )\n        .catch((error) => console.log(error.toString()));\n    });\n\n    Promise.all(requestArr).then(() => {\n      setIsLoading(false);\n      return tablesList;\n    });\n  };\n\n  useEffect(() => {\n    fetchCityIOtables();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <>{isLoading && <TableListLoading />}</>;\n}\n","import { Typography, Link } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport {generalSettings} from \"../../../settings/settings\";\n\nexport default function SelectedTable(props) {\n  const selectedTable = props.clicked;\n\n  const cityscopeJSendpoint = generalSettings.csjsURL + \"?cityscope=\";\n  const projectionEndpoint = generalSettings.csjsURL + \"?projection=\";\n\n  const [open, setOpen] = useState(false);\n\n  // open dialog when table info has been changed\n  useEffect(() => {\n    setOpen(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedTable]);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"table-select-dialog-title\"\n      aria-describedby=\"table-select-dialog-description\"\n    >\n      <DialogTitle id=\"table-select-dialog-title\">\n        CityScope {selectedTable.tableName}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"table-select-dialog-description\">\n          <Typography component={\"span\"}>\n            <Link\n              href={cityscopeJSendpoint + selectedTable.tableName.toLowerCase()}\n            >\n              Go to project\n            </Link>\n            {\", \"}\n            <Link\n              href={projectionEndpoint + selectedTable.tableName.toLowerCase()}\n            >\n              project this table to TUI\n            </Link>{\" \"}\n            or{\" \"}\n            <Link target={\"blank\"} href={selectedTable.tableURL}>\n              view raw data on cityIO.\n            </Link>\n          </Typography>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>(x) Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport SelectedTable from \"./SelectedTable\";\nimport { useState } from \"react\";\nexport default function SearchTablesList(props) {\n  const tablesList = props.tablesList;\n  const [selectedTable, setSelectedTable] = useState(null);\n  const defaultProps = {\n    options: tablesList,\n    getOptionLabel: (option) => option.tableName,\n  };\n\n  return (\n    <>\n      {selectedTable && <SelectedTable clicked={selectedTable} />}\n      <Autocomplete\n        {...defaultProps}\n        disablePortal\n        id=\"combo-box-demo\"\n        options={tablesList}\n        sx={{ width: 300 }}\n        renderInput={(params) => <TextField {...params} label=\"Search CityScope Project...\" />}\n        onChange={(event, newValue) => {\n          setSelectedTable(newValue);\n        }}\n      />\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/legoio.148c5ab6.png\";","import { useEffect, useState } from \"react\";\nimport { _MapContext } from \"react-map-gl\";\nimport { DeckGL } from \"@deck.gl/react\";\nimport { _GlobeView as GlobeView, COORDINATE_SYSTEM } from \"@deck.gl/core\";\nimport { TileLayer } from \"@deck.gl/geo-layers\";\nimport { FlyToInterpolator } from \"deck.gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { LineLayer, IconLayer, TextLayer, BitmapLayer } from \"@deck.gl/layers\";\nimport icon from \"./legoio.png\";\n\nimport SelectedTable from \"../SelectedTable\";\n\n// * draggable pin https://github.com/visgl/react-map-gl/tree/6.1-release/examples/draggable-markers\n\nexport default function CityIOdeckGLmap(props) {\n  const [markerInfo, setMarkerInfo] = useState([]);\n  const [clicked, setClicked] = useState();\n  const [zoom, setZoom] = useState();\n  const INIT_VIEW = {\n    longitude: -71.060929,\n    latitude: 42.3545259,\n    zoom: 1,\n    pitch: 0,\n    bearing: 0,\n    zHeight: 2000000,\n  };\n\n  const [viewport, setViewport] = useState(INIT_VIEW);\n  const [initialViewState, setInitialViewState] = useState(viewport);\n  // boolean for hovering flag\n  let isHovering = false;\n\n  useEffect(() => {\n    // set initial zoom level to refelct layers appearance\n    setZoom(INIT_VIEW.zoom);\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n  }, [INIT_VIEW.zoom]);\n\n  useEffect(() => {\n    let markersArr = [];\n   \n      props.cityIOdata.forEach((table, index) => {\n      \n        markersArr.push({\n          tableURL: table.tableURL,\n          tableName: table.tableName,\n          index: index,\n          tableHeader: table.tableHeader,\n          coord: {\n            from: [table.tableHeader.longitude, table.tableHeader.latitude],\n            to: [\n              table.tableHeader.longitude + index/10,\n              table.tableHeader.latitude + index/10,\n              INIT_VIEW.zHeight,\n            ],\n          },\n        });\n      });\n    \n    setMarkerInfo(markersArr);\n  }, [props, INIT_VIEW.zHeight]);\n\n  const layers = [\n    new TileLayer({\n      data:\n        \"https://basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png\",\n\n      /**\n       * \n       * TESTS WITH OTHER TILESETS  \n       * 'https://api.mapbox.com/v4/mapbox.mapbox-streets-v8/{z}/{x}/{y}.png' +\n      '?style=' +\n      'mapbox://styles/mapbox/dark-v10' +\n      'mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq' +\n      'mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd' +\n      '&access_token=' +\n      process.env.REACT_APP_MAPBOX_TOKEN,\n\n     settings.map.mapStyle.sat,\n       'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\n       */\n\n      minZoom: 0,\n      maxZoom: 19,\n      tileSize: 96,\n\n      renderSubLayers: (props) => {\n        const {\n          bbox: { west, south, east, north },\n        } = props.tile;\n\n        return new BitmapLayer(props, {\n          data: null,\n          image: props.data,\n          _imageCoordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n          bounds: [west, south, east, north],\n        });\n      },\n    }),\n\n    new LineLayer({\n      id: \"LineLayer\",\n      data: markerInfo,\n      pickable: true,\n      getWidth: zoom < 2 ? 0.5 : 0,\n      getSourcePosition: (d) => d.coord.from,\n      getTargetPosition: (d) => d.coord.to,\n      getColor: (d) => [255, 82, 120],\n    }),\n    new TextLayer({\n      id: \"text-layer\",\n      data: markerInfo,\n      pickable: true,\n      getPosition: (d) => d.coord.to,\n      getText: (d) => d.tableName,\n      getColor: [255, 82, 120],\n      getSize: zoom < 2 ? 0 : 10,\n      getAngle: 0,\n      getPixelOffset: [10, 5],\n      getTextAnchor: \"start\",\n      getAlignmentBaseline: \"center\",\n    }),\n    new IconLayer({\n      id: \"icon-layer\",\n      data: markerInfo,\n      pickable: true,\n      iconAtlas: icon,\n      onClick: (d) => {\n        setInitialViewState({\n          longitude: d.object.coord.to[0],\n          latitude: d.object.coord.to[1],\n          zoom: 3,\n          pitch: 0,\n          bearing: 0,\n          transitionDuration: 1000,\n          transitionInterpolator: new FlyToInterpolator(),\n        });\n\n        setClicked(d);\n      },\n      iconMapping: {\n        marker: { x: 0, y: 0, width: 768, height: 768, mask: false },\n      },\n      getIcon: (d) => \"marker\",\n      sizeScale: 1,\n      getSize: zoom < 5 ? 20 : 10,\n      getPosition: (d) => [d.coord.to[0], d.coord.to[1], INIT_VIEW.zHeight],\n    }),\n  ];\n\n  return (\n    <>\n      {clicked && clicked.object && <SelectedTable clicked={clicked.object} />}\n\n      <DeckGL\n        views={new GlobeView()}\n        onHover={({ object }) => (isHovering = Boolean(object))}\n        getCursor={({ isDragging }) =>\n          isDragging ? \"grabbing\" : isHovering ? \"crosshair\" : \"grab\"\n        }\n        layers={layers}\n        controller={true}\n        initialViewState={initialViewState}\n        onViewportChange={setViewport}\n        onViewStateChange={(d) => setZoom(d.viewState.zoom)}\n        ContextProvider={_MapContext.Provider}\n      ></DeckGL>\n    </>\n  );\n}\n","import CityIOlist from \"./CityIOlist\";\nimport SearchTablesList from \"./SearchTablesList\";\nimport { useState } from \"react\";\nimport { Typography, Link, Grid, Box } from \"@mui/material\";\nimport GitHubIcon from \"@mui/icons-material/GitHub\";\nimport CityIOdeckGLmap from \"./CityIOdeckGLmap/index\";\n\nexport default function CityIOviewer() {\n  // get the list of tables from CityIOlist component and pass it to SearchTablesList component\n  const [tablesList, getTablesList] = useState([]);\n  return (\n    <>\n      <CityIOdeckGLmap cityIOdata={tablesList} />\n\n      <Box sx={{ width: \"100%\", padding: 5 }}>\n        <CityIOlist getTablesList={getTablesList} />\n\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <SearchTablesList tablesList={tablesList} />\n          </Grid>\n          <Grid item xs={12} lg={6} zIndex={10}>\n            <Typography variant=\"h1\">MIT CityScope</Typography>\n            <Typography variant=\"h4\">\n              MIT CityScope is an open-source urban modeling and simulation\n              platform. CityScope allows users to examine different design\n              alternatives, and observe their impact through multiple layers of\n              urban analytics.\n              <Link href={\"https://github.com/CityScope\"} target={\"blank\"}>\n                Join the CityScope open-source development\n              </Link>  <GitHubIcon fontSize={\"small\"} /> \n            </Typography>\n          </Grid>\n        </Grid>\n      </Box>\n    </>\n  );\n}\n","/**\n * How to save a screenshot from deck.gl map to a file? \n // https://codesandbox.io/s/export-react-component-as-image-tgqmq?file=/src/App.js:169-175\n // https://github.com/xap5xap/image-export-deckgl-rect/blob/master/src/App.js\n//  https://gist.github.com/adamilyas/88445938af94b2d29723f92272123f43 \n * \n */\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport DeckGL from \"deck.gl\";\nimport { SimpleMeshLayer } from \"@deck.gl/mesh-layers\";\nimport { OBJLoader } from \"@loaders.gl/obj\";\nimport { processGridData } from \"../CityScopeJS/DeckglMap/deckglLayers/GridLayer\";\nimport { CubeGeometry } from \"@luma.gl/engine\";\nimport { mapSettings } from \"../../settings/settings\";\nimport Map from \"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport LoadingModules from \"../../Components/LoadingModules\";\nimport {\n  Button,\n  CircularProgress,\n  TextField,\n  Box,\n  Container,\n  Typography,\n  Grid,\n  Paper,\n  Stack,\n} from \"@mui/material\";\n\nimport axios from \"axios\";\n\nconst cube = new CubeGeometry({ type: \"x,z\", xlen: 0, ylen: 0, zlen: 0 });\n\nexport default function RenderedViewMap() {\n  // fix deck view rotate\n  useEffect(() => {\n    document.addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const refMap = useRef();\n  const refDeckgl = useRef();\n  const renderDivRef = useRef();\n\n  const [renderedImage, setRenderedImage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [prompt, setPrompt] = useState(\n    \"Aerial view of the MIT Campus in Cambridge, Massachusetts. Realistic. Accurate. Sunset with long shadows. Beautiful.\"\n  );\n  const [userSeed, setUserSeed] = useState(1024);\n  const [serverURL, setServerURL] = useState(\n    \"https://virtualscope.media.mit.edu/\"\n  );\n\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const GEOGRID = processGridData(cityIOdata);\n  const header = GEOGRID.properties.header;\n\n  const midGrid = () => {\n    const lastCell =\n      cityIOdata.GEOGRID.features[cityIOdata.GEOGRID.features.length - 1]\n        .geometry.coordinates[0][0];\n    const firstCell = cityIOdata.GEOGRID.features[0].geometry.coordinates[0][0];\n    const midGrid = [\n      (firstCell[0] + lastCell[0]) / 2,\n      (firstCell[1] + lastCell[1]) / 2,\n    ];\n    return midGrid;\n  };\n\n  const midGridCoordinates = midGrid();\n  const [viewState, setViewState] = useState({\n    longitude: midGridCoordinates[0],\n    latitude: midGridCoordinates[1],\n    zoom: 15,\n    bearing: 360 - header.rotation,\n    pitch: 45,\n  });\n\n  const [mergeCanvas] = useState(document.createElement(\"canvas\"));\n\n  const handleCapture = () => {\n    if (!refMap.current || !refDeckgl.current) {\n      return;\n    }\n    setIsLoading(true);\n    const mapGL = refMap.current.getMap();\n    const deck = refDeckgl.current.deck;\n    const mapboxCanvas = mapGL.getCanvas();\n    deck.redraw(true);\n    const deckglCanvas = deck.canvas;\n    mergeCanvas.width = mapboxCanvas.width;\n    mergeCanvas.height = mapboxCanvas.height;\n    var context = mergeCanvas.getContext(\"2d\");\n    context.globalAlpha = 1.0;\n    context.drawImage(mapboxCanvas, 0, 0);\n    context.globalAlpha = 1.0;\n    context.drawImage(deckglCanvas, 0, 0);\n    const jpegFile = mergeCanvas.toDataURL(\"image/jpeg\");\n    setRenderedImage(jpegFile);\n    renderDivRef.current?.scrollIntoView({ behavior: \"smooth\" });\n\n    mergeCanvas.toBlob(async (blob) => {\n      var formData = new FormData();\n      formData.append(\"image\", blob, \"image.jpg\");\n      formData.append(\"prompt\", prompt);\n      formData.append(\"user_seed\", userSeed);\n      formData.append(\"from\", \"frontend\");\n      await axios({\n        method: \"post\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        mode: \"no-cors\",\n        url: serverURL,\n        data: formData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n        responseType: \"blob\",\n      })\n        .then(async (res) => {\n          let dataUrl = await blobToDataUrl(res.data);\n          setRenderedImage(dataUrl);\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          if (error.response) {\n            console.log(error.response.data);\n            console.log(error.response.status);\n            console.log(error.response.headers);\n          } else if (error.request) {\n            console.log(error.request);\n          } else {\n            console.log(\"Error\", error.message);\n          }\n        });\n    });\n  };\n\n  const blobToDataUrl = (blob) => {\n    return new Promise((r) => {\n      let a = new FileReader();\n      a.onload = r;\n      a.readAsDataURL(blob);\n    }).then((e) => e.target.result);\n  };\n\n  return (\n    <>\n      {isLoading && <LoadingModules loadingModules={[\"...\"]} />}\n\n      <Box\n        component=\"main\"\n        sx={{\n          flexGrow: 1,\n          height: \"100vh\",\n          overflow: \"auto\",\n        }}\n      >\n        <Container maxWidth=\"xl\" sx={{ mt: 5, mb: 5 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Grid\n                sx={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <Paper\n                  variant=\"outlined\"\n                  sx={{\n                    variant: \"outlined\",\n                    p: 2,\n                    flexDirection: \"column\",\n                    display: \"flex\",\n                    flexGrow: 1,\n                  }}\n                >\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} md={6}>\n                      <Typography variant=\"h1\">DeepScope 2.0</Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <Typography>\n                        DeepScope uses a machine learning model to generate\n                        urban scenes in real-time, based on designs preform in\n                        the CitySCcope platform. By implementing 'Stable\n                        diffusion', an open-source Transformer model, this tool\n                        allows for real-time prototyping and visualizations of\n                        urban design proposals, bypassing the need for expensive\n                        and time-consuming rendering.\n                      </Typography>\n                    </Grid>\n\n                    <Grid item xs={12} md={7}>\n                      <TextField\n                        fullWidth\n                        id=\"outlined-basic\"\n                        required\n                        label=\"Text Prompt Description of the Scene\"\n                        defaultValue={prompt}\n                        variant=\"outlined\"\n                        onChange={(e) => setPrompt(e.target.value)}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={2}>\n                      <TextField\n                        fullWidth\n                        id=\"outlined-basic\"\n                        InputProps={{\n                          inputProps: {\n                            max: 10000,\n                            min: 0,\n                          },\n                        }}\n                        label=\"Random seed\"\n                        defaultValue={userSeed}\n                        variant=\"outlined\"\n                        type=\"number\"\n                        onChange={(e) => setUserSeed(e.target.value)}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={3}>\n                      <TextField\n                        fullWidth\n                        id=\"outlined-basic\"\n                        label=\"Server URL\"\n                        defaultValue={serverURL}\n                        variant=\"outlined\"\n                        onChange={(e) => setServerURL(e.target.value)}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={12}>\n                      <Button\n                        fullWidth\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                        onClick={handleCapture}\n                        disabled={isLoading}\n                      >\n                        {!isLoading && \"Capture & Render\"}\n                        {isLoading && (\n                          <>\n                            <CircularProgress size={14} />\n                            <Typography>\n                              Rendering captured view... [can take ~15 seconds]\n                            </Typography>\n                          </>\n                        )}\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </Paper>\n              </Grid>\n            </Grid>\n            <Grid item xs={12} md={6} lg={6}>\n              <Paper\n                variant=\"outlined\"\n                sx={{\n                  variant: \"outlined\",\n                  p: 2,\n                  flexDirection: \"column\",\n                  display: \"flex\",\n                }}\n              >\n                <Stack spacing={2} direction=\"column\">\n                  <Typography variant=\"h4\">CityScope Model View</Typography>\n                  <Box\n                    sx={{\n                      height: \"576px\",\n                      minHeight: \"576px\",\n                      width: \"auto\",\n                      position: \"relative\",\n                    }}\n                  >\n                    <DeckGL\n                      ref={refDeckgl}\n                      viewState={viewState}\n                      onViewStateChange={({ viewState }) =>\n                        setViewState(viewState)\n                      }\n                      controller={\n                        isLoading\n                          ? false\n                          : {\n                              touchZoom: true,\n                              touchRotate: true,\n                              keyboard: false,\n                            }\n                      }\n                      layers={[\n                        new SimpleMeshLayer({\n                          id: \"mesh-layer\",\n                          data: GEOGRID.features,\n                          loaders: [OBJLoader],\n                          mesh: cube,\n\n                          getPosition: (d) => {\n                            const pntArr = d.geometry.coordinates[0];\n                            const first = pntArr[1];\n                            const last = pntArr[pntArr.length - 2];\n                            const center = [\n                              (first[0] + last[0]) / 2,\n                              (first[1] + last[1]) / 2,\n                              // add the height of the grid cell\n                              d.properties.height.length > 1\n                                ? d.properties.height[1] > 1\n                                  ? d.properties.height[1] / 2\n                                  : 1\n                                : d.properties.height > 1\n                                ? d.properties.height / 2\n                                : 1,\n                            ];\n                            return center;\n                          },\n                          getColor: (d) =>\n                            d.properties.interactive\n                              ? d.properties.color\n                              : [0, 0, 0, 0],\n                          opacity: 0.75,\n                          getOrientation: (d) => [-180, header.rotation, -90],\n                          getScale: (d) => [\n                            GEOGRID.properties.header.cellSize / 2,\n                            d.properties.height.length > 1\n                              ? d.properties.height[1] > 1\n                                ? d.properties.height[1] / 2\n                                : 1\n                              : d.properties.height > 1\n                              ? d.properties.height / 2\n                              : 1,\n                            GEOGRID.properties.header.cellSize / 2,\n                          ],\n\n                          updateTriggers: {\n                            getScale: GEOGRID,\n                          },\n                        }),\n                      ]}\n                    >\n                      <Map\n                        ref={refMap}\n                        preserveDrawingBuffer={true} //! This is critical to preserve the WebGL drawing buffer\n                        mapboxApiAccessToken={\n                          process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={mapSettings.map.mapStyle.normal}\n                      />\n                    </DeckGL>\n                  </Box>\n                </Stack>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} md={6} lg={6}>\n              <Paper\n                variant=\"outlined\"\n                sx={{\n                  p: 2,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  height: \"auto\",\n                  width: \"auto\",\n                }}\n              >\n                <Stack spacing={2} direction=\"column\">\n                  <Typography variant=\"h4\">Captured & Rendered View</Typography>\n\n                  {renderedImage && (\n                    <div ref={renderDivRef}>\n                      <img\n                        style={{\n                          height: \"576px\",\n                          filter: isLoading ? \"blur(3px)\" : \"none\",\n                          WebkitFilter: isLoading ? \"blur(3px)\" : \"none\",\n                        }}\n                        src={renderedImage}\n                        alt=\"screenshot\"\n                      />\n                    </div>\n                  )}\n                </Stack>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </Box>\n    </>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport CityIO from \"../../Components/CityIO\";\nimport RenderedViewMap from \"./RenderedViewMap\";\n\nexport default function RenderedView() {\n  const cityIOisDone = useSelector(\n    (state) => state.cityIOdataState.cityIOisDone\n  );\n  const tableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      {tableName && <CityIO tableName={tableName} />}\n      {cityIOisDone && <RenderedViewMap />}\n    </>\n  );\n}\n","import { TextField, Box } from \"@mui/material\";\n// convert every item in viewState to an input field\n// that can be edited and update the viewState with the new values\nfunction ViewStateInputs(props) {\n  const viewState = props.viewState;\n  const setViewState = props.setViewState;\n  const viewToggles = Object.keys(viewState).map((key) => {\n    if (Number.isFinite(viewState[key])) {\n      return (\n        <TextField\n          key={key}\n          id=\"outlined-number\"\n          label={key}\n          type=\"number\"\n          value={viewState[key]}\n          onChange={(e) => {\n            setViewState({\n              ...viewState,\n              [key]: parseFloat(e.target.value),\n            });\n          }}\n        />\n      );\n    } else {\n      return null;\n    }\n  });\n  return (\n    <Box\n      sx={{\n        component: \"form\",\n        backgroundColor: \"rgba(0,0,0,0.95)\",\n        \"& .MuiTextField-root\": { m: 2, width: \"90%\" },\n        bottom: \"1vh\",\n        left: \"1vw\",\n        maxWidth: \"30%\",\n        position: \"fixed\",\n        zIndex: \"tooltip\",\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>Changes are saved automatically. Press [ z ] again to hide.</div>\n\n      <div>{viewToggles}</div>\n    </Box>\n  );\n}\n\nexport default ViewStateInputs;\n","import { useRef, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Map from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { mapSettings as settings } from \"../../../../settings/settings\";\nimport ViewStateInputs from \"../Components/ViewStateInputs\";\n\nexport default function DeckMap(props) {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const TUIobject = cityIOdata && cityIOdata.tui;\n  const header = cityIOdata.GEOGRID.properties.header;\n  const viewStateEditMode = props.viewStateEditMode;\n  const layers = props.layers;\n  const editMode = props.editMode;\n\n  const mapStyle = {\n    active: TUIobject && TUIobject.MAP_STYLE && TUIobject.MAP_STYLE.active,\n    style:\n      settings.map.mapStyle[\n        TUIobject && TUIobject.MAP_STYLE && TUIobject.MAP_STYLE.style\n      ] || settings.map.mapStyle.blue,\n  };\n\n  const [viewState, setViewState] = useState();\n\n  const setViewStateToTableHeader = () => {\n    setViewState({\n      ...viewState,\n      longitude: header.longitude,\n      latitude: header.latitude,\n      zoom: 15,\n      pitch: 0,\n      bearing: 360 - header.rotation,\n      orthographic: true,\n    });\n  };\n\n  const deckGLref = useRef(null);\n\n  useEffect(() => {\n    // fix deck view rotate\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // on init, check if prev. local storage with\n    // view state exist. If so, load it.\n    if (localStorage.getItem(\"projectionViewStateStorage\")) {\n      console.log(\"loading prev. projectionViewStateStorage...\");\n      const vs = localStorage.getItem(\"projectionViewStateStorage\");\n      setViewState(JSON.parse(vs));\n    } else {\n      // zoom map on CS table location\n      setViewStateToTableHeader();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onViewStateChange = ({ viewState }) => {\n    //    save current view state to local storage\n    localStorage.setItem(\n      \"projectionViewStateStorage\",\n      JSON.stringify(viewState)\n    );\n    // ! lock bearing to avoid odd rotation\n    setViewState({ ...viewState, pitch: 0, orthographic: true });\n  };\n\n  return (\n    <>\n      <DeckGL\n        ref={deckGLref}\n        viewState={viewState}\n        onViewStateChange={onViewStateChange}\n        layers={layers}\n        controller={{}}\n      >\n        {!editMode && (\n          <Map\n            active={mapStyle.active}\n            width=\"100%\"\n            height=\"100%\"\n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n            mapStyle={mapStyle.style}\n          />\n        )}\n      </DeckGL>\n      {viewStateEditMode && viewState && (\n        <ViewStateInputs setViewState={setViewState} viewState={viewState} />\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { mapSettings as settings } from \"../../../../settings/settings\";\nimport { GeoJsonLayer, TripsLayer, HeatmapLayer, TextLayer } from \"deck.gl\";\nimport { processGridData } from \"../../../CityScopeJS/DeckglMap/deckglLayers/GridLayer\";\nimport { hexToRgb } from \"../../../../utils/utils\";\nimport DeckMap from \"./DeckMap\";\n\nexport default function ProjectionDeckMap(props) {\n  const editMode = props.editMode;\n  const viewStateEditMode = props.viewStateEditMode;\n  const layersVisibilityControl = props.layersVisibilityControl;\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const TUIobject = cityIOdata && cityIOdata.tui;\n\n  const [time, setTime] = useState(settings.map.layers.ABM.startTime);\n  const [animation] = useState({});\n\n  const animate = () => {\n    setTime((t) => {\n      return t > settings.map.layers.ABM.endTime\n        ? settings.map.layers.ABM.startTime\n        : t + settings.map.layers.ABM.animationSpeed;\n    });\n    animation.id = window.requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    animation.id = window.requestAnimationFrame(animate);\n    return () => window.cancelAnimationFrame(animation.id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animation]);\n\n  const layersArray = () => {\n    if (!TUIobject) return [];\n    return [\n      new GeoJsonLayer({\n        id: \"GRID\",\n        visible: TUIobject.GRID && TUIobject.GRID.active,\n        data: processGridData(cityIOdata),\n        opacity: 0.5,\n        extruded: false,\n        wireframe: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 1,\n        getFillColor: (d) => d.properties.color,\n        transitions: {\n          getFillColor: 500,\n        },\n      }),\n\n      new HeatmapLayer({\n        id: \"ACCESS\",\n        visible: TUIobject.ACCESS && TUIobject.ACCESS.active,\n        colorRange: [\n          [233, 62, 58],\n          [237, 104, 60],\n          [243, 144, 63],\n        ],\n        intensity: 1,\n        threshold: 0.5,\n        data: cityIOdata.access && cityIOdata.access.features,\n        getPosition: (d) => d.geometry.coordinates,\n        getWeight: (d) =>\n          d.properties[TUIobject.ACCESS.toggleArray.curr_active] || 0,\n        updateTriggers: {\n          getWeight: TUIobject.ACCESS.toggleArray.curr_active,\n        },\n      }),\n\n      // text layer in the center of each grid cell from the cityIOdata.GEOGRID.features\n      new TextLayer({\n        id: \"text\",\n        visible: TUIobject.TEXT && TUIobject.TEXT.active,\n        data: cityIOdata.GEOGRID && cityIOdata.GEOGRID.features,\n        getPosition: (d) => {\n          const pntArr = d.geometry.coordinates[0];\n          const first = pntArr[1];\n          const last = pntArr[pntArr.length - 2];\n          const center = [(first[0] + last[0]) / 2, (first[1] + last[1]) / 2];\n          return center;\n        },\n        getText: (d) => {\n          var length = 5;\n          return d.properties.name.length > length\n            ? d.properties.name.substring(0, length - 3) + \"...\"\n            : d.properties.name;\n        },\n        getColor: (d) => [0, 0, 0],\n        getSize: 8,\n      }),\n\n      new TripsLayer({\n        id: \"ABM\",\n        visible: TUIobject.ABM && TUIobject.ABM.active,\n        data: cityIOdata.ABM2 && cityIOdata.ABM2.trips,\n        getColor: (d) => {\n          let col = hexToRgb(cityIOdata.ABM2.attr.mode[d.mode].color);\n          return col;\n        },\n        getPath: (d) => d.path,\n        getTimestamps: (d) => d.timestamps,\n        fadeTrail: true,\n        getWidth: 10,\n        trailLength: 200,\n        currentTime: time,\n      }),\n    ];\n  };\n\n  return (\n    <DeckMap\n      editMode={editMode}\n      viewStateEditMode={viewStateEditMode}\n      layers={layersArray(layersVisibilityControl)}\n    />\n  );\n}\n","import React from 'react'\nimport { Anchor, Vector } from \"./Keystoner\";\n\nconst anchorSize = 20;\nconst halfAnchor = anchorSize / 1.5;\nconst vectorToTransform = (vector: Vector) =>\n  `translate(${vector[0]}px, ${vector[1]}px)`;\nconst styles = {\n  container: {\n    width: anchorSize,\n    height: anchorSize,\n    borderRadius: \"50%\",\n    position: \"absolute\" as \"absolute\",\n    border: \"1px solid white\",\n    cursor: \"move\",\n  },\n  \"top-left\": {\n    left: -halfAnchor,\n    top: -halfAnchor,\n  },\n  \"bottom-left\": {\n    left: -halfAnchor,\n    bottom: -halfAnchor,\n  },\n  \"top-right\": {\n    top: -halfAnchor,\n    right: -halfAnchor,\n  },\n  \"bottom-right\": {\n    bottom: -halfAnchor,\n    right: -halfAnchor,\n  },\n};\n\nexport interface Props {\n  position: Anchor;\n  onMouseEnter?: (position: Anchor) => void;\n  // tslint:disable-next-line:no-any\n  onMouseDown: (evt: any, position: Anchor) => void;\n  onMouseUp: (position: Anchor) => void;\n  translation: Vector;\n  style?: React.CSSProperties;\n  className?: string;\n}\n\nexport const AnchorComponent = ({\n  position,\n  translation,\n  onMouseEnter,\n  onMouseDown,\n  onMouseUp,\n  className = \"\",\n  style = {},\n}: any) => (\n  <div\n    onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n    onMouseDown={(evt) => onMouseDown(evt, position)}\n    onMouseUp={() => onMouseUp(position)}\n    className={className}\n    style={{\n      ...styles.container,\n      ...styles[position],\n      ...style,\n      transform: vectorToTransform(translation),\n    }}\n  />\n);\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n  var factor = Math.pow(10, precision);\n  var tempNumber = num * factor;\n  var roundedTempNumber = Math.round(tempNumber);\n  return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n  (Array as any)(num)\n    .fill()\n    .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n  sourcePoints: RectPoints,\n  targetPoints: RectPoints\n): Matrix3d => {\n  const a: number[][] = [];\n  const b: number[] = [];\n\n  for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n    const [fromX, fromY] = sourcePoints[i];\n    const [toX, toY] = targetPoints[i];\n\n    a.push(\n      [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n      [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n    );\n\n    b.push(toX, toY);\n  }\n\n  const h = solve(a, b, true);\n\n  return [\n    h[0],\n    h[3],\n    0,\n    h[6],\n    h[1],\n    h[4],\n    0,\n    h[7],\n    0,\n    0,\n    1,\n    0,\n    h[2],\n    h[5],\n    0,\n    1,\n  ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n  `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n  `translate(${vector[0]}px, ${vector[1]}px)`;\n\n// Component interfaces\nexport interface Props {\n  style?: React.CSSProperties;\n  className?: string;\n  isEditMode?: boolean;\n  x?: number;\n  y?: number;\n  anchorStyle?: React.CSSProperties;\n  anchorClassName?: string;\n  children?: React.ReactNode;\n}\n\nexport interface Context {\n  isEditMode: boolean;\n}\n\nexport interface State {\n  matrix: Matrix3d;\n  translateDelta: { [key: string]: Vector };\n  sourcePoints?: RectPoints;\n  transformOrigin: Vector;\n  containerTranslate: Vector;\n}\n\nconst styles = {\n  container: {\n    position: \"relative\" as \"relative\",\n  },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n  \"top-left\",\n  \"top-right\",\n  \"bottom-right\",\n  \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n  let deltaInitVals: any = {};\n  anchors.forEach((e) => {\n    deltaInitVals[e] = [0, 0];\n  });\n  return deltaInitVals;\n};\n\nexport default class Keystoner extends React.Component<Props, State> {\n  container: HTMLElement | undefined | null;\n  layerTranslateDelta: Vector | undefined;\n  anchorTranslateDelta: Vector | undefined;\n  isAnchorDragging = false;\n  targetPoints: RectPoints | any;\n  anchorMoving: Anchor | undefined;\n  state: State = {\n    matrix: defaultMatrix,\n    translateDelta: _setDeltaVal(),\n    sourcePoints: undefined,\n    transformOrigin: [0, 0],\n    containerTranslate: [this.props.x || 0, this.props.y || 0],\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n    if (this.container) {\n      const { width, height } = this.container.getBoundingClientRect();\n      const marginInitialView = 0;\n      const sourcePoints = [\n        [marginInitialView, marginInitialView],\n        [width - marginInitialView, marginInitialView],\n        [width - marginInitialView, height - marginInitialView],\n        [marginInitialView, height - marginInitialView],\n      ] as RectPoints;\n      this.targetPoints = [...sourcePoints] as RectPoints;\n      this.setState({ sourcePoints });\n\n      if (localStorage.getItem(\"projMap\")) {\n        console.log(\"loading prev. projMap...\");\n        let ls: any = localStorage.getItem(\"projMap\");\n        this.setState(JSON.parse(ls));\n      }\n    }\n  }\n  componentDidUpdate(prevProps: any, prevState: State) {\n    // save whatever keystone was in state\n    localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n    window.removeEventListener(\"mousemove\", this.onMouseMove);\n  }\n\n  onAnchorMouseDown = (evt: any, position: any) => {\n    evt.stopPropagation();\n    this.anchorTranslateDelta = [\n      evt.pageX - this.state.translateDelta[position][0],\n      evt.pageY - this.state.translateDelta[position][1],\n    ];\n\n    this.anchorMoving = position;\n  };\n\n  onAnchorMouseMove = (evt: any) => {\n    if (\n      !this.anchorTranslateDelta ||\n      !this.state.sourcePoints ||\n      !this.anchorMoving\n    ) {\n      return;\n    }\n    evt.preventDefault();\n    evt.stopPropagation();\n    const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n    const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n    const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n    this.targetPoints[vectorIndexToModify] = [\n      this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n      this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n    ];\n\n    this.setState({\n      matrix: transformPointsToMatrix(\n        this.state.sourcePoints,\n        this.targetPoints!\n      ),\n      translateDelta: {\n        ...this.state.translateDelta,\n        [this.anchorMoving]: [deltaX, deltaY],\n      },\n    });\n  };\n\n  onAnchorMouseUp = (position: any) => {\n    this.anchorTranslateDelta = undefined;\n    this.anchorMoving = undefined;\n  };\n\n  onMouseUp = () => {\n    this.layerTranslateDelta = undefined;\n  };\n\n  onMouseMove = (evt: any) => {\n    if (!this.layerTranslateDelta || !this.props.isEditMode) {\n      return;\n    }\n\n    const newVector: Vector = [\n      evt.pageX - this.layerTranslateDelta[0],\n      evt.pageY - this.layerTranslateDelta[1],\n    ];\n\n    this.setState({\n      containerTranslate: newVector,\n    });\n  };\n\n  onMouseDown = (evt: any) => {\n    const { containerTranslate } = this.state;\n    this.layerTranslateDelta = [\n      evt.pageX - containerTranslate[0],\n      evt.pageY - containerTranslate[1],\n    ];\n  };\n\n  render() {\n    const {\n      style,\n      isEditMode,\n      className,\n      anchorStyle,\n      anchorClassName,\n    } = this.props;\n    const {\n      translateDelta,\n      matrix,\n      containerTranslate,\n      transformOrigin,\n    } = this.state;\n\n    return (\n      <>\n        <div\n          onMouseDown={this.onMouseDown}\n          onMouseUp={this.onMouseUp}\n          style={{\n            cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n            position: \"relative\",\n            display: \"inline-block\",\n            transform: vectorToTransform(containerTranslate),\n          }}\n        >\n          <div\n            ref={(ref) => {\n              this.container = ref;\n            }}\n            style={{\n              ...styles.container,\n              ...style,\n              pointerEvents: isEditMode ? \"none\" : \"all\",\n              transform: matrixToTransform(matrix),\n              transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n            }}\n            className={className}\n          >\n            {this.props.children}\n          </div>\n          {isEditMode && (\n            <div>\n              {anchors.map((anchor, index) => (\n                <AnchorComponent\n                  style={anchorStyle}\n                  className={anchorClassName}\n                  key={anchor}\n                  translation={translateDelta[anchor]}\n                  position={anchor}\n                  onMouseDown={this.onAnchorMouseDown}\n                  onMouseUp={this.onAnchorMouseUp}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nexport default function DeleteLocalStorage() {\n  return (\n    <Grid container alignItems=\"center\" justify=\"center\">\n      <Button\n        sx={{ zIndex: \"tooltip\", top: \"50vh\", left: \"50vw\" }}\n        variant=\"contained\"\n        startIcon={<DeleteIcon />}\n      >\n        Reset Projection Mapping\n      </Button>\n    </Grid>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport ProjectionDeckMap from \"./ProjectionDeckMap\";\nimport Keystoner from \"./Components/Keystoner\";\nimport DeleteLocalStorage from \"./Components/deleteLocalStorage\";\nimport { useSelector } from \"react-redux\";\n\nexport default function Keystone() {\n  const cityIOdata = useSelector((state) => state.cityIOdataState.cityIOdata);\n  const numCols = cityIOdata.GEOGRID.properties.header.ncols;\n  const numRows = cityIOdata.GEOGRID.properties.header.nrows;\n  const tableRatio = numCols / numRows;\n\n  const [editMode, setEditMode] = useState(false);\n  const [viewStateEditMode, setViewStateEditMode] = useState(false);\n\n\n  const clearLocalStorage = () => {\n    if (localStorage.getItem(\"projMap\")) {\n      localStorage.removeItem(\"projMap\");\n    }\n    if (localStorage.getItem(\"projectionViewStateStorage\")) {\n      localStorage.removeItem(\"projectionViewStateStorage\");\n    }\n    window.location.reload();\n  };\n\n  useEffect(() => {\n    console.log(\"Keystone starting...\");\n    const onKeyDown = ({ key }) => {\n      if (key === \" \") {\n        setEditMode((editMode) => !editMode);\n      }\n      // if the key is 'z', display the viewState editor\n      if (key === \"z\") {\n        setViewStateEditMode((viewStateEditMode) => !viewStateEditMode);\n      }\n    };\n    document.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, []);\n\n  return (\n    <>\n      {editMode && (\n        <div onClick={() => clearLocalStorage()}>\n          <DeleteLocalStorage />\n        </div>\n      )}\n\n      <div\n        // ! this div's props are\n        // ! controling the projection z-index\n        // ! on top of the menus\n\n        style={{\n          height: \"100vh\",\n          width: \"100vw\",\n          overflow: \"hidden\",\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          zIndex: 1000,\n        }}\n      >\n        <div>\n          <Keystoner\n            style={{\n              height: \"100vh\",\n              width: `${tableRatio * 100}vh`,\n              backgroundColor: editMode ? \"rgba(255,0,0)\" : null,\n            }}\n            isEditMode={editMode}\n          >\n            <ProjectionDeckMap\n              editMode={editMode}\n              viewStateEditMode={viewStateEditMode}\n             \n            />\n          </Keystoner>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport CityIO from \"../../Components/CityIO\";\nimport Keystone from \"./Keystone\";\n\nexport default function ProjectionMapping() {\n  const cityIOisDone = useSelector(\n    (state) => state.cityIOdataState.cityIOisDone\n  );\n  const tableName = useSelector(\n    (state) => state.cityIOdataState.cityIOtableName\n  );\n\n  return (\n    <>\n      {tableName && <CityIO tableName={tableName} />}\n      {cityIOisDone && <Keystone />}\n    </>\n  );\n}\n","export default function SelectionTarget(props) {\n  if (!props.mousePos) return null;\n  const mousePos = props.mousePos;\n  const mouseDown = props.mouseDown;\n  const selectedType = props.selectedType;\n  const divSize = props.divSize;\n  let mouseX = mousePos.x - divSize / 2;\n  let mouseY = mousePos.y - divSize / 2;\n  return (\n    <div\n      style={{\n        border: \"2px solid\",\n        backgroundColor: mouseDown ? selectedType.color : \"rgba(0,0,0,0)\",\n        borderColor: selectedType.color,\n        color: selectedType.color,\n        borderRadius: \"15%\",\n        position: \"fixed\",\n        zIndex: 1,\n        pointerEvents: \"none\",\n        width: divSize,\n        height: divSize,\n        left: mouseX || 0,\n        top: mouseY || 0,\n      }}\n    >\n      <div\n        style={{\n          position: \"relative\",\n          left: divSize + 10,\n          fontSize: \"0.5em\",\n        }}\n      >\n        {selectedType.name}\n      </div>\n    </div>\n  );\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { GridEditorSettings } from \"../../settings/settings\";\n\nexport const editorMenuSlice = createSlice({\n  name: \"menuState\",\n  initialState: {\n    editorMapCenter: {\n      latitude: GridEditorSettings.GEOGRID.properties.header.latitude,\n      longitude: GridEditorSettings.GEOGRID.properties.header.longitude,\n    },\n    gridMaker: {},\n    gridProps: {},\n    typesEditorState: {},\n  },\n  reducers: {\n    updateEditorMapCenter: (state, action) => {\n      state.editorMapCenter = action.payload;\n    },\n    updateGridProps: (state, action) => {\n      state.gridProps = action.payload;\n    },\n    updateGridMaker: (state, action) => {\n      state.gridMaker = action.payload;\n    },\n    updateTypesEditorState: (state, action) => {\n      state.typesEditorState = action.payload;\n    },\n  },\n});\n\nexport const {\n  updateEditorMapCenter,\n  updateGridProps,\n  updateGridMaker,\n  updateTypesEditorState,\n} = editorMenuSlice.actions;\nexport default editorMenuSlice.reducer;\n","import EditorBrush from \"./EditorBrush\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { hexToRgb, testHex } from \"../../../utils/utils\";\nimport { updateGridMaker } from \"../../../redux/reducers/editorMenuSlice\";\nimport { GridEditorSettings } from \"../../../settings/settings\";\n\nexport default function EditorMap() {\n  const dispatch = useDispatch();\n  const [grid, setGrid] = useState();\n  // get the selected type from the store\n  const selectedType = useSelector(\n    (state) => state.editorMenuState.typesEditorState.selectedRow\n  );\n\n  // redux grid\n  const createdGrid = useSelector((state) => state.editorMenuState.gridMaker);\n  // create grid from redux store\n  useEffect(() => {\n    setGrid(createdGrid);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [createdGrid]);\n\n  // redux map center\n  const editorMapCenter = useSelector(\n    (state) => state.editorMenuState.editorMapCenter\n  );\n\n  const deckGLref = useRef(null);\n  const pickingRadius = 40;\n\n  useEffect(() => {\n    // zoom map on CS table location\n    setViewStateToTableHeader(editorMapCenter);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editorMapCenter]);\n\n  const [viewState, setViewState] = useState(\n    GridEditorSettings.map.initialViewState\n  );\n  // const [hoveredObj, setHoveredObj] = useState();\n  const [keyDownState, setKeyDownState] = useState();\n  const [mousePos, setMousePos] = useState();\n  const [mouseDown, setMouseDown] = useState();\n  const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n  const [pickedCellsState] = useState();\n  const onViewStateChange = ({ viewState }) => {\n    setViewState(viewState);\n  };\n\n  /**\n   * resets the camera viewport\n   * to cityIO header data\n   * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n   */\n  const setViewStateToTableHeader = (editorMapCenter) => {\n    setViewState({\n      ...viewState,\n      latitude:\n        (editorMapCenter && editorMapCenter.latCenter) ||\n        GridEditorSettings.GEOGRID.properties.header.latitude,\n      longitude:\n        (editorMapCenter && editorMapCenter.lonCenter) ||\n        GridEditorSettings.GEOGRID.properties.header.longitude,\n      zoom: 15,\n      pitch: 0,\n      bearing: 0,\n      orthographic: true,\n    });\n  };\n\n  // fix deck view rotate\n  useEffect(() => {\n    document\n      .getElementById(\"deckgl-wrapper\")\n      .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    // zoom map on CS table location\n    setViewStateToTableHeader();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * Description. uses deck api to\n   * collect objects in a region\n   * @argument{object} event picking event\n   */\n  const multipleObjPicked = (event) => {\n    const dim = pickingRadius;\n    const x = event.x - dim / 2;\n    const y = event.y - dim / 2;\n    let multipleObj = deckGLref.current.pickObjects({\n      x: x,\n      y: y,\n      width: dim,\n      height: dim,\n    });\n    return multipleObj;\n  };\n\n  /**\n   * Description. allow only to pick cells that are\n   *  not of CityScope TUI & that are intractable\n   * so to not overlap TUI activity\n   */\n  const handleGridCellEditing = (event) => {\n    if (!selectedType) return;\n    const { height, name, color, interactive } = selectedType;\n    const multiSelectedObj = multipleObjPicked(event);\n\n    multiSelectedObj.forEach((pickedObject, index) => {\n      // create a copy of the object\n      const thisCellProps = { ...pickedObject.object.properties };\n      // modify the copy properties to match the selected type\n      thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n      thisCellProps.height = height;\n      thisCellProps.name = name;\n      if (interactive !== \"No\") {\n        thisCellProps.interactive = interactive;\n      } else {\n        delete thisCellProps.interactive;\n      }\n      //  assign the modified copy to the grid object\n      setGrid((grid) => ({\n        ...grid,\n        features: grid.features.map((feature) => {\n          if (pickedObject.index === feature.properties.id) {\n            return {\n              ...feature,\n              properties: thisCellProps,\n            };\n          }\n          return feature;\n        }),\n      }));\n    });\n  };\n\n  /**\n   * Description.\n   * draw target area around mouse\n   */\n  const renderEditorBrush = () => {\n    return (\n      selectedType && (\n        <EditorBrush\n          mousePos={mousePos}\n          selectedType={selectedType}\n          divSize={pickingRadius}\n          mouseDown={mouseDown}\n          // hoveredObj={hoveredObj}\n        />\n      )\n    );\n  };\n\n  const handleKeyUp = () => {\n    setKeyDownState(null);\n  };\n\n  const handleKeyDown = (e) => {\n    // avoid common clicks\n    setKeyDownState(e.nativeEvent.key);\n  };\n\n  /**\n   * renders deck gl layers\n   */\n  const renderLayers = () => {\n    const layers = [\n      new GeoJsonLayer({\n        id: \"GRID\",\n        opacity: 0.5,\n        stroked: false,\n        filled: true,\n        wireframe: true,\n        visible: true,\n        pickable: true,\n        data: grid,\n        extruded: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 1,\n        getElevation: (d) => d.properties.height[1],\n        getFillColor: (d) => d.properties.color,\n\n        onClick: (event, cellInfo) => {\n          if (!cellInfo.rightButton && keyDownState !== \"Shift\")\n            handleGridCellEditing(event);\n        },\n        onDrag: (event, cellInfo) => {\n          if (!cellInfo.rightButton && keyDownState !== \"Shift\")\n            handleGridCellEditing(event);\n        },\n        onDragStart: (event, cellInfo) => {\n          if (!cellInfo.rightButton && keyDownState !== \"Shift\") {\n            setDraggingWhileEditing(true);\n          }\n        },\n        onDragEnd: () => {\n          setDraggingWhileEditing(false);\n        },\n        updateTriggers: {\n          getFillColor: pickedCellsState,\n          getElevation: pickedCellsState,\n        },\n      }),\n    ];\n    return layers;\n  };\n\n  return (\n    <div\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onMouseMove={(e) => setMousePos(e.nativeEvent)}\n      onMouseUp={() => {\n        // ! when mouse is up, dispatch the grid to the store\n        //! so it will be sent to the server when committing\n        dispatch(updateGridMaker(grid));\n        setMouseDown(false);\n      }}\n      onMouseDown={() => setMouseDown(true)}\n    >\n      {renderEditorBrush()}\n\n      <DeckGL\n        ref={deckGLref}\n        viewState={viewState}\n        onViewStateChange={onViewStateChange}\n        layers={renderLayers()}\n        controller={{\n          touchZoom: true,\n          touchRotate: true,\n          dragPan: !draggingWhileEditing,\n          dragRotate: !draggingWhileEditing,\n          keyboard: false,\n        }}\n      >\n        <StaticMap\n          asyncRender={false}\n          dragRotate={true}\n          reuseMaps={true}\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n          mapStyle={GridEditorSettings.map.mapStyle.sat}\n          preventStyleDiffing={true}\n        />\n      </DeckGL>\n    </div>\n  );\n}\n","import Button from \"@mui/material/Button\";\nimport CenterFocusStrongIcon from \"@mui/icons-material/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\nimport { updateEditorMapCenter } from \"../../../../../redux/reducers/editorMenuSlice\";\n\nexport default function CenterMapButton(props) {\n  const dispatch = useDispatch();\n\n  return (\n    <Button\n      onClick={() => {\n        dispatch(\n          updateEditorMapCenter({\n            latCenter: parseFloat(props.mapCenter[0]),\n            lonCenter: parseFloat(props.mapCenter[1]),\n          })\n        );\n      }}\n      variant=\"outlined\"\n      startIcon={<CenterFocusStrongIcon />}\n    >\n      Center Map to Grid\n    </Button>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { updateGridProps } from \"../../../../redux/reducers/editorMenuSlice\";\nimport { TextField, Typography, List, ListItem, Stack } from \"@mui/material\";\nimport CenterMapButton from \"./CenterMapButton\";\nimport { GridEditorSettings } from \"../../../../settings/settings\";\n\nexport default function GridProps() {\n  const settings = GridEditorSettings;\n  const dispatch = useDispatch();\n  const [formValues, setFormValues] = useState({\n    tableName: settings.GEOGRID.properties.header.tableName,\n    latitude: settings.GEOGRID.properties.header.latitude,\n    longitude: settings.GEOGRID.properties.header.longitude,\n    tz: settings.GEOGRID.properties.header.tz,\n    nrows: settings.GEOGRID.properties.header.nrows,\n    ncols: settings.GEOGRID.properties.header.nrows,\n    rotation: settings.GEOGRID.properties.header.rotation,\n    cellSize: settings.GEOGRID.properties.header.cellSize,\n    projection: settings.GEOGRID.properties.header.projection,\n  });\n\n  const handleFormUpdates = (event) => {\n    const { id, value } = event.target;\n    setFormValues({ ...formValues, [id]: value });\n  };\n\n  useEffect(() => {\n    // dispatch form values to redux store\n    dispatch(updateGridProps(formValues));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [formValues]);\n\n  //  get all data\n  // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n  return (\n    <List>\n      <ListItem>\n        <Typography variant=\"h4\">Project Properties</Typography>\n      </ListItem>\n      <ListItem>\n        <TextField\n          onChange={(event) => handleFormUpdates(event)}\n          variant=\"outlined\"\n          id=\"tableName\"\n          label=\"CityScope Project Name\"\n          defaultValue={formValues.tableName}\n        />\n      </ListItem>\n      <ListItem>\n        <Stack direction=\"row\" spacing={1}>\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"latitude\"\n            label=\"Latitude\"\n            defaultValue={formValues.latitude}\n            type=\"number\"\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"longitude\"\n            label=\"Longitude\"\n            defaultValue={formValues.longitude}\n            type=\"number\"\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"tz\"\n            label=\"Time Zone (GMT)\"\n            defaultValue={formValues.tz}\n            type=\"number\"\n          />\n        </Stack>\n      </ListItem>\n      <ListItem>\n        <CenterMapButton\n          mapCenter={[formValues.latitude, formValues.longitude]}\n        />\n      </ListItem>\n\n      <ListItem>\n        <Stack direction=\"row\" spacing={1}>\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"nrows\"\n            label=\"Rows\"\n            defaultValue={formValues.nrows}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 100,\n                min: 0,\n              },\n            }}\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"ncols\"\n            label=\"Columns\"\n            defaultValue={formValues.ncols}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 100,\n                min: 0,\n              },\n            }}\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"rotation\"\n            label=\"Rotation (deg)\"\n            defaultValue={formValues.rotation}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 360,\n                min: 0,\n              },\n            }}\n          />\n\n          <TextField\n            onChange={(event) => handleFormUpdates(event)}\n            variant=\"outlined\"\n            id=\"cellSize\"\n            label=\"Cell Size (m^2)\"\n            defaultValue={formValues.cellSize}\n            type=\"number\"\n            InputProps={{\n              inputProps: {\n                max: 1000,\n                min: 1,\n              },\n            }}\n          />\n        </Stack>\n      </ListItem>\n      <ListItem>\n        <TextField\n          size=\"small\"\n          onChange={(event) => handleFormUpdates(event)}\n          variant=\"outlined\"\n          id=\"projection\"\n          label=\"Projection\"\n          defaultValue={formValues.projection}\n          type=\"string\"\n          helperText=\"Default projection should work for most CityScope cases. Find specific projections at: https://epsg.io/\"\n        />\n      </ListItem>\n    </List>\n  );\n}\n","import proj4 from \"proj4\";\nimport { hexToRgb } from \"../../../../utils/utils\";\n\nfunction deg_to_rad(deg) {\n  return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n  return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n  var keys = Object.keys(obj);\n  return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps, typesList) => {\n  let top_left_lon = parseFloat(gridProps.longitude);\n  let top_left_lat = parseFloat(gridProps.latitude);\n  let rotation = parseFloat(gridProps.rotation);\n  let userPrj = gridProps.projection;\n  let cell_size = parseFloat(gridProps.cellSize);\n  let nrows = parseFloat(gridProps.nrows);\n  let ncols = parseFloat(gridProps.ncols);\n\n  const webMercator = proj4.defs(\"EPSG:4326\");\n  let EARTH_RADIUS_M = 6.371e6;\n  let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n  let bearing = (90 - rotation + 360) % 360;\n  let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n  let la1 = deg_to_rad(top_left_lon_lat.lat);\n  let lo1 = deg_to_rad(top_left_lon_lat.lon);\n  let bearing_rad = deg_to_rad(bearing);\n  let la2 = Math.asin(\n    Math.sin(la1) * Math.cos(Ad) +\n      Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n  );\n  let lo2 =\n    lo1 +\n    Math.atan2(\n      Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n      Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n    );\n  let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n  let top_left_xy = proj4(webMercator, userPrj, [\n    top_left_lon_lat.lon,\n    top_left_lon_lat.lat,\n  ]);\n\n  let top_right_xy = proj4(webMercator, userPrj, [\n    top_right_lon_lat.lon,\n    top_right_lon_lat.lat,\n  ]);\n\n  let dydx =\n    (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n  let theta = Math.atan(dydx);\n  let cosTheta = Math.cos(theta);\n  let sinTheta = Math.sin(theta);\n  // create rotate matrix\n  let x_unRot = [];\n  let y_unRot = [];\n  for (let i = 0; i < nrows; i++) {\n    for (let j = 0; j < ncols; j++) {\n      x_unRot.push(j * cell_size);\n      y_unRot.push(-i * cell_size);\n    }\n  }\n\n  let x_rot = [];\n  let y_rot = [];\n  for (let i = 0; i < x_unRot.length; i++) {\n    x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n    y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n  }\n\n  let x_rot_trans = [];\n  let y_rot_trans = [];\n  for (let i = 0; i < x_rot.length; i++) {\n    x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n    y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n  }\n\n  var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n  var dydCol = y_rot_trans[1] - y_rot_trans[0];\n  var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n  var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n  let gridPnts = [];\n  let geojsonFeatureCollection = {\n    type: \"FeatureCollection\",\n    // polygons go here\n    features: [],\n  };\n\n  // get a list of types that is updated based on\n  // the current redux state of the types list table\n  let types = typesList;\n\n  for (let i = 0; i < x_rot_trans.length; i++) {\n    let rndType = randomProperty(types);\n\n    let geojsonPolygon = {\n      type: \"Feature\",\n      geometry: {\n        type: \"Polygon\",\n        coordinates: null,\n      },\n      properties: {\n        color: hexToRgb(rndType.color),\n        height: rndType.height,\n        name: rndType.name,\n        interactive: rndType.interactive,\n        id: i,\n      },\n    };\n\n    var polygon_xy = [\n      [x_rot_trans[i], y_rot_trans[i]],\n      [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n      [x_rot_trans[i] + dxdRow + dxdCol, y_rot_trans[i] + dydRow + dydCol],\n      [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n      [x_rot_trans[i], y_rot_trans[i]],\n    ];\n\n    var polygon_ll = [];\n    for (var v = 0; v < 5; v++) {\n      let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n      polygon_ll.push(ll);\n    }\n\n    geojsonPolygon.geometry.coordinates = [polygon_ll];\n    gridPnts.push(geojsonPolygon);\n  }\n  geojsonFeatureCollection.features = gridPnts;\n  return geojsonFeatureCollection;\n};\n","import { useState, useEffect } from \"react\";\nimport AutoAwesomeIcon from \"@mui/icons-material/AutoAwesome\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport { gridCreator } from \"./gridCreator\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateGridMaker } from \"../../../../redux/reducers/editorMenuSlice\";\n\nexport default function GridMakerMenu() {\n  const dispatch = useDispatch();\n  const [grid, setGrid] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const gridProps = useSelector((state) => state.editorMenuState.gridProps);\n  const typesList = useSelector(\n    (state) => state.editorMenuState.typesEditorState.tableData\n  );\n\n  useEffect(() => {\n    dispatch(updateGridMaker(grid));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [grid]);\n\n  const handleGridCreation = () => {\n    setGrid(gridCreator(gridProps, typesList));\n  };\n\n  return (\n    <>\n      {gridProps && typesList && (\n        <LoadingButton\n          onClick={() => {\n            setLoading(true);\n            new Promise((resolve) => {\n              setTimeout(() => {\n                setLoading(false);\n                handleGridCreation();\n              }, 100);\n              resolve();\n            });\n          }}\n          loading={loading}\n          loadingPosition=\"start\"\n          variant=\"outlined\"\n          startIcon={<AutoAwesomeIcon />}\n        >\n          Generate Grid\n        </LoadingButton>\n      )}\n    </>\n  );\n}\n","import MaterialTable from \"@material-table/core\";\nimport { useState, useEffect } from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nimport { GridEditorSettings } from \"../../../../settings/settings\";\nimport { updateTypesEditorState } from \"../../../../redux/reducers/editorMenuSlice\";\n\nconst settings = GridEditorSettings;\n\nexport const createTypesArray = (LandUseTypesList) => {\n  let typesArray = [];\n  Object.keys(LandUseTypesList).forEach((type, index) => {\n    typesArray.push({\n      id: index,\n      name: type,\n      description: \"[edit info for type: \" + type + \"]\",\n      color: LandUseTypesList[type].color,\n      height: LandUseTypesList[type].height ? LandUseTypesList[type].height : [0,0,0],\n\n      LBCS: LandUseTypesList[type].LBCS\n        ? JSON.stringify(LandUseTypesList[type].LBCS)\n        : null,\n      NAICS: LandUseTypesList[type].NAICS\n        ? JSON.stringify(LandUseTypesList[type].NAICS)\n        : null,\n      interactive: LandUseTypesList[type].interactive,\n    });\n  });\n  return typesArray;\n};\n\nexport const tableInitialState = {\n  columns: [\n    {\n      title: \"Type\",\n      field: \"name\",\n    },\n    {\n      title: \"Description\",\n      field: \"description\",\n    },\n\n    {\n      title: \"Height Min.\",\n      field: \"height[0]\",\n      type: \"numeric\",\n    },\n    {\n      title: \"Height Default\",\n      field: \"height[1]\",\n      type: \"numeric\",\n    },\n    {\n      title: \"Height Max.\",\n      field: \"height[2]\",\n      type: \"numeric\",\n    },\n    {\n      title: \"Interactive\",\n      field: \"interactive\",\n      lookup: { No: \"No\", Web: \"Web\", TUI: \"TUI\" },\n    },\n    {\n      title: \"Color\",\n      field: \"color\",\n      type: \"string\",\n    },\n    {\n      title: \"LBCS\",\n      field: \"LBCS\",\n      type: \"string\",\n    },\n    {\n      title: \"NAICS\",\n      field: \"NAICS\",\n      type: \"string\",\n    },\n  ],\n  data: createTypesArray(settings.GEOGRID.properties.types),\n};\n\nexport default function TypesEditorMenu() {\n  const [tableState, setTableState] = useState(tableInitialState);\n  const dispatch = useDispatch();\n  const [selectedRow, setSelectedRow] = useState();\n  const [rowColor, setRowColor] = useState();\n\n  // redux the type list on every change\n  useEffect(() => {\n    dispatch(\n      updateTypesEditorState({\n        tableData: tableState.data,\n        selectedRow: selectedRow,\n        rowColor: rowColor,\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableState, selectedRow, rowColor]);\n\n  return (\n    <MaterialTable\n      title={<Typography variant=\"h4\">Types Editor</Typography>}\n      columns={tableState.columns}\n      data={tableState.data}\n      options={{\n        paging: false,\n        search: true,\n        selection: false,\n        rowStyle: (rowData) => ({\n          backgroundColor:\n            selectedRow && selectedRow.tableData.id === rowData.tableData.id\n              ? rowColor\n              : null,\n\n          color:\n            selectedRow && selectedRow.tableData.id === rowData.tableData.id\n              ? \"black\"\n              : \"white\",\n        }),\n      }}\n      onRowClick={(evt, row) => {\n        setSelectedRow(row);\n        setRowColor(row.color);\n      }}\n      editable={{\n        // ! new row is added to the end of the table\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            resolve();\n            setTimeout(() => {\n              setTableState((prevState) => {\n                const data = [...prevState.data];\n                newData.id = data.length;\n                data.push(newData);\n                return { ...prevState, data };\n              });\n            }, 50);\n          }),\n        // ! row edit is done by clicking on the row\n        onRowUpdate: (newData, oldData) =>\n          new Promise((resolve) => {\n            resolve();\n            setTimeout(() => {\n              if (oldData) {\n                setTableState((prevState) => {\n                  const tableData = [...prevState.data];\n                  const index = tableData\n                    .map((object) => object.id)\n                    .indexOf(oldData.id);\n                  tableData[index] = newData;\n                  return { ...prevState, data: tableData };\n                });\n              }\n            }, 50);\n          }),\n        // ! row delete is done by clicking on the icon\n        // onRowDelete: (oldData) => {\n        //   new Promise((resolve) => {\n        //     resolve();\n        //     setTimeout(() => {\n        //       if (oldData) {\n        //         setTableState((prevState) => {\n        //           const tableData = [...prevState.data];\n        //           const index = tableData\n        //             .map((object) => object.id)\n        //             .indexOf(oldData.id);\n        //           tableData.splice(index, 1);\n        //           return { ...prevState, data: tableData };\n        //         });\n        //       }\n        //     }, 1000);\n        //   });\n        // },\n      }}\n    />\n  );\n}\n","import { useState } from \"react\";\nimport axios from \"axios\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport { GridEditorSettings } from \"../../../../settings/settings\";\nimport {cityIOSettings} from \"../../../../settings/settings\";\nimport Typography from \"@mui/material/Typography\";\nimport { useSelector } from \"react-redux\";\nimport Link from \"@mui/material/Link\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\n\nconst reqResponseUI = (response, tableName) => {\n  let cityscopeJSendpoint =\n    \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" + tableName;\n  // create the feedback text\n  let resText = (\n    <Typography color=\"textPrimary\" variant=\"caption\">\n      CityIO is {response.data.status}. Grid deployed to{\" \"}\n      <Link color=\"textSecondary\" href={cityscopeJSendpoint}>\n        {cityscopeJSendpoint}\n      </Link>\n    </Typography>\n  );\n  return resText;\n};\n\nconst makeGEOGRIDobject = (struct, typesList, geoJsonFeatures, gridProps) => {\n  let GEOGRIDObject = { ...struct };\n\n  // take types list and prepare to csJS format\n  let newTypesList = {};\n  typesList.forEach((oldType) => {\n    newTypesList[oldType.name] = { ...oldType };\n    //material-table creates strings for these items\n    // so in first \"Commit to cityIO\", these must be turned into\n    // Json objects. On Second commit, these are already objects,\n    // hence the two conditions below\n    newTypesList[oldType.name].LBCS =\n      typeof oldType.LBCS === \"string\"\n        ? JSON.parse(oldType.LBCS)\n        : oldType.LBCS;\n    newTypesList[oldType.name].NAICS =\n      typeof oldType.NAICS === \"string\"\n        ? JSON.parse(oldType.NAICS)\n        : oldType.NAICS;\n  });\n\n  GEOGRIDObject.properties.types = newTypesList;\n  // inject table props to grid\n  GEOGRIDObject.properties.header = { ...gridProps };\n\n  const toFloatArray = [\n    \"longitude\",\n    \"latitude\",\n    \"rotation\",\n    \"nrows\",\n    \"ncols\",\n    \"cellSize\",\n  ];\n  toFloatArray.forEach((element) => {\n    GEOGRIDObject.properties.header[element] = parseFloat(\n      GEOGRIDObject.properties.header[element]\n    );\n  });\n\n  // lastly get the grid features\n  GEOGRIDObject.features = geoJsonFeatures;\n  return GEOGRIDObject;\n};\n\nconst makeGEOGRIDDATAobject = (geoJsonFeatures) => {\n  let GEOGRIDDATA_object = [];\n  geoJsonFeatures.forEach((element) => {\n    GEOGRIDDATA_object.push(element.properties);\n  });\n  return GEOGRIDDATA_object;\n};\n\nexport default function CommitGridMenu() {\n  const [loading, setLoading] = useState(false);\n  const [reqResponse, setReqResponse] = useState();\n  const gridProps = useSelector((state) => state.editorMenuState.gridProps);\n  const typesList = useSelector(\n    (state) => state.editorMenuState.typesEditorState.tableData\n  );\n\n  const generatedGrid = useSelector((state) => state.editorMenuState.gridMaker);\n  const generatedGridBool =\n    generatedGrid &&\n    generatedGrid.features &&\n    generatedGrid.features.length > 0;\n\n  const postGridToCityIO = () => {\n    let GEOGRIDStructure = GridEditorSettings.GEOGRID;\n    let geoJsonFeatures = generatedGrid.features;\n    // take grid struct from settings\n    let GEOGRIDObject = makeGEOGRIDobject(\n      GEOGRIDStructure,\n      typesList,\n      geoJsonFeatures,\n      gridProps\n    );\n\n    let GEOGRIDDATAObject = makeGEOGRIDDATAobject(geoJsonFeatures);\n    let tableName = GEOGRIDObject.properties.header.tableName.toLowerCase();\n\n    // post to cityIO server \n    const gridPOSToptions = (URL, DATA) => {\n      return {\n        method: \"post\",\n        url: URL,\n        data: DATA,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      };\n    };\n  \n    const table_url = `${cityIOSettings.cityIO.baseURL}table/${tableName}/`;\n    const new_table_grid = {\n      GEOGRID: GEOGRIDObject,\n      GEOGRIDDATA: GEOGRIDDATAObject,\n    };\n\n    axios(gridPOSToptions(table_url, new_table_grid))\n      .then(function (response) {\n        setReqResponse(reqResponseUI(response, tableName));\n      })\n      .catch((error) => console.log(`ERROR: ${error}`));\n  };\n\n  return (\n    <>\n      {generatedGridBool && (\n        <>\n          <LoadingButton\n            onClick={() => {\n              setLoading(true);\n              new Promise((resolve) => {\n                setTimeout(() => {\n                  setLoading(false);\n                  postGridToCityIO();\n                }, 1500);\n                resolve();\n              });\n            }}\n            loading={loading}\n            loadingPosition=\"start\"\n            variant=\"outlined\"\n            startIcon={<CloudUploadIcon />}\n          >\n            Commit Grid to cityIO\n          </LoadingButton>\n\n          <div style={{ width: \"100%\" }}> {reqResponse}</div>\n        </>\n      )}\n    </>\n  );\n}\n","import { List, Grid, ListItem, Typography, Card, CardContent } from \"@mui/material\";\nimport ResizableDrawer from \"../../../Components/ResizableDrawer\";\nimport GridPropsMenu from \"./GridPropsMenu\";\nimport GridMakerMenu from \"./GridMakerMenu\";\nimport TypesEditorMenu from \"./TypesEditorMenu\";\nimport CommitGridMenu from \"./CommitGridMenu\";\n\nexport default function EditorMenu() {\n  const menuItemsArray = [\n    <Typography variant=\"h2\">CityScope Grid Editor</Typography>,\n    <Typography>\n      This editor can create and `commit` spatial layouts (`grids`) as a\n      baseline for CityScope projects. Use the menus and map to edit girds,\n      types, and props, and commit them to cityIO.\n    </Typography>,\n    <GridPropsMenu />,\n    <Grid container spacing={2}>\n      <Grid item>\n        <GridMakerMenu />\n      </Grid>\n      <Grid item>\n        <CommitGridMenu />\n      </Grid>\n    </Grid>,\n\n    <TypesEditorMenu />,\n  ];\n\n  const MenuItems = () => {\n    const m = [];\n\n    menuItemsArray.forEach((item, index) => {\n      m.push(\n        <ListItem key={index}>\n          <Card variant=\"outlined\" sx={{ width: \"100%\" }}>\n            <CardContent>{item}</CardContent>\n          </Card>\n        </ListItem>\n      );\n    });\n    return m;\n  };\n\n  return (\n    <ResizableDrawer direction={\"left\"} width={500}>\n      <List>\n        <MenuItems />\n      </List>\n    </ResizableDrawer>\n  );\n}\n","import EditorMap from \"./EditorMap\";\nimport EditorMenu from \"./EditorMenu\";\n\nexport default function GridEditor() {\n  return (\n    <>\n      <EditorMenu />\n      <EditorMap />\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { CssBaseline } from \"@mui/material/\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { useDispatch } from \"react-redux\";\nimport { updateCityIOtableName } from \"./redux/reducers/cityIOdataSlice\";\nimport queryString from \"query-string\";\nimport theme from \"./theme\";\n// views\nimport CityScopeJS from \"./views/CityScopeJS\";\nimport CityIOviewer from \"./views/CityIOviewer\";\nimport RenderedView from \"./views/RenderedView\";\nimport ProjectionMapping from \"./views/ProjectionMapping\";\nimport GridEditor from \"./views/GridEditor\";\n\n/**\nget this tab URL and parse as a simple router to show the correct view\n **/\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const [tableName, setTableName] = useState();\n\n  // change the document title to the table name\n  useEffect(() => {\n    document.title = tableName ? `CityScopeJS | ${tableName}` : \"CityScopeJS\";\n  }, [tableName]);\n\n  const [viewSelectorState, setViewSelectorState] = useState();\n\n  const selectView = (view, tableName) => {\n    const cityIOtableName = tableName && tableName.toLowerCase();\n    // check if tableName is a valid tableName\n    if (cityIOtableName && cityIOtableName !== \"\") {\n      setTableName(cityIOtableName);\n      dispatch(updateCityIOtableName(cityIOtableName));\n      setViewSelectorState(view);\n    } else {\n      setViewSelectorState(\"cityio\");\n    }\n  };\n\n  // on init, get the adress URL to search for  a table\n  useEffect(() => {\n    const location = window.location;\n    const parsed = queryString.parse(location.search);\n\n    //a switch for the location.search and the parsed.tableName\n    const keys = Object.keys(parsed);\n\n    if (keys.includes(\"cityscope\")) {\n      selectView(\"cityscopejs\", parsed.cityscope);\n    } else if (keys.includes(\"projection\")) {\n      selectView(\"projection\", parsed.projection);\n    } else if (keys.includes(\"render\")) {\n      selectView(\"render\", parsed.render);\n    } else if (keys.includes(\"editor\")) {\n      setViewSelectorState(\"grideditor\");\n    } else {\n      setViewSelectorState(\"cityio\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <>\n        {/* otherwise show the editor  */}\n        {viewSelectorState === \"cityscopejs\" && <CityScopeJS />}\n        {/* otherwise show the editor  */}\n        {viewSelectorState === \"grideditor\" && <GridEditor />}\n        {/* otherwise, show the cityIOviewer */}\n        {viewSelectorState === \"cityio\" && <CityIOviewer />}\n        {/* otherwise, show the projection */}\n        {viewSelectorState === \"projection\" && <ProjectionMapping />}\n        {/* otherwise, show the projection */}\n        {viewSelectorState === \"render\" && <RenderedView />}\n      </>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport cityIOdataSliceReducer from \"./cityIOdataSlice\";\nimport menuSliceReducer from \"./menuSlice\";\nimport editorMenuSliceReducer from \"./editorMenuSlice\";\n\nexport default combineReducers({\n  cityIOdataState: cityIOdataSliceReducer,\n  menuState: menuSliceReducer,\n  editorMenuState: editorMenuSliceReducer,\n});\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./redux/reducers\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nReactDOM.render(\n  <>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}